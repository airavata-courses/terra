/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 40286.0, "series": [{"data": [[0.0, 10.0], [0.1, 205.0], [0.2, 402.0], [0.3, 432.0], [0.4, 486.0], [0.5, 505.0], [0.6, 553.0], [0.7, 570.0], [0.8, 580.0], [0.9, 585.0], [1.0, 590.0], [1.1, 597.0], [1.2, 604.0], [1.3, 607.0], [1.4, 609.0], [1.5, 617.0], [1.6, 626.0], [1.7, 631.0], [1.8, 642.0], [1.9, 646.0], [2.0, 647.0], [2.1, 650.0], [2.2, 658.0], [2.3, 662.0], [2.4, 670.0], [2.5, 674.0], [2.6, 678.0], [2.7, 683.0], [2.8, 687.0], [2.9, 690.0], [3.0, 697.0], [3.1, 700.0], [3.2, 704.0], [3.3, 707.0], [3.4, 711.0], [3.5, 715.0], [3.6, 717.0], [3.7, 719.0], [3.8, 722.0], [3.9, 726.0], [4.0, 735.0], [4.1, 740.0], [4.2, 743.0], [4.3, 751.0], [4.4, 755.0], [4.5, 757.0], [4.6, 761.0], [4.7, 763.0], [4.8, 765.0], [4.9, 767.0], [5.0, 769.0], [5.1, 772.0], [5.2, 775.0], [5.3, 778.0], [5.4, 780.0], [5.5, 784.0], [5.6, 787.0], [5.7, 792.0], [5.8, 794.0], [5.9, 796.0], [6.0, 797.0], [6.1, 800.0], [6.2, 803.0], [6.3, 806.0], [6.4, 810.0], [6.5, 813.0], [6.6, 814.0], [6.7, 818.0], [6.8, 820.0], [6.9, 824.0], [7.0, 827.0], [7.1, 829.0], [7.2, 833.0], [7.3, 835.0], [7.4, 839.0], [7.5, 840.0], [7.6, 842.0], [7.7, 844.0], [7.8, 846.0], [7.9, 849.0], [8.0, 851.0], [8.1, 855.0], [8.2, 859.0], [8.3, 862.0], [8.4, 866.0], [8.5, 869.0], [8.6, 872.0], [8.7, 876.0], [8.8, 877.0], [8.9, 878.0], [9.0, 882.0], [9.1, 884.0], [9.2, 889.0], [9.3, 891.0], [9.4, 895.0], [9.5, 896.0], [9.6, 898.0], [9.7, 901.0], [9.8, 904.0], [9.9, 906.0], [10.0, 908.0], [10.1, 913.0], [10.2, 915.0], [10.3, 918.0], [10.4, 921.0], [10.5, 925.0], [10.6, 931.0], [10.7, 933.0], [10.8, 936.0], [10.9, 937.0], [11.0, 939.0], [11.1, 941.0], [11.2, 944.0], [11.3, 947.0], [11.4, 950.0], [11.5, 955.0], [11.6, 958.0], [11.7, 961.0], [11.8, 965.0], [11.9, 966.0], [12.0, 968.0], [12.1, 970.0], [12.2, 972.0], [12.3, 977.0], [12.4, 980.0], [12.5, 982.0], [12.6, 985.0], [12.7, 987.0], [12.8, 990.0], [12.9, 992.0], [13.0, 994.0], [13.1, 996.0], [13.2, 1000.0], [13.3, 1002.0], [13.4, 1006.0], [13.5, 1008.0], [13.6, 1011.0], [13.7, 1014.0], [13.8, 1018.0], [13.9, 1022.0], [14.0, 1025.0], [14.1, 1028.0], [14.2, 1032.0], [14.3, 1034.0], [14.4, 1038.0], [14.5, 1040.0], [14.6, 1042.0], [14.7, 1044.0], [14.8, 1047.0], [14.9, 1048.0], [15.0, 1052.0], [15.1, 1056.0], [15.2, 1059.0], [15.3, 1062.0], [15.4, 1063.0], [15.5, 1066.0], [15.6, 1069.0], [15.7, 1072.0], [15.8, 1076.0], [15.9, 1077.0], [16.0, 1079.0], [16.1, 1080.0], [16.2, 1082.0], [16.3, 1084.0], [16.4, 1088.0], [16.5, 1091.0], [16.6, 1092.0], [16.7, 1095.0], [16.8, 1097.0], [16.9, 1100.0], [17.0, 1104.0], [17.1, 1109.0], [17.2, 1111.0], [17.3, 1114.0], [17.4, 1119.0], [17.5, 1122.0], [17.6, 1124.0], [17.7, 1128.0], [17.8, 1130.0], [17.9, 1132.0], [18.0, 1136.0], [18.1, 1139.0], [18.2, 1141.0], [18.3, 1145.0], [18.4, 1147.0], [18.5, 1150.0], [18.6, 1152.0], [18.7, 1155.0], [18.8, 1157.0], [18.9, 1161.0], [19.0, 1164.0], [19.1, 1170.0], [19.2, 1173.0], [19.3, 1176.0], [19.4, 1177.0], [19.5, 1179.0], [19.6, 1182.0], [19.7, 1184.0], [19.8, 1189.0], [19.9, 1193.0], [20.0, 1197.0], [20.1, 1200.0], [20.2, 1202.0], [20.3, 1205.0], [20.4, 1206.0], [20.5, 1209.0], [20.6, 1211.0], [20.7, 1214.0], [20.8, 1217.0], [20.9, 1218.0], [21.0, 1221.0], [21.1, 1224.0], [21.2, 1227.0], [21.3, 1229.0], [21.4, 1233.0], [21.5, 1238.0], [21.6, 1242.0], [21.7, 1246.0], [21.8, 1248.0], [21.9, 1255.0], [22.0, 1258.0], [22.1, 1260.0], [22.2, 1263.0], [22.3, 1265.0], [22.4, 1266.0], [22.5, 1271.0], [22.6, 1276.0], [22.7, 1280.0], [22.8, 1282.0], [22.9, 1285.0], [23.0, 1288.0], [23.1, 1290.0], [23.2, 1291.0], [23.3, 1293.0], [23.4, 1297.0], [23.5, 1301.0], [23.6, 1307.0], [23.7, 1310.0], [23.8, 1314.0], [23.9, 1317.0], [24.0, 1321.0], [24.1, 1328.0], [24.2, 1336.0], [24.3, 1338.0], [24.4, 1340.0], [24.5, 1344.0], [24.6, 1347.0], [24.7, 1351.0], [24.8, 1355.0], [24.9, 1358.0], [25.0, 1361.0], [25.1, 1365.0], [25.2, 1368.0], [25.3, 1370.0], [25.4, 1374.0], [25.5, 1382.0], [25.6, 1385.0], [25.7, 1389.0], [25.8, 1392.0], [25.9, 1396.0], [26.0, 1400.0], [26.1, 1404.0], [26.2, 1408.0], [26.3, 1413.0], [26.4, 1416.0], [26.5, 1418.0], [26.6, 1422.0], [26.7, 1425.0], [26.8, 1428.0], [26.9, 1434.0], [27.0, 1438.0], [27.1, 1442.0], [27.2, 1445.0], [27.3, 1450.0], [27.4, 1455.0], [27.5, 1461.0], [27.6, 1463.0], [27.7, 1467.0], [27.8, 1474.0], [27.9, 1481.0], [28.0, 1486.0], [28.1, 1489.0], [28.2, 1494.0], [28.3, 1498.0], [28.4, 1503.0], [28.5, 1510.0], [28.6, 1515.0], [28.7, 1520.0], [28.8, 1523.0], [28.9, 1526.0], [29.0, 1531.0], [29.1, 1540.0], [29.2, 1544.0], [29.3, 1553.0], [29.4, 1562.0], [29.5, 1569.0], [29.6, 1577.0], [29.7, 1583.0], [29.8, 1591.0], [29.9, 1598.0], [30.0, 1601.0], [30.1, 1606.0], [30.2, 1615.0], [30.3, 1619.0], [30.4, 1628.0], [30.5, 1643.0], [30.6, 1661.0], [30.7, 1666.0], [30.8, 1671.0], [30.9, 1676.0], [31.0, 1685.0], [31.1, 1692.0], [31.2, 1703.0], [31.3, 1713.0], [31.4, 1725.0], [31.5, 1731.0], [31.6, 1735.0], [31.7, 1740.0], [31.8, 1742.0], [31.9, 1748.0], [32.0, 1757.0], [32.1, 1771.0], [32.2, 1779.0], [32.3, 1784.0], [32.4, 1796.0], [32.5, 1807.0], [32.6, 1818.0], [32.7, 1822.0], [32.8, 1828.0], [32.9, 1833.0], [33.0, 1850.0], [33.1, 1858.0], [33.2, 1868.0], [33.3, 1875.0], [33.4, 1889.0], [33.5, 1896.0], [33.6, 1904.0], [33.7, 1911.0], [33.8, 1925.0], [33.9, 1937.0], [34.0, 1941.0], [34.1, 1951.0], [34.2, 1963.0], [34.3, 1971.0], [34.4, 1976.0], [34.5, 1983.0], [34.6, 1994.0], [34.7, 2005.0], [34.8, 2018.0], [34.9, 2023.0], [35.0, 2038.0], [35.1, 2057.0], [35.2, 2068.0], [35.3, 2078.0], [35.4, 2091.0], [35.5, 2097.0], [35.6, 2109.0], [35.7, 2119.0], [35.8, 2131.0], [35.9, 2148.0], [36.0, 2162.0], [36.1, 2181.0], [36.2, 2186.0], [36.3, 2206.0], [36.4, 2229.0], [36.5, 2242.0], [36.6, 2256.0], [36.7, 2276.0], [36.8, 2287.0], [36.9, 2296.0], [37.0, 2307.0], [37.1, 2326.0], [37.2, 2335.0], [37.3, 2358.0], [37.4, 2375.0], [37.5, 2381.0], [37.6, 2391.0], [37.7, 2409.0], [37.8, 2435.0], [37.9, 2450.0], [38.0, 2463.0], [38.1, 2480.0], [38.2, 2490.0], [38.3, 2511.0], [38.4, 2526.0], [38.5, 2556.0], [38.6, 2574.0], [38.7, 2602.0], [38.8, 2628.0], [38.9, 2645.0], [39.0, 2670.0], [39.1, 2701.0], [39.2, 2741.0], [39.3, 2775.0], [39.4, 2784.0], [39.5, 2811.0], [39.6, 2832.0], [39.7, 2849.0], [39.8, 2865.0], [39.9, 2873.0], [40.0, 2887.0], [40.1, 2896.0], [40.2, 2910.0], [40.3, 2927.0], [40.4, 2941.0], [40.5, 2968.0], [40.6, 2995.0], [40.7, 3003.0], [40.8, 3040.0], [40.9, 3060.0], [41.0, 3080.0], [41.1, 3085.0], [41.2, 3099.0], [41.3, 3118.0], [41.4, 3151.0], [41.5, 3173.0], [41.6, 3190.0], [41.7, 3219.0], [41.8, 3237.0], [41.9, 3244.0], [42.0, 3267.0], [42.1, 3294.0], [42.2, 3318.0], [42.3, 3348.0], [42.4, 3362.0], [42.5, 3389.0], [42.6, 3427.0], [42.7, 3443.0], [42.8, 3460.0], [42.9, 3474.0], [43.0, 3498.0], [43.1, 3511.0], [43.2, 3528.0], [43.3, 3548.0], [43.4, 3560.0], [43.5, 3569.0], [43.6, 3587.0], [43.7, 3599.0], [43.8, 3617.0], [43.9, 3628.0], [44.0, 3648.0], [44.1, 3659.0], [44.2, 3680.0], [44.3, 3699.0], [44.4, 3715.0], [44.5, 3733.0], [44.6, 3758.0], [44.7, 3766.0], [44.8, 3782.0], [44.9, 3808.0], [45.0, 3826.0], [45.1, 3833.0], [45.2, 3845.0], [45.3, 3859.0], [45.4, 3884.0], [45.5, 3894.0], [45.6, 3914.0], [45.7, 3931.0], [45.8, 3947.0], [45.9, 3960.0], [46.0, 3977.0], [46.1, 3991.0], [46.2, 4005.0], [46.3, 4016.0], [46.4, 4024.0], [46.5, 4043.0], [46.6, 4071.0], [46.7, 4087.0], [46.8, 4094.0], [46.9, 4101.0], [47.0, 4118.0], [47.1, 4135.0], [47.2, 4149.0], [47.3, 4157.0], [47.4, 4170.0], [47.5, 4178.0], [47.6, 4197.0], [47.7, 4207.0], [47.8, 4217.0], [47.9, 4225.0], [48.0, 4241.0], [48.1, 4255.0], [48.2, 4275.0], [48.3, 4282.0], [48.4, 4299.0], [48.5, 4308.0], [48.6, 4339.0], [48.7, 4351.0], [48.8, 4363.0], [48.9, 4379.0], [49.0, 4389.0], [49.1, 4405.0], [49.2, 4409.0], [49.3, 4425.0], [49.4, 4441.0], [49.5, 4445.0], [49.6, 4449.0], [49.7, 4464.0], [49.8, 4477.0], [49.9, 4482.0], [50.0, 4495.0], [50.1, 4504.0], [50.2, 4518.0], [50.3, 4536.0], [50.4, 4548.0], [50.5, 4559.0], [50.6, 4574.0], [50.7, 4589.0], [50.8, 4602.0], [50.9, 4613.0], [51.0, 4627.0], [51.1, 4634.0], [51.2, 4642.0], [51.3, 4652.0], [51.4, 4653.0], [51.5, 4661.0], [51.6, 4668.0], [51.7, 4687.0], [51.8, 4695.0], [51.9, 4703.0], [52.0, 4714.0], [52.1, 4720.0], [52.2, 4728.0], [52.3, 4734.0], [52.4, 4750.0], [52.5, 4755.0], [52.6, 4762.0], [52.7, 4773.0], [52.8, 4782.0], [52.9, 4802.0], [53.0, 4808.0], [53.1, 4827.0], [53.2, 4842.0], [53.3, 4853.0], [53.4, 4861.0], [53.5, 4874.0], [53.6, 4880.0], [53.7, 4895.0], [53.8, 4903.0], [53.9, 4910.0], [54.0, 4919.0], [54.1, 4929.0], [54.2, 4943.0], [54.3, 4952.0], [54.4, 4955.0], [54.5, 4964.0], [54.6, 4978.0], [54.7, 4992.0], [54.8, 5010.0], [54.9, 5025.0], [55.0, 5034.0], [55.1, 5043.0], [55.2, 5051.0], [55.3, 5063.0], [55.4, 5071.0], [55.5, 5081.0], [55.6, 5095.0], [55.7, 5105.0], [55.8, 5117.0], [55.9, 5129.0], [56.0, 5138.0], [56.1, 5155.0], [56.2, 5168.0], [56.3, 5177.0], [56.4, 5205.0], [56.5, 5217.0], [56.6, 5229.0], [56.7, 5246.0], [56.8, 5259.0], [56.9, 5273.0], [57.0, 5287.0], [57.1, 5306.0], [57.2, 5324.0], [57.3, 5333.0], [57.4, 5347.0], [57.5, 5359.0], [57.6, 5369.0], [57.7, 5379.0], [57.8, 5383.0], [57.9, 5386.0], [58.0, 5393.0], [58.1, 5411.0], [58.2, 5424.0], [58.3, 5439.0], [58.4, 5451.0], [58.5, 5459.0], [58.6, 5466.0], [58.7, 5477.0], [58.8, 5496.0], [58.9, 5506.0], [59.0, 5513.0], [59.1, 5521.0], [59.2, 5529.0], [59.3, 5540.0], [59.4, 5558.0], [59.5, 5574.0], [59.6, 5588.0], [59.7, 5593.0], [59.8, 5601.0], [59.9, 5616.0], [60.0, 5632.0], [60.1, 5644.0], [60.2, 5664.0], [60.3, 5676.0], [60.4, 5686.0], [60.5, 5701.0], [60.6, 5715.0], [60.7, 5730.0], [60.8, 5741.0], [60.9, 5754.0], [61.0, 5770.0], [61.1, 5796.0], [61.2, 5806.0], [61.3, 5816.0], [61.4, 5826.0], [61.5, 5831.0], [61.6, 5846.0], [61.7, 5858.0], [61.8, 5864.0], [61.9, 5870.0], [62.0, 5876.0], [62.1, 5896.0], [62.2, 5903.0], [62.3, 5919.0], [62.4, 5930.0], [62.5, 5952.0], [62.6, 5968.0], [62.7, 5981.0], [62.8, 5996.0], [62.9, 6016.0], [63.0, 6037.0], [63.1, 6047.0], [63.2, 6051.0], [63.3, 6060.0], [63.4, 6071.0], [63.5, 6083.0], [63.6, 6100.0], [63.7, 6109.0], [63.8, 6122.0], [63.9, 6152.0], [64.0, 6171.0], [64.1, 6182.0], [64.2, 6203.0], [64.3, 6219.0], [64.4, 6234.0], [64.5, 6239.0], [64.6, 6260.0], [64.7, 6266.0], [64.8, 6279.0], [64.9, 6283.0], [65.0, 6291.0], [65.1, 6302.0], [65.2, 6313.0], [65.3, 6329.0], [65.4, 6344.0], [65.5, 6354.0], [65.6, 6377.0], [65.7, 6391.0], [65.8, 6397.0], [65.9, 6409.0], [66.0, 6420.0], [66.1, 6441.0], [66.2, 6463.0], [66.3, 6474.0], [66.4, 6485.0], [66.5, 6505.0], [66.6, 6517.0], [66.7, 6530.0], [66.8, 6546.0], [66.9, 6559.0], [67.0, 6567.0], [67.1, 6575.0], [67.2, 6591.0], [67.3, 6606.0], [67.4, 6613.0], [67.5, 6628.0], [67.6, 6635.0], [67.7, 6662.0], [67.8, 6677.0], [67.9, 6688.0], [68.0, 6697.0], [68.1, 6702.0], [68.2, 6708.0], [68.3, 6723.0], [68.4, 6732.0], [68.5, 6753.0], [68.6, 6771.0], [68.7, 6782.0], [68.8, 6797.0], [68.9, 6803.0], [69.0, 6811.0], [69.1, 6825.0], [69.2, 6854.0], [69.3, 6866.0], [69.4, 6891.0], [69.5, 6904.0], [69.6, 6923.0], [69.7, 6948.0], [69.8, 6959.0], [69.9, 6988.0], [70.0, 7003.0], [70.1, 7015.0], [70.2, 7033.0], [70.3, 7049.0], [70.4, 7060.0], [70.5, 7064.0], [70.6, 7084.0], [70.7, 7094.0], [70.8, 7112.0], [70.9, 7142.0], [71.0, 7163.0], [71.1, 7177.0], [71.2, 7186.0], [71.3, 7206.0], [71.4, 7224.0], [71.5, 7239.0], [71.6, 7247.0], [71.7, 7257.0], [71.8, 7271.0], [71.9, 7277.0], [72.0, 7291.0], [72.1, 7302.0], [72.2, 7333.0], [72.3, 7345.0], [72.4, 7371.0], [72.5, 7401.0], [72.6, 7433.0], [72.7, 7446.0], [72.8, 7457.0], [72.9, 7470.0], [73.0, 7498.0], [73.1, 7516.0], [73.2, 7539.0], [73.3, 7553.0], [73.4, 7571.0], [73.5, 7599.0], [73.6, 7624.0], [73.7, 7644.0], [73.8, 7662.0], [73.9, 7677.0], [74.0, 7701.0], [74.1, 7713.0], [74.2, 7725.0], [74.3, 7758.0], [74.4, 7760.0], [74.5, 7783.0], [74.6, 7810.0], [74.7, 7830.0], [74.8, 7839.0], [74.9, 7865.0], [75.0, 7881.0], [75.1, 7896.0], [75.2, 7921.0], [75.3, 7944.0], [75.4, 7970.0], [75.5, 8006.0], [75.6, 8038.0], [75.7, 8069.0], [75.8, 8087.0], [75.9, 8110.0], [76.0, 8158.0], [76.1, 8187.0], [76.2, 8235.0], [76.3, 8255.0], [76.4, 8277.0], [76.5, 8283.0], [76.6, 8306.0], [76.7, 8334.0], [76.8, 8349.0], [76.9, 8360.0], [77.0, 8370.0], [77.1, 8385.0], [77.2, 8418.0], [77.3, 8442.0], [77.4, 8481.0], [77.5, 8509.0], [77.6, 8529.0], [77.7, 8544.0], [77.8, 8572.0], [77.9, 8616.0], [78.0, 8644.0], [78.1, 8672.0], [78.2, 8694.0], [78.3, 8729.0], [78.4, 8747.0], [78.5, 8796.0], [78.6, 8813.0], [78.7, 8824.0], [78.8, 8854.0], [78.9, 8888.0], [79.0, 8918.0], [79.1, 8944.0], [79.2, 8972.0], [79.3, 9001.0], [79.4, 9067.0], [79.5, 9075.0], [79.6, 9103.0], [79.7, 9151.0], [79.8, 9181.0], [79.9, 9211.0], [80.0, 9221.0], [80.1, 9255.0], [80.2, 9286.0], [80.3, 9322.0], [80.4, 9364.0], [80.5, 9401.0], [80.6, 9424.0], [80.7, 9456.0], [80.8, 9489.0], [80.9, 9500.0], [81.0, 9526.0], [81.1, 9570.0], [81.2, 9635.0], [81.3, 9727.0], [81.4, 9773.0], [81.5, 9803.0], [81.6, 9861.0], [81.7, 9901.0], [81.8, 9933.0], [81.9, 9956.0], [82.0, 9972.0], [82.1, 9998.0], [82.2, 10034.0], [82.3, 10061.0], [82.4, 10098.0], [82.5, 10125.0], [82.6, 10155.0], [82.7, 10213.0], [82.8, 10250.0], [82.9, 10291.0], [83.0, 10310.0], [83.1, 10371.0], [83.2, 10397.0], [83.3, 10430.0], [83.4, 10486.0], [83.5, 10545.0], [83.6, 10626.0], [83.7, 10650.0], [83.8, 10760.0], [83.9, 10832.0], [84.0, 10896.0], [84.1, 10958.0], [84.2, 10973.0], [84.3, 11030.0], [84.4, 11117.0], [84.5, 11208.0], [84.6, 11411.0], [84.7, 11492.0], [84.8, 11715.0], [84.9, 11798.0], [85.0, 11889.0], [85.1, 11969.0], [85.2, 12103.0], [85.3, 12300.0], [85.4, 12613.0], [85.5, 12785.0], [85.6, 13005.0], [85.7, 13274.0], [85.8, 13604.0], [85.9, 13772.0], [86.0, 13962.0], [86.1, 14372.0], [86.2, 14580.0], [86.3, 14757.0], [86.4, 14855.0], [86.5, 15124.0], [86.6, 15371.0], [86.7, 15549.0], [86.8, 15651.0], [86.9, 15734.0], [87.0, 15831.0], [87.1, 15923.0], [87.2, 15993.0], [87.3, 16064.0], [87.4, 16124.0], [87.5, 16199.0], [87.6, 16281.0], [87.7, 16328.0], [87.8, 16349.0], [87.9, 16382.0], [88.0, 16421.0], [88.1, 16458.0], [88.2, 16502.0], [88.3, 16567.0], [88.4, 16627.0], [88.5, 16684.0], [88.6, 16724.0], [88.7, 16753.0], [88.8, 16810.0], [88.9, 16849.0], [89.0, 16880.0], [89.1, 16918.0], [89.2, 16941.0], [89.3, 16978.0], [89.4, 16989.0], [89.5, 17026.0], [89.6, 17056.0], [89.7, 17091.0], [89.8, 17144.0], [89.9, 17227.0], [90.0, 17309.0], [90.1, 17426.0], [90.2, 17561.0], [90.3, 17674.0], [90.4, 17772.0], [90.5, 17883.0], [90.6, 18000.0], [90.7, 18064.0], [90.8, 18268.0], [90.9, 18402.0], [91.0, 18556.0], [91.1, 18679.0], [91.2, 18994.0], [91.3, 19211.0], [91.4, 19395.0], [91.5, 19503.0], [91.6, 19707.0], [91.7, 20056.0], [91.8, 20198.0], [91.9, 20487.0], [92.0, 20628.0], [92.1, 20806.0], [92.2, 21011.0], [92.3, 21138.0], [92.4, 21406.0], [92.5, 21626.0], [92.6, 21849.0], [92.7, 22053.0], [92.8, 22252.0], [92.9, 22462.0], [93.0, 22531.0], [93.1, 22628.0], [93.2, 22663.0], [93.3, 22758.0], [93.4, 22830.0], [93.5, 23034.0], [93.6, 23135.0], [93.7, 23174.0], [93.8, 23241.0], [93.9, 23292.0], [94.0, 23382.0], [94.1, 23430.0], [94.2, 23498.0], [94.3, 23552.0], [94.4, 23658.0], [94.5, 23821.0], [94.6, 23978.0], [94.7, 24323.0], [94.8, 24553.0], [94.9, 24876.0], [95.0, 25013.0], [95.1, 25716.0], [95.2, 25902.0], [95.3, 25903.0], [95.4, 25903.0], [95.5, 25904.0], [95.6, 25904.0], [95.7, 25904.0], [95.8, 25904.0], [95.9, 25905.0], [96.0, 25905.0], [96.1, 25905.0], [96.2, 25905.0], [96.3, 25905.0], [96.4, 25905.0], [96.5, 25905.0], [96.6, 25906.0], [96.7, 25906.0], [96.8, 25906.0], [96.9, 25906.0], [97.0, 25906.0], [97.1, 25906.0], [97.2, 25906.0], [97.3, 25906.0], [97.4, 25906.0], [97.5, 25907.0], [97.6, 25907.0], [97.7, 25907.0], [97.8, 25907.0], [97.9, 25907.0], [98.0, 25907.0], [98.1, 25907.0], [98.2, 25907.0], [98.3, 25908.0], [98.4, 25908.0], [98.5, 25908.0], [98.6, 25908.0], [98.7, 25909.0], [98.8, 25910.0], [98.9, 25911.0], [99.0, 25911.0], [99.1, 25983.0], [99.2, 26444.0], [99.3, 26728.0], [99.4, 27385.0], [99.5, 27966.0], [99.6, 28702.0], [99.7, 29721.0], [99.8, 31074.0], [99.9, 33149.0]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 238.0, "series": [{"data": [[0.0, 2.0], [100.0, 2.0], [200.0, 3.0], [300.0, 4.0], [400.0, 15.0], [500.0, 42.0], [600.0, 117.0], [700.0, 181.0], [800.0, 213.0], [900.0, 212.0], [1000.0, 219.0], [1100.0, 195.0], [1200.0, 202.0], [1300.0, 152.0], [1400.0, 142.0], [1500.0, 97.0], [1600.0, 73.0], [1700.0, 73.0], [1800.0, 69.0], [1900.0, 66.0], [2000.0, 54.0], [2100.0, 43.0], [2300.0, 39.0], [2200.0, 43.0], [2400.0, 36.0], [2500.0, 28.0], [2600.0, 24.0], [2800.0, 40.0], [2700.0, 22.0], [2900.0, 32.0], [3000.0, 33.0], [3100.0, 26.0], [3200.0, 29.0], [3300.0, 25.0], [3400.0, 28.0], [3500.0, 42.0], [3700.0, 32.0], [3600.0, 36.0], [3800.0, 43.0], [3900.0, 36.0], [4000.0, 43.0], [4200.0, 45.0], [4100.0, 47.0], [4300.0, 39.0], [4600.0, 66.0], [4400.0, 60.0], [4500.0, 43.0], [4700.0, 61.0], [4800.0, 53.0], [4900.0, 58.0], [5000.0, 53.0], [5100.0, 44.0], [5200.0, 44.0], [5300.0, 57.0], [5500.0, 55.0], [5400.0, 49.0], [5600.0, 43.0], [5800.0, 59.0], [5700.0, 41.0], [6000.0, 46.0], [5900.0, 40.0], [6100.0, 34.0], [6200.0, 56.0], [6300.0, 44.0], [6500.0, 48.0], [6600.0, 45.0], [6400.0, 39.0], [6800.0, 38.0], [6900.0, 31.0], [6700.0, 49.0], [7000.0, 45.0], [7100.0, 32.0], [7400.0, 32.0], [7200.0, 48.0], [7300.0, 25.0], [7600.0, 29.0], [7500.0, 29.0], [7700.0, 35.0], [7900.0, 21.0], [7800.0, 33.0], [8100.0, 18.0], [8000.0, 22.0], [8300.0, 36.0], [8700.0, 20.0], [8200.0, 25.0], [8500.0, 26.0], [8600.0, 19.0], [8400.0, 18.0], [8800.0, 25.0], [9200.0, 21.0], [9000.0, 17.0], [9100.0, 17.0], [8900.0, 20.0], [9300.0, 17.0], [9700.0, 12.0], [9600.0, 7.0], [9500.0, 17.0], [9400.0, 24.0], [10100.0, 17.0], [10000.0, 18.0], [9800.0, 12.0], [9900.0, 25.0], [10200.0, 14.0], [10400.0, 13.0], [10600.0, 14.0], [10300.0, 17.0], [10700.0, 4.0], [10500.0, 7.0], [10800.0, 10.0], [11000.0, 7.0], [10900.0, 16.0], [11200.0, 3.0], [11100.0, 6.0], [11300.0, 3.0], [11400.0, 7.0], [11600.0, 4.0], [11700.0, 7.0], [11500.0, 1.0], [12000.0, 4.0], [11800.0, 7.0], [11900.0, 6.0], [12100.0, 5.0], [12200.0, 1.0], [12600.0, 5.0], [12700.0, 3.0], [12400.0, 1.0], [12500.0, 2.0], [12300.0, 3.0], [13300.0, 2.0], [13100.0, 3.0], [13000.0, 2.0], [13200.0, 2.0], [12900.0, 2.0], [12800.0, 2.0], [13700.0, 3.0], [13800.0, 2.0], [13600.0, 6.0], [13400.0, 2.0], [14200.0, 1.0], [14300.0, 5.0], [14000.0, 2.0], [13900.0, 3.0], [14700.0, 7.0], [14400.0, 3.0], [14500.0, 1.0], [14800.0, 2.0], [14600.0, 3.0], [15200.0, 2.0], [15100.0, 2.0], [14900.0, 3.0], [15300.0, 4.0], [15000.0, 1.0], [15700.0, 6.0], [15600.0, 9.0], [15800.0, 7.0], [15500.0, 3.0], [15400.0, 4.0], [16200.0, 7.0], [16300.0, 20.0], [16000.0, 8.0], [16100.0, 9.0], [15900.0, 8.0], [17000.0, 21.0], [16600.0, 13.0], [17200.0, 8.0], [17400.0, 6.0], [16400.0, 14.0], [16800.0, 15.0], [18400.0, 3.0], [17600.0, 7.0], [18000.0, 8.0], [17800.0, 4.0], [18200.0, 5.0], [18600.0, 5.0], [19200.0, 4.0], [19400.0, 5.0], [18800.0, 4.0], [19000.0, 2.0], [19600.0, 3.0], [20000.0, 3.0], [20400.0, 6.0], [21400.0, 5.0], [21000.0, 4.0], [20800.0, 4.0], [20600.0, 3.0], [21200.0, 1.0], [21800.0, 2.0], [22200.0, 4.0], [22000.0, 5.0], [22400.0, 5.0], [21600.0, 3.0], [22600.0, 8.0], [23200.0, 10.0], [23400.0, 11.0], [23000.0, 4.0], [22800.0, 4.0], [23600.0, 6.0], [24400.0, 3.0], [24000.0, 1.0], [23800.0, 4.0], [24800.0, 3.0], [25400.0, 1.0], [25000.0, 5.0], [25200.0, 1.0], [24600.0, 2.0], [26000.0, 3.0], [26400.0, 2.0], [26200.0, 1.0], [26600.0, 2.0], [25800.0, 1.0], [27200.0, 2.0], [26800.0, 1.0], [27800.0, 3.0], [28000.0, 1.0], [29400.0, 3.0], [30800.0, 1.0], [31000.0, 1.0], [32600.0, 1.0], [35200.0, 1.0], [33100.0, 1.0], [16900.0, 22.0], [16700.0, 14.0], [16500.0, 9.0], [17100.0, 6.0], [17300.0, 4.0], [17900.0, 5.0], [18300.0, 3.0], [17500.0, 4.0], [17700.0, 6.0], [18100.0, 2.0], [19300.0, 4.0], [19100.0, 1.0], [18500.0, 5.0], [18900.0, 2.0], [18700.0, 1.0], [19700.0, 4.0], [19900.0, 2.0], [19500.0, 3.0], [20100.0, 4.0], [20300.0, 1.0], [20500.0, 4.0], [21100.0, 5.0], [20700.0, 3.0], [20900.0, 2.0], [21300.0, 2.0], [21500.0, 1.0], [22500.0, 9.0], [21700.0, 3.0], [21900.0, 1.0], [22300.0, 1.0], [22100.0, 3.0], [23100.0, 12.0], [23500.0, 8.0], [22900.0, 2.0], [22700.0, 9.0], [23300.0, 7.0], [23900.0, 3.0], [24300.0, 3.0], [24100.0, 3.0], [24500.0, 5.0], [23700.0, 3.0], [24900.0, 2.0], [25900.0, 238.0], [26100.0, 1.0], [25700.0, 2.0], [26500.0, 1.0], [26900.0, 1.0], [26700.0, 2.0], [27300.0, 2.0], [28300.0, 1.0], [28500.0, 2.0], [27900.0, 4.0], [29100.0, 1.0], [28700.0, 1.0], [29500.0, 1.0], [29700.0, 2.0], [30700.0, 1.0], [29900.0, 1.0], [30100.0, 1.0], [32500.0, 1.0], [32700.0, 1.0], [32300.0, 2.0], [34200.0, 1.0], [33800.0, 1.0], [33400.0, 1.0], [40200.0, 1.0]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 40200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4010.0, "series": [{"data": [[0.0, 11.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1665.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4010.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 314.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 56.14545454545453, "minX": 1.6461874E12, "maxY": 887.1608623548921, "series": [{"data": [[1.6461874E12, 79.06130268199239], [1.64618742E12, 68.64540337711077], [1.64618744E12, 116.68478260869551], [1.64618746E12, 324.2907216494846], [1.64618748E12, 545.9453781512607], [1.6461875E12, 887.1608623548921], [1.64618752E12, 56.14545454545453], [1.64618741E12, 57.10497237569062], [1.64618743E12, 69.02499999999999], [1.64618745E12, 244.8170478170478], [1.64618747E12, 411.69660678642714], [1.64618749E12, 753.2874493927121], [1.64618751E12, 377.43902439024396]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64618752E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 849.6666666666666, "minX": 2.0, "maxY": 34245.0, "series": [{"data": [[2.0, 20252.5], [3.0, 26592.0], [4.0, 20406.0], [6.0, 22180.0], [7.0, 26141.5], [10.0, 22056.0], [11.0, 19067.0], [14.0, 27485.666666666668], [17.0, 25763.333333333332], [20.0, 23899.0], [23.0, 20759.666666666668], [26.0, 21279.666666666668], [27.0, 29436.0], [30.0, 25384.666666666668], [31.0, 23553.0], [33.0, 27991.0], [32.0, 21565.0], [34.0, 29906.0], [37.0, 20110.333333333332], [38.0, 20691.0], [41.0, 21353.0], [45.0, 849.6666666666666], [44.0, 23914.666666666668], [47.0, 1125.4666666666667], [46.0, 9235.333333333332], [49.0, 2492.3529411764707], [48.0, 2398.086956521739], [51.0, 2375.1764705882356], [50.0, 2984.888888888889], [53.0, 1016.8750000000002], [52.0, 905.1999999999998], [55.0, 982.4827586206898], [54.0, 3005.142857142857], [57.0, 1857.4929577464786], [56.0, 1029.3387096774195], [58.0, 1069.157894736842], [59.0, 997.2641509433963], [61.0, 1166.7857142857144], [60.0, 1972.397727272728], [63.0, 2185.968253968254], [62.0, 1144.8000000000002], [65.0, 2030.0869565217388], [66.0, 1327.1609195402302], [67.0, 1610.0625], [64.0, 1083.523076923077], [70.0, 2835.4199999999996], [71.0, 1478.5964912280697], [69.0, 1225.2888888888888], [68.0, 1218.735849056604], [75.0, 1488.7333333333331], [73.0, 2987.833333333333], [72.0, 1383.3095238095239], [74.0, 1786.7796610169494], [77.0, 2345.081967213114], [79.0, 2077.857142857143], [78.0, 1882.8000000000002], [76.0, 1359.0833333333335], [81.0, 2166.3823529411766], [83.0, 2446.642857142858], [80.0, 1650.0888888888885], [82.0, 2211.0714285714284], [85.0, 1493.076923076923], [84.0, 1496.9714285714288], [86.0, 3054.7714285714287], [87.0, 2532.107142857143], [88.0, 2237.7073170731705], [90.0, 1576.6153846153848], [89.0, 2606.15], [91.0, 1487.454545454545], [94.0, 2004.7368421052631], [95.0, 9491.9], [93.0, 1893.5], [92.0, 3927.6400000000003], [97.0, 2858.4666666666662], [98.0, 2749.2307692307695], [99.0, 10706.5], [96.0, 6123.25], [103.0, 1278.0], [101.0, 7540.833333333332], [102.0, 21474.0], [105.0, 4292.142857142857], [104.0, 9714.5], [107.0, 1723.5], [106.0, 4064.333333333333], [108.0, 5732.111111111111], [109.0, 7669.333333333333], [111.0, 2254.6666666666665], [110.0, 13568.5], [114.0, 2852.730769230769], [112.0, 5742.75], [113.0, 4029.5714285714284], [115.0, 5293.25], [119.0, 3643.0], [118.0, 4980.6], [117.0, 4189.833333333334], [116.0, 2920.0], [120.0, 3588.0476190476184], [121.0, 1720.142857142857], [122.0, 1995.1999999999998], [123.0, 2441.3333333333335], [127.0, 2110.4285714285716], [126.0, 8734.0], [125.0, 6481.0], [124.0, 6119.0625], [128.0, 1548.25], [129.0, 7705.666666666667], [130.0, 9835.5], [132.0, 1002.0], [133.0, 1008.2], [131.0, 8820.0], [135.0, 5084.111111111111], [134.0, 21190.333333333332], [143.0, 1111.0], [142.0, 19411.0], [141.0, 25986.0], [138.0, 21435.0], [137.0, 19589.0], [136.0, 22859.0], [145.0, 1394.6666666666667], [144.0, 12954.75], [151.0, 13438.333333333334], [149.0, 25068.0], [148.0, 22193.25], [155.0, 3720.666666666667], [154.0, 16440.5], [158.0, 3952.1428571428573], [157.0, 4263.75], [156.0, 5499.0], [159.0, 2330.285714285714], [160.0, 1023.5], [161.0, 8328.777777777777], [164.0, 1733.5], [167.0, 6508.333333333333], [166.0, 7887.0], [165.0, 7332.6], [163.0, 7831.142857142857], [169.0, 2296.666666666667], [168.0, 2368.0], [171.0, 11608.5], [170.0, 9675.857142857143], [173.0, 16453.0], [172.0, 18609.0], [183.0, 16338.0], [181.0, 22666.0], [180.0, 15443.0], [179.0, 21981.5], [177.0, 18659.25], [187.0, 8122.5], [188.0, 14840.0], [190.0, 9054.0], [189.0, 23516.0], [186.0, 15549.0], [185.0, 15411.0], [184.0, 16306.0], [198.0, 3494.5], [199.0, 5639.75], [196.0, 8948.333333333334], [197.0, 7714.4], [195.0, 3761.6666666666665], [194.0, 4121.0], [193.0, 16485.333333333332], [201.0, 4642.583333333333], [202.0, 5579.571428571428], [206.0, 3952.461538461538], [207.0, 5715.181818181818], [204.0, 6503.142857142857], [203.0, 3304.777777777778], [200.0, 5435.0], [205.0, 5696.9375], [210.0, 3349.1428571428573], [211.0, 4257.333333333333], [209.0, 6063.909090909091], [208.0, 3296.1666666666665], [212.0, 6904.473684210527], [213.0, 8558.0], [214.0, 3080.8888888888887], [215.0, 3706.0], [217.0, 5081.166666666667], [222.0, 7687.666666666667], [220.0, 8729.25], [216.0, 12908.8], [219.0, 7599.0], [221.0, 13475.0], [223.0, 23241.0], [218.0, 15980.0], [224.0, 6641.8], [231.0, 15312.5], [230.0, 27036.5], [228.0, 19715.0], [227.0, 22331.0], [226.0, 33855.0], [225.0, 23233.0], [232.0, 8059.0], [233.0, 10447.333333333332], [237.0, 9758.5], [238.0, 8270.666666666666], [239.0, 34245.0], [236.0, 17964.333333333332], [241.0, 7988.4], [240.0, 6095.571428571428], [243.0, 14502.5], [244.0, 12819.0], [247.0, 22780.0], [246.0, 19571.0], [242.0, 14774.0], [250.0, 8248.166666666666], [251.0, 5982.0], [255.0, 6038.0], [252.0, 8543.6], [249.0, 3478.0], [254.0, 16124.0], [253.0, 22462.0], [248.0, 16376.0], [270.0, 10370.333333333334], [256.0, 16781.0], [257.0, 4715.75], [259.0, 11855.8], [269.0, 5329.666666666667], [268.0, 5893.5], [258.0, 5422.0], [261.0, 6367.142857142857], [260.0, 13922.0], [262.0, 9570.666666666668], [263.0, 7357.333333333333], [266.0, 9785.25], [267.0, 8459.6], [271.0, 6872.2], [265.0, 7947.25], [264.0, 7971.714285714286], [274.0, 5760.588235294118], [273.0, 4505.2], [272.0, 5640.166666666666], [276.0, 6024.076923076924], [277.0, 4600.333333333331], [275.0, 4888.137931034483], [284.0, 4921.846153846153], [280.0, 4061.090909090909], [285.0, 10464.111111111111], [286.0, 5677.7], [287.0, 4739.099999999999], [281.0, 5074.639999999999], [282.0, 6055.9], [283.0, 4304.0], [279.0, 5412.799999999999], [278.0, 4629.7], [290.0, 6135.2307692307695], [288.0, 6768.666666666667], [291.0, 4753.357142857143], [289.0, 7548.25], [293.0, 6630.818181818182], [294.0, 6855.625], [295.0, 9110.2], [292.0, 8949.75], [296.0, 9462.666666666666], [297.0, 10793.666666666666], [298.0, 7044.875], [299.0, 10187.0], [300.0, 9440.285714285714], [302.0, 8525.0], [301.0, 6344.0], [303.0, 9984.777777777777], [307.0, 7254.799999999999], [304.0, 7417.2307692307695], [311.0, 25907.0], [310.0, 20605.0], [305.0, 6976.0], [306.0, 6006.875], [317.0, 8016.0], [319.0, 4595.333333333333], [312.0, 17017.0], [318.0, 6524.5], [314.0, 9103.0], [313.0, 25910.0], [316.0, 21863.0], [321.0, 10228.214285714286], [322.0, 4862.333333333333], [320.0, 6143.25], [325.0, 5140.833333333333], [324.0, 8294.083333333332], [323.0, 4912.25], [326.0, 5707.000000000001], [327.0, 6063.0], [328.0, 8920.923076923076], [335.0, 7106.333333333333], [334.0, 6666.071428571428], [332.0, 7222.6], [333.0, 6952.818181818182], [329.0, 12027.0], [330.0, 11223.0], [331.0, 10448.0], [343.0, 13578.5], [339.0, 6296.636363636365], [348.0, 6608.0], [350.0, 23244.0], [349.0, 17784.5], [341.0, 6031.666666666667], [338.0, 5948.333333333333], [337.0, 6422.714285714285], [340.0, 8173.333333333333], [344.0, 5578.0], [347.0, 15614.8], [346.0, 4207.0], [342.0, 11573.666666666668], [336.0, 8356.857142857143], [366.0, 11397.666666666668], [355.0, 16807.5], [357.0, 12088.5], [356.0, 25906.0], [358.0, 25905.0], [352.0, 20890.5], [354.0, 25904.0], [353.0, 17227.0], [363.0, 10424.0], [362.0, 8009.142857142857], [367.0, 6664.666666666667], [364.0, 11481.666666666668], [365.0, 6507.75], [361.0, 12537.0], [360.0, 4282.0], [369.0, 9878.285714285714], [368.0, 14990.333333333332], [371.0, 7475.181818181819], [370.0, 8860.428571428572], [373.0, 8660.90909090909], [374.0, 9376.2], [375.0, 10717.2], [372.0, 4728.0], [382.0, 6230.6], [381.0, 8827.111111111111], [380.0, 7366.159999999999], [383.0, 6729.235294117648], [376.0, 6939.357142857143], [377.0, 8429.142857142857], [379.0, 7717.625], [378.0, 7193.666666666668], [385.0, 8582.5], [387.0, 6177.346153846155], [396.0, 12188.333333333332], [397.0, 7384.875], [399.0, 6274.0], [398.0, 9877.5], [386.0, 7401.090909090909], [384.0, 8630.25], [391.0, 7867.470588235294], [389.0, 9326.619047619048], [388.0, 7638.5], [390.0, 7409.214285714286], [394.0, 7060.750000000001], [395.0, 17677.14285714286], [393.0, 7703.25], [392.0, 6575.500000000001], [403.0, 11241.75], [401.0, 7317.25], [400.0, 7465.25], [407.0, 5731.0], [406.0, 6813.5], [404.0, 9070.333333333334], [405.0, 7867.714285714286], [402.0, 13903.857142857141], [413.0, 10759.5], [412.0, 7006.6], [415.0, 7688.777777777779], [409.0, 7495.8], [410.0, 16895.0], [408.0, 13523.8], [414.0, 8432.9], [417.0, 8211.384615384615], [416.0, 11376.6], [418.0, 10686.75], [420.0, 10971.666666666668], [421.0, 8652.0], [422.0, 11415.0], [423.0, 11640.333333333332], [419.0, 8099.285714285714], [431.0, 25906.0], [424.0, 25903.0], [427.0, 17008.0], [426.0, 26340.0], [430.0, 25907.0], [429.0, 20022.5], [446.0, 11912.5], [438.0, 15142.0], [437.0, 13398.333333333332], [436.0, 17691.0], [439.0, 16235.0], [432.0, 16578.0], [434.0, 25903.0], [433.0, 25907.0], [442.0, 13652.8], [441.0, 7157.0], [447.0, 9976.0], [445.0, 11170.333333333334], [435.0, 10694.0], [440.0, 16866.0], [461.0, 11080.000000000002], [451.0, 4773.0], [455.0, 13161.0], [450.0, 19445.5], [448.0, 10615.0], [454.0, 25907.0], [453.0, 16579.666666666668], [457.0, 6568.666666666667], [456.0, 14661.0], [460.0, 5903.2], [462.0, 7461.818181818182], [459.0, 13941.5], [458.0, 13874.5], [463.0, 11644.75], [464.0, 8768.461538461539], [470.0, 8756.272727272726], [468.0, 8188.941176470589], [471.0, 9030.166666666666], [469.0, 8967.555555555555], [467.0, 8743.083333333334], [476.0, 8817.714285714286], [465.0, 8797.4], [466.0, 10971.666666666666], [474.0, 7772.999999999999], [478.0, 12782.333333333334], [479.0, 14220.25], [472.0, 10019.833333333334], [473.0, 9246.333333333334], [475.0, 11572.6], [477.0, 8938.384615384615], [494.0, 12057.0], [481.0, 12375.5], [480.0, 9868.999999999998], [483.0, 12776.6], [482.0, 25906.0], [485.0, 8740.5], [487.0, 17168.75], [489.0, 14927.333333333332], [488.0, 16727.0], [490.0, 17290.0], [491.0, 17776.0], [495.0, 8821.333333333334], [497.0, 7716.666666666667], [499.0, 9638.666666666666], [498.0, 16012.0], [501.0, 12466.0], [500.0, 7258.0], [503.0, 6933.4], [504.0, 11900.333333333334], [502.0, 10160.2], [507.0, 8668.142857142857], [508.0, 9057.75], [509.0, 9352.0], [511.0, 9082.0], [505.0, 7911.599999999999], [506.0, 11151.5], [538.0, 9450.5625], [525.0, 14194.666666666668], [516.0, 9463.0], [519.0, 8500.5], [518.0, 11091.0], [517.0, 23181.0], [536.0, 9405.6], [537.0, 11006.2], [540.0, 9461.666666666668], [542.0, 9216.25], [541.0, 10510.0], [543.0, 11216.0], [529.0, 9517.166666666666], [528.0, 7076.6], [539.0, 7758.999999999999], [522.0, 8577.285714285714], [520.0, 10894.0], [521.0, 5769.0], [523.0, 10230.57142857143], [524.0, 9991.375], [526.0, 10526.8], [527.0, 12769.0], [515.0, 16498.0], [514.0, 18921.333333333332], [530.0, 11029.6], [534.0, 10050.29411764706], [532.0, 8372.666666666666], [533.0, 7481.8], [531.0, 10220.4], [535.0, 12165.25], [568.0, 8180.333333333333], [548.0, 4939.6], [546.0, 9237.0], [547.0, 16479.0], [551.0, 9183.5], [569.0, 9047.5], [570.0, 10928.5], [571.0, 8791.142857142857], [574.0, 7841.692307692308], [575.0, 9732.800000000001], [560.0, 16334.0], [573.0, 1967.0], [572.0, 5756.75], [550.0, 11925.0], [549.0, 8948.714285714286], [545.0, 10511.5], [544.0, 7703.0], [557.0, 7452.666666666667], [555.0, 14774.75], [558.0, 10034.0], [559.0, 16753.0], [561.0, 13202.333333333332], [563.0, 8139.6], [562.0, 16760.0], [564.0, 4767.0], [566.0, 7656.625], [567.0, 6511.2], [565.0, 9720.0], [580.0, 15574.333333333332], [578.0, 9059.25], [579.0, 6751.333333333334], [577.0, 10157.142857142857], [576.0, 16429.5], [582.0, 12055.666666666668], [581.0, 20510.0], [583.0, 25905.0], [602.0, 9767.25], [603.0, 4834.0], [606.0, 11118.0], [592.0, 15468.75], [605.0, 8771.333333333334], [601.0, 7958.0], [584.0, 15416.5], [586.0, 25905.0], [585.0, 25907.0], [588.0, 25909.0], [587.0, 25905.0], [593.0, 14943.5], [598.0, 8969.0], [599.0, 9381.428571428572], [597.0, 3771.75], [595.0, 16846.0], [594.0, 13252.0], [615.0, 10625.833333333332], [609.0, 7595.75], [611.0, 7735.666666666667], [610.0, 8569.333333333334], [612.0, 8477.0], [608.0, 9487.0], [613.0, 10785.75], [616.0, 8171.090909090908], [625.0, 4102.0], [627.0, 16331.0], [636.0, 10059.333333333334], [635.0, 25911.0], [638.0, 16028.0], [637.0, 25908.0], [639.0, 4679.0], [634.0, 8985.428571428572], [633.0, 11467.0], [632.0, 25229.0], [628.0, 17221.0], [631.0, 4038.0], [630.0, 7499.0], [629.0, 25906.0], [614.0, 7140.0], [619.0, 10890.0], [618.0, 8457.0], [617.0, 6327.0], [620.0, 7490.500000000001], [623.0, 14381.333333333334], [666.0, 8332.928571428572], [657.0, 8489.5], [641.0, 5000.333333333334], [644.0, 6534.5], [643.0, 13725.5], [647.0, 12946.8], [645.0, 26034.0], [664.0, 8622.5], [656.0, 6620.615384615385], [667.0, 8725.0], [669.0, 13388.5], [670.0, 25908.0], [665.0, 7105.5], [649.0, 7384.2], [648.0, 9206.571428571428], [653.0, 11435.0], [650.0, 9909.75], [651.0, 25905.0], [652.0, 24026.0], [654.0, 10089.70588235294], [655.0, 10356.0], [660.0, 10576.857142857143], [661.0, 10202.0], [659.0, 11486.0], [658.0, 12580.75], [662.0, 8820.0], [663.0, 8338.666666666666], [698.0, 7507.5], [690.0, 5626.0], [678.0, 7734.0], [677.0, 10671.5], [673.0, 17499.0], [672.0, 8528.5], [687.0, 7147.8], [685.0, 8241.2], [686.0, 7867.25], [683.0, 12680.5], [684.0, 14796.333333333334], [680.0, 9366.666666666666], [682.0, 6774.0], [691.0, 11480.571428571428], [692.0, 6533.615384615384], [694.0, 6109.666666666667], [693.0, 11534.25], [696.0, 7670.6], [689.0, 7842.166666666667], [688.0, 8270.857142857143], [697.0, 10933.0], [699.0, 8631.666666666666], [700.0, 16341.5], [703.0, 5092.0], [701.0, 6008.0], [695.0, 11022.363636363636], [711.0, 8245.5], [706.0, 2266.0], [705.0, 5870.0], [704.0, 15217.0], [719.0, 9809.0], [718.0, 12887.666666666666], [715.0, 11932.666666666668], [712.0, 25908.0], [708.0, 15619.0], [707.0, 13125.333333333332], [710.0, 6145.0], [709.0, 6122.0], [735.0, 8663.0], [720.0, 6562.0], [723.0, 22937.5], [721.0, 25906.0], [725.0, 25907.0], [724.0, 25903.0], [727.0, 12103.0], [726.0, 25906.0], [734.0, 6113.0], [732.0, 10639.0], [731.0, 25906.0], [730.0, 25908.0], [729.0, 6707.5], [766.0, 25901.0], [741.0, 16417.5], [738.0, 9095.0], [737.0, 25903.0], [736.0, 19293.0], [740.0, 6281.0], [739.0, 5225.0], [742.0, 5823.0], [743.0, 25906.0], [761.0, 15945.0], [760.0, 15263.5], [764.0, 14796.444444444443], [765.0, 25906.0], [767.0, 4880.0], [763.0, 25905.0], [746.0, 14144.5], [745.0, 25903.0], [744.0, 16712.0], [747.0, 25907.0], [748.0, 16470.5], [753.0, 7132.0], [752.0, 6930.2], [750.0, 5490.0], [749.0, 5081.0], [751.0, 4853.0], [754.0, 10623.5], [755.0, 15983.5], [756.0, 25907.0], [757.0, 5950.333333333333], [758.0, 22402.0], [759.0, 5086.0], [771.0, 13744.666666666668], [773.0, 12982.888888888887], [772.0, 4964.0], [774.0, 6813.0], [775.0, 6222.818181818182], [792.0, 11046.2], [793.0, 7379.714285714286], [796.0, 6557.25], [795.0, 25906.0], [797.0, 6557.0], [794.0, 6726.5], [784.0, 16301.5], [788.0, 9711.083333333332], [787.0, 4454.0], [789.0, 14957.0], [786.0, 8229.666666666666], [785.0, 9246.0], [791.0, 10369.857142857143], [790.0, 7213.75], [778.0, 10956.666666666666], [777.0, 7442.5], [776.0, 14746.666666666666], [779.0, 15300.5], [780.0, 5844.777777777777], [781.0, 10645.2], [783.0, 8933.4], [770.0, 25905.0], [769.0, 13735.333333333334], [782.0, 9598.25], [805.0, 7492.5], [800.0, 5028.75], [802.0, 4170.0], [801.0, 25905.0], [815.0, 11220.5], [813.0, 12511.0], [812.0, 4908.0], [806.0, 7795.75], [804.0, 9501.5], [803.0, 10701.666666666666], [808.0, 5421.0], [807.0, 11987.666666666668], [811.0, 4263.2], [827.0, 17317.5], [826.0, 5682.0], [825.0, 7435.0], [824.0, 8455.0], [829.0, 5535.0], [828.0, 5698.0], [831.0, 25906.0], [817.0, 25908.0], [816.0, 25906.0], [821.0, 16730.333333333332], [818.0, 12050.0], [823.0, 25907.0], [822.0, 25905.0], [830.0, 4914.0], [838.0, 16625.0], [847.0, 4960.4], [836.0, 18889.333333333332], [835.0, 5987.0], [834.0, 4070.0], [833.0, 4656.0], [832.0, 4751.0], [837.0, 7999.333333333333], [839.0, 5760.25], [856.0, 5648.6], [861.0, 7387.666666666667], [859.0, 15719.5], [860.0, 4157.0], [858.0, 3685.0], [857.0, 25907.0], [863.0, 5392.4], [862.0, 15476.5], [849.0, 5511.0], [850.0, 6538.25], [851.0, 6675.5], [852.0, 11019.375], [853.0, 10185.75], [854.0, 5966.0], [855.0, 10828.4], [848.0, 4937.0], [841.0, 5554.0], [840.0, 3763.0], [842.0, 25909.0], [843.0, 18589.5], [844.0, 15810.0], [846.0, 6079.0], [871.0, 5192.75], [865.0, 15973.5], [864.0, 10105.166666666666], [877.0, 6810.0], [878.0, 6088.5], [879.0, 15472.0], [870.0, 4858.666666666667], [869.0, 11442.5], [868.0, 7352.4285714285725], [867.0, 25909.0], [866.0, 25909.0], [880.0, 6921.5], [881.0, 5463.0], [883.0, 6603.0], [882.0, 17972.0], [885.0, 3505.0], [884.0, 5956.0], [887.0, 25911.0], [886.0, 25906.0], [893.0, 3912.0], [892.0, 17296.0], [891.0, 25912.0], [890.0, 18314.0], [895.0, 5918.333333333333], [889.0, 11666.333333333332], [888.0, 11896.0], [873.0, 7758.0], [872.0, 8783.0], [876.0, 10725.285714285714], [875.0, 10066.75], [901.0, 3917.0], [908.0, 19257.0], [899.0, 4855.0], [898.0, 16535.0], [897.0, 25904.0], [896.0, 25906.0], [902.0, 6067.0], [911.0, 20533.0], [910.0, 25905.0], [909.0, 13873.5], [907.0, 7416.857142857143], [906.0, 7472.666666666667], [903.0, 20515.5], [905.0, 11133.333333333334], [904.0, 14043.0], [915.0, 25906.5], [922.0, 11118.5], [923.0, 8086.0], [924.0, 10688.714285714286], [925.0, 9005.416666666666], [926.0, 11047.666666666666], [927.0, 11378.0], [914.0, 25904.0], [913.0, 6392.0], [916.0, 6786.5], [918.0, 6424.0], [917.0, 2298.0], [944.0, 13295.0], [933.0, 15062.5], [942.0, 8167.0], [941.0, 4017.0], [940.0, 7971.0], [939.0, 5379.0], [938.0, 5729.5], [936.0, 6659.0], [947.0, 10866.125], [946.0, 18849.0], [945.0, 10018.5], [959.0, 5839.333333333333], [957.0, 4614.0], [956.0, 5206.0], [954.0, 4761.0], [953.0, 17630.333333333332], [935.0, 11831.0], [943.0, 13154.0], [928.0, 3981.0], [932.0, 4177.0], [930.0, 4488.5], [948.0, 15969.5], [950.0, 13151.0], [949.0, 4646.0], [991.0, 9227.8], [986.0, 15471.5], [966.0, 25902.0], [965.0, 25904.0], [964.0, 5802.5], [962.0, 5380.5], [960.0, 4499.0], [975.0, 6908.333333333333], [972.0, 5243.0], [970.0, 4628.0], [969.0, 25905.0], [968.0, 6164.666666666667], [981.0, 16314.5], [980.0, 9080.0], [979.0, 17921.0], [978.0, 5651.0], [983.0, 5835.0], [982.0, 25907.0], [990.0, 5403.0], [989.0, 4179.5], [987.0, 25906.0], [985.0, 25907.0], [984.0, 25904.0], [997.0, 4896.0], [995.0, 5215.0], [992.0, 6717.5], [1007.0, 10760.0], [1006.0, 8330.0], [1005.0, 23656.0], [1004.0, 7112.0], [1003.0, 16787.0], [1002.0, 19326.0], [1001.0, 23292.0], [1000.0, 7358.5], [996.0, 4719.25], [994.0, 6216.0], [993.0, 6638.0], [999.0, 4000.0], [998.0, 11195.0], [1017.0, 9362.0], [1021.0, 25906.0], [1020.0, 25906.5], [1019.0, 4842.0], [1018.0, 25907.0], [1022.0, 16592.14285714286], [1023.0, 25904.0], [1009.0, 7945.545454545456], [1008.0, 18690.666666666668], [1011.0, 14161.142857142857], [1012.0, 12332.333333333332], [1013.0, 15051.333333333332], [1014.0, 25907.0], [1010.0, 12208.0], [1030.0, 25907.0], [1048.0, 18041.0], [1026.0, 9970.666666666666], [1028.0, 7453.5], [1032.0, 25907.0], [1054.0, 16733.0], [1036.0, 3701.0], [1034.0, 25907.0], [1038.0, 3957.0], [1056.0, 4148.0], [1066.0, 25908.5], [1062.0, 4863.0], [1060.0, 4150.0], [1058.0, 4842.75], [1042.0, 8733.5], [1046.0, 11753.25], [1052.0, 9694.75], [1031.0, 2206.0], [1055.0, 7382.5], [1025.0, 11954.333333333334], [1029.0, 1902.0], [1053.0, 5617.0], [1033.0, 8934.5], [1037.0, 8463.333333333334], [1039.0, 3944.0], [1059.0, 25904.0], [1043.0, 11822.0], [1047.0, 25905.0], [1051.0, 18690.5], [1049.0, 19730.0]], "isOverall": false, "label": "Plot and download", "isController": false}, {"data": [[338.900166666668, 6509.686666666668]], "isOverall": false, "label": "Plot and download-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1066.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1859.0, "minX": 1.6461874E12, "maxY": 55154.5, "series": [{"data": [[1.6461874E12, 10022.4], [1.64618742E12, 20467.2], [1.64618744E12, 17664.0], [1.64618746E12, 20839.0], [1.64618748E12, 21719.8], [1.6461875E12, 55154.5], [1.64618752E12, 4224.0], [1.64618741E12, 20851.2], [1.64618743E12, 19968.0], [1.64618745E12, 19799.4], [1.64618747E12, 21867.6], [1.64618749E12, 26133.9], [1.64618751E12, 39762.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6461874E12, 4410.9], [1.64618742E12, 9007.7], [1.64618744E12, 7774.0], [1.64618746E12, 8027.5], [1.64618748E12, 7774.0], [1.6461875E12, 7689.5], [1.64618752E12, 1859.0], [1.64618741E12, 9176.7], [1.64618743E12, 8788.0], [1.64618745E12, 8027.5], [1.64618747E12, 8264.1], [1.64618749E12, 7790.9], [1.64618751E12, 7503.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64618752E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1044.0497237569064, "minX": 1.6461874E12, "maxY": 22886.681818181805, "series": [{"data": [[1.6461874E12, 1517.7739463601536], [1.64618742E12, 1261.6435272045026], [1.64618744E12, 1922.4173913043476], [1.64618746E12, 5575.717525773202], [1.64618748E12, 7422.33403361345], [1.6461875E12, 12079.807628524042], [1.64618752E12, 22886.681818181805], [1.64618741E12, 1044.0497237569064], [1.64618743E12, 1244.0884615384632], [1.64618745E12, 4144.330561330561], [1.64618747E12, 6788.3373253493], [1.64618749E12, 8325.30769230768], [1.64618751E12, 19409.70544090056]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64618752E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1043.615101289134, "minX": 1.6461874E12, "maxY": 22886.59090909092, "series": [{"data": [[1.6461874E12, 1517.6360153256703], [1.64618742E12, 1261.5816135084417], [1.64618744E12, 1922.3739130434778], [1.64618746E12, 5547.857731958765], [1.64618748E12, 7363.491596638654], [1.6461875E12, 6258.225538971808], [1.64618752E12, 22886.59090909092], [1.64618741E12, 1043.615101289134], [1.64618743E12, 1244.0250000000012], [1.64618745E12, 4140.388773388774], [1.64618747E12, 6731.582834331337], [1.64618749E12, 7221.53238866397], [1.64618751E12, 15230.89868667918]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64618752E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.6461538461538469, "minX": 1.6461874E12, "maxY": 12227.442776735457, "series": [{"data": [[1.6461874E12, 4.498084291187735], [1.64618742E12, 0.7504690431519699], [1.64618744E12, 0.7282608695652185], [1.64618746E12, 2.2742268041237117], [1.64618748E12, 544.1092436974793], [1.6461875E12, 6956.328358208955], [1.64618752E12, 10181.918181818179], [1.64618741E12, 1.1804788213627977], [1.64618743E12, 0.6461538461538469], [1.64618745E12, 0.8253638253638261], [1.64618747E12, 192.99800399201615], [1.64618749E12, 1746.898785425103], [1.64618751E12, 12227.442776735457]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64618752E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 382.0, "minX": 1.6461874E12, "maxY": 40286.0, "series": [{"data": [[1.6461874E12, 3722.0], [1.64618742E12, 3680.0], [1.64618744E12, 6520.0], [1.64618746E12, 12687.0], [1.64618748E12, 15204.0], [1.6461875E12, 28342.0], [1.64618752E12, 33479.0], [1.64618741E12, 3484.0], [1.64618743E12, 3621.0], [1.64618745E12, 13377.0], [1.64618747E12, 12665.0], [1.64618749E12, 18679.0], [1.64618751E12, 40286.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6461874E12, 2570.6000000000004], [1.64618742E12, 1854.8000000000002], [1.64618744E12, 3456.7000000000007], [1.64618746E12, 8673.2], [1.64618748E12, 10668.0], [1.6461875E12, 17653.600000000002], [1.64618752E12, 29707.4], [1.64618741E12, 1559.6], [1.64618743E12, 1847.1000000000006], [1.64618745E12, 6451.600000000005], [1.64618747E12, 9496.0], [1.64618749E12, 12231.6], [1.64618751E12, 23952.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6461874E12, 3487.18], [1.64618742E12, 2573.9399999999996], [1.64618744E12, 5633.049999999996], [1.64618746E12, 10434.640000000001], [1.64618748E12, 13808.929999999998], [1.6461875E12, 24744.36], [1.64618752E12, 33403.98], [1.64618741E12, 2443.7999999999943], [1.64618743E12, 2943.8799999999974], [1.64618745E12, 9616.52000000001], [1.64618747E12, 11452.20000000001], [1.64618749E12, 17064.88], [1.64618751E12, 33537.30000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6461874E12, 2901.5], [1.64618742E12, 2081.1999999999994], [1.64618744E12, 4026.5999999999995], [1.64618746E12, 9506.4], [1.64618748E12, 11842.65], [1.6461875E12, 21416.0], [1.64618752E12, 31633.799999999985], [1.64618741E12, 1912.1999999999991], [1.64618743E12, 2181.2999999999997], [1.64618745E12, 7887.2], [1.64618747E12, 10163.0], [1.64618749E12, 14739.299999999996], [1.64618751E12, 26229.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6461874E12, 519.0], [1.64618742E12, 430.0], [1.64618744E12, 658.0], [1.64618746E12, 2194.0], [1.64618748E12, 3151.0], [1.6461875E12, 3292.0], [1.64618752E12, 17837.0], [1.64618741E12, 382.0], [1.64618743E12, 451.0], [1.64618745E12, 1134.0], [1.64618747E12, 3467.0], [1.64618749E12, 3471.0], [1.64618751E12, 7245.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6461874E12, 1355.0], [1.64618742E12, 1198.0], [1.64618744E12, 1565.5], [1.64618746E12, 5202.0], [1.64618748E12, 7203.0], [1.6461875E12, 5922.0], [1.64618752E12, 21519.5], [1.64618741E12, 946.0], [1.64618743E12, 1147.5], [1.64618745E12, 3840.0], [1.64618747E12, 6692.0], [1.64618749E12, 6775.0], [1.64618751E12, 17062.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64618752E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10.0, "minX": 4.0, "maxY": 25907.0, "series": [{"data": [[32.0, 6120.0], [35.0, 1214.0], [34.0, 8429.0], [36.0, 6619.5], [37.0, 6664.0], [39.0, 6673.0], [40.0, 2071.0], [41.0, 3599.0], [42.0, 5735.0], [45.0, 4352.5], [44.0, 2313.5], [47.0, 1869.0], [46.0, 4545.5], [49.0, 1341.0], [48.0, 4524.5], [50.0, 1288.5], [51.0, 1896.5], [52.0, 1562.0], [53.0, 2549.5], [55.0, 1372.0], [54.0, 1340.0], [56.0, 6373.0], [57.0, 1875.0], [59.0, 1540.0], [58.0, 2390.5], [60.0, 977.5], [61.0, 3008.0], [63.0, 1368.0], [62.0, 6205.5], [4.0, 1153.0], [67.0, 1238.0], [65.0, 3621.0], [64.0, 9438.0], [66.0, 7008.0], [68.0, 7177.0], [72.0, 8910.0], [74.0, 4842.5], [78.0, 4964.0], [80.0, 5641.0], [86.0, 5860.0], [11.0, 4898.5], [18.0, 20347.0], [20.0, 23922.5], [26.0, 3560.0], [27.0, 5770.0], [28.0, 3932.0], [29.0, 1400.0], [31.0, 9199.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 25903.0], [34.0, 1966.0], [36.0, 1965.0], [37.0, 2679.0], [39.0, 25906.0], [41.0, 1548.0], [40.0, 4804.0], [42.0, 25906.0], [45.0, 2305.5], [46.0, 1696.5], [47.0, 25906.0], [48.0, 3387.0], [49.0, 25905.0], [50.0, 3072.0], [51.0, 1086.0], [53.0, 25905.0], [52.0, 25904.5], [55.0, 1243.0], [54.0, 25906.0], [56.0, 25904.0], [57.0, 25907.0], [59.0, 1052.0], [58.0, 25906.0], [61.0, 25905.0], [62.0, 1586.0], [63.0, 2020.0], [64.0, 25905.0], [65.0, 1216.0], [66.0, 25906.0], [68.0, 2020.0], [72.0, 25906.0], [74.0, 297.5], [78.0, 25906.0], [80.0, 25907.0], [86.0, 25905.0], [11.0, 983.0], [26.0, 10.0], [27.0, 627.0], [28.0, 470.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 23922.5, "series": [{"data": [[32.0, 6120.0], [35.0, 1213.0], [34.0, 8429.0], [36.0, 6619.5], [37.0, 6664.0], [39.0, 6673.0], [40.0, 2071.0], [41.0, 3599.0], [42.0, 5735.0], [45.0, 4352.5], [44.0, 2313.5], [47.0, 1869.0], [46.0, 4545.5], [49.0, 1341.0], [48.0, 4524.5], [50.0, 1288.5], [51.0, 1896.5], [52.0, 1562.0], [53.0, 2549.5], [55.0, 1372.0], [54.0, 1340.0], [56.0, 6373.0], [57.0, 1875.0], [59.0, 1540.0], [58.0, 2390.5], [60.0, 977.5], [61.0, 3008.0], [63.0, 1368.0], [62.0, 6205.5], [4.0, 1153.0], [67.0, 1237.0], [65.0, 3621.0], [64.0, 9438.0], [66.0, 7008.0], [68.0, 7177.0], [72.0, 8910.0], [74.0, 4842.5], [78.0, 4964.0], [80.0, 5641.0], [86.0, 5860.0], [11.0, 4898.5], [18.0, 20346.5], [20.0, 23922.5], [26.0, 3560.0], [27.0, 5770.0], [28.0, 3932.0], [29.0, 1400.0], [31.0, 9199.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[32.0, 0.0], [34.0, 0.0], [36.0, 0.0], [37.0, 0.0], [39.0, 0.0], [41.0, 0.0], [40.0, 0.0], [42.0, 0.0], [45.0, 0.0], [46.0, 0.0], [47.0, 0.0], [48.0, 0.0], [49.0, 0.0], [50.0, 0.0], [51.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [54.0, 0.0], [56.0, 0.0], [57.0, 0.0], [59.0, 0.0], [58.0, 0.0], [61.0, 0.0], [62.0, 0.0], [63.0, 0.0], [64.0, 0.0], [65.0, 0.0], [66.0, 0.0], [68.0, 0.0], [72.0, 0.0], [74.0, 0.0], [78.0, 0.0], [80.0, 0.0], [86.0, 0.0], [11.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 86.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 32.8, "minX": 1.6461874E12, "maxY": 71.6, "series": [{"data": [[1.64618741E12, 53.4], [1.6461874E12, 32.8], [1.64618743E12, 54.2], [1.64618742E12, 53.9], [1.64618745E12, 57.2], [1.64618744E12, 56.4], [1.64618747E12, 60.7], [1.64618746E12, 57.9], [1.64618749E12, 71.6], [1.64618748E12, 64.6], [1.6461875E12, 37.3]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6461875E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.6461874E12, "maxY": 54.3, "series": [{"data": [[1.6461874E12, 26.1], [1.64618742E12, 53.3], [1.64618744E12, 46.0], [1.64618746E12, 47.5], [1.64618748E12, 46.0], [1.6461875E12, 45.5], [1.64618752E12, 11.0], [1.64618741E12, 54.3], [1.64618743E12, 52.0], [1.64618745E12, 47.5], [1.64618747E12, 48.9], [1.64618749E12, 46.1], [1.64618751E12, 44.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64618749E12, 2.0], [1.64618751E12, 8.2], [1.6461875E12, 13.3]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.64618745E12, 0.6], [1.64618747E12, 1.2], [1.64618746E12, 1.0], [1.64618749E12, 1.3], [1.64618748E12, 1.6], [1.64618751E12, 0.7], [1.6461875E12, 1.5]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64618752E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.6461874E12, "maxY": 54.3, "series": [{"data": [[1.64618745E12, 0.6], [1.64618747E12, 1.2], [1.64618746E12, 1.0], [1.64618749E12, 3.3], [1.64618748E12, 1.6], [1.64618751E12, 8.9], [1.6461875E12, 14.8]], "isOverall": false, "label": "Plot and download-failure", "isController": false}, {"data": [[1.6461874E12, 26.1], [1.64618742E12, 53.3], [1.64618744E12, 46.0], [1.64618746E12, 47.5], [1.64618748E12, 46.0], [1.6461875E12, 45.5], [1.64618752E12, 11.0], [1.64618741E12, 54.3], [1.64618743E12, 52.0], [1.64618745E12, 47.5], [1.64618747E12, 48.9], [1.64618749E12, 46.1], [1.64618751E12, 44.4]], "isOverall": false, "label": "Plot and download-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64618752E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6, "minX": 1.6461874E12, "maxY": 54.3, "series": [{"data": [[1.6461874E12, 26.1], [1.64618742E12, 53.3], [1.64618744E12, 46.0], [1.64618746E12, 47.5], [1.64618748E12, 46.0], [1.6461875E12, 45.5], [1.64618752E12, 11.0], [1.64618741E12, 54.3], [1.64618743E12, 52.0], [1.64618745E12, 47.5], [1.64618747E12, 48.9], [1.64618749E12, 46.1], [1.64618751E12, 44.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64618745E12, 0.6], [1.64618747E12, 1.2], [1.64618746E12, 1.0], [1.64618749E12, 3.3], [1.64618748E12, 1.6], [1.64618751E12, 8.9], [1.6461875E12, 14.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64618752E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

