/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 39867.0, "series": [{"data": [[0.0, 1.0], [0.1, 102.0], [0.2, 202.0], [0.3, 303.0], [0.4, 509.0], [0.5, 822.0], [0.6, 1131.0], [0.7, 1245.0], [0.8, 1363.0], [0.9, 1482.0], [1.0, 1504.0], [1.1, 1563.0], [1.2, 1650.0], [1.3, 1709.0], [1.4, 1777.0], [1.5, 1851.0], [1.6, 1876.0], [1.7, 1904.0], [1.8, 1981.0], [1.9, 2028.0], [2.0, 2085.0], [2.1, 2133.0], [2.2, 2195.0], [2.3, 2234.0], [2.4, 2271.0], [2.5, 2297.0], [2.6, 2340.0], [2.7, 2400.0], [2.8, 2438.0], [2.9, 2485.0], [3.0, 2517.0], [3.1, 2556.0], [3.2, 2567.0], [3.3, 2598.0], [3.4, 2664.0], [3.5, 2689.0], [3.6, 2727.0], [3.7, 2755.0], [3.8, 2822.0], [3.9, 2871.0], [4.0, 2893.0], [4.1, 2914.0], [4.2, 2946.0], [4.3, 2970.0], [4.4, 3003.0], [4.5, 3018.0], [4.6, 3030.0], [4.7, 3057.0], [4.8, 3073.0], [4.9, 3085.0], [5.0, 3129.0], [5.1, 3144.0], [5.2, 3177.0], [5.3, 3194.0], [5.4, 3228.0], [5.5, 3244.0], [5.6, 3257.0], [5.7, 3279.0], [5.8, 3292.0], [5.9, 3320.0], [6.0, 3333.0], [6.1, 3364.0], [6.2, 3394.0], [6.3, 3430.0], [6.4, 3457.0], [6.5, 3487.0], [6.6, 3504.0], [6.7, 3522.0], [6.8, 3556.0], [6.9, 3570.0], [7.0, 3619.0], [7.1, 3636.0], [7.2, 3664.0], [7.3, 3676.0], [7.4, 3688.0], [7.5, 3717.0], [7.6, 3748.0], [7.7, 3785.0], [7.8, 3806.0], [7.9, 3841.0], [8.0, 3868.0], [8.1, 3884.0], [8.2, 3911.0], [8.3, 3948.0], [8.4, 3982.0], [8.5, 3995.0], [8.6, 4011.0], [8.7, 4024.0], [8.8, 4047.0], [8.9, 4072.0], [9.0, 4093.0], [9.1, 4108.0], [9.2, 4125.0], [9.3, 4142.0], [9.4, 4163.0], [9.5, 4178.0], [9.6, 4208.0], [9.7, 4230.0], [9.8, 4247.0], [9.9, 4261.0], [10.0, 4269.0], [10.1, 4281.0], [10.2, 4289.0], [10.3, 4310.0], [10.4, 4325.0], [10.5, 4339.0], [10.6, 4351.0], [10.7, 4372.0], [10.8, 4387.0], [10.9, 4401.0], [11.0, 4409.0], [11.1, 4418.0], [11.2, 4434.0], [11.3, 4445.0], [11.4, 4464.0], [11.5, 4477.0], [11.6, 4489.0], [11.7, 4499.0], [11.8, 4515.0], [11.9, 4529.0], [12.0, 4547.0], [12.1, 4555.0], [12.2, 4565.0], [12.3, 4576.0], [12.4, 4583.0], [12.5, 4594.0], [12.6, 4614.0], [12.7, 4618.0], [12.8, 4624.0], [12.9, 4638.0], [13.0, 4650.0], [13.1, 4658.0], [13.2, 4667.0], [13.3, 4673.0], [13.4, 4679.0], [13.5, 4692.0], [13.6, 4699.0], [13.7, 4708.0], [13.8, 4713.0], [13.9, 4723.0], [14.0, 4731.0], [14.1, 4746.0], [14.2, 4751.0], [14.3, 4755.0], [14.4, 4762.0], [14.5, 4779.0], [14.6, 4792.0], [14.7, 4797.0], [14.8, 4815.0], [14.9, 4823.0], [15.0, 4834.0], [15.1, 4842.0], [15.2, 4851.0], [15.3, 4860.0], [15.4, 4869.0], [15.5, 4880.0], [15.6, 4892.0], [15.7, 4896.0], [15.8, 4905.0], [15.9, 4911.0], [16.0, 4923.0], [16.1, 4930.0], [16.2, 4940.0], [16.3, 4949.0], [16.4, 4956.0], [16.5, 4965.0], [16.6, 4967.0], [16.7, 4971.0], [16.8, 4979.0], [16.9, 4990.0], [17.0, 5004.0], [17.1, 5012.0], [17.2, 5021.0], [17.3, 5028.0], [17.4, 5034.0], [17.5, 5038.0], [17.6, 5045.0], [17.7, 5061.0], [17.8, 5065.0], [17.9, 5079.0], [18.0, 5083.0], [18.1, 5093.0], [18.2, 5102.0], [18.3, 5113.0], [18.4, 5120.0], [18.5, 5127.0], [18.6, 5132.0], [18.7, 5138.0], [18.8, 5147.0], [18.9, 5158.0], [19.0, 5166.0], [19.1, 5172.0], [19.2, 5177.0], [19.3, 5182.0], [19.4, 5192.0], [19.5, 5202.0], [19.6, 5205.0], [19.7, 5209.0], [19.8, 5219.0], [19.9, 5232.0], [20.0, 5235.0], [20.1, 5246.0], [20.2, 5255.0], [20.3, 5264.0], [20.4, 5269.0], [20.5, 5275.0], [20.6, 5277.0], [20.7, 5283.0], [20.8, 5291.0], [20.9, 5304.0], [21.0, 5311.0], [21.1, 5319.0], [21.2, 5326.0], [21.3, 5330.0], [21.4, 5337.0], [21.5, 5342.0], [21.6, 5346.0], [21.7, 5354.0], [21.8, 5364.0], [21.9, 5375.0], [22.0, 5384.0], [22.1, 5388.0], [22.2, 5400.0], [22.3, 5413.0], [22.4, 5419.0], [22.5, 5426.0], [22.6, 5432.0], [22.7, 5440.0], [22.8, 5450.0], [22.9, 5457.0], [23.0, 5461.0], [23.1, 5471.0], [23.2, 5479.0], [23.3, 5491.0], [23.4, 5502.0], [23.5, 5511.0], [23.6, 5518.0], [23.7, 5526.0], [23.8, 5531.0], [23.9, 5540.0], [24.0, 5544.0], [24.1, 5556.0], [24.2, 5566.0], [24.3, 5576.0], [24.4, 5590.0], [24.5, 5602.0], [24.6, 5607.0], [24.7, 5616.0], [24.8, 5623.0], [24.9, 5634.0], [25.0, 5640.0], [25.1, 5651.0], [25.2, 5663.0], [25.3, 5669.0], [25.4, 5678.0], [25.5, 5689.0], [25.6, 5698.0], [25.7, 5703.0], [25.8, 5720.0], [25.9, 5731.0], [26.0, 5737.0], [26.1, 5746.0], [26.2, 5759.0], [26.3, 5776.0], [26.4, 5786.0], [26.5, 5801.0], [26.6, 5805.0], [26.7, 5814.0], [26.8, 5836.0], [26.9, 5841.0], [27.0, 5848.0], [27.1, 5859.0], [27.2, 5867.0], [27.3, 5870.0], [27.4, 5888.0], [27.5, 5898.0], [27.6, 5917.0], [27.7, 5921.0], [27.8, 5934.0], [27.9, 5948.0], [28.0, 5956.0], [28.1, 5967.0], [28.2, 5975.0], [28.3, 5985.0], [28.4, 5992.0], [28.5, 6002.0], [28.6, 6009.0], [28.7, 6017.0], [28.8, 6025.0], [28.9, 6039.0], [29.0, 6046.0], [29.1, 6066.0], [29.2, 6079.0], [29.3, 6085.0], [29.4, 6098.0], [29.5, 6107.0], [29.6, 6120.0], [29.7, 6130.0], [29.8, 6148.0], [29.9, 6155.0], [30.0, 6160.0], [30.1, 6168.0], [30.2, 6193.0], [30.3, 6213.0], [30.4, 6222.0], [30.5, 6236.0], [30.6, 6243.0], [30.7, 6266.0], [30.8, 6280.0], [30.9, 6295.0], [31.0, 6309.0], [31.1, 6323.0], [31.2, 6335.0], [31.3, 6341.0], [31.4, 6354.0], [31.5, 6362.0], [31.6, 6377.0], [31.7, 6393.0], [31.8, 6410.0], [31.9, 6417.0], [32.0, 6434.0], [32.1, 6437.0], [32.2, 6446.0], [32.3, 6456.0], [32.4, 6473.0], [32.5, 6481.0], [32.6, 6490.0], [32.7, 6505.0], [32.8, 6519.0], [32.9, 6530.0], [33.0, 6543.0], [33.1, 6551.0], [33.2, 6569.0], [33.3, 6584.0], [33.4, 6605.0], [33.5, 6627.0], [33.6, 6639.0], [33.7, 6647.0], [33.8, 6657.0], [33.9, 6676.0], [34.0, 6696.0], [34.1, 6712.0], [34.2, 6721.0], [34.3, 6727.0], [34.4, 6737.0], [34.5, 6744.0], [34.6, 6750.0], [34.7, 6767.0], [34.8, 6771.0], [34.9, 6787.0], [35.0, 6813.0], [35.1, 6827.0], [35.2, 6843.0], [35.3, 6857.0], [35.4, 6868.0], [35.5, 6881.0], [35.6, 6888.0], [35.7, 6898.0], [35.8, 6910.0], [35.9, 6930.0], [36.0, 6950.0], [36.1, 6968.0], [36.2, 6977.0], [36.3, 6999.0], [36.4, 7017.0], [36.5, 7026.0], [36.6, 7028.0], [36.7, 7037.0], [36.8, 7048.0], [36.9, 7063.0], [37.0, 7086.0], [37.1, 7091.0], [37.2, 7120.0], [37.3, 7131.0], [37.4, 7150.0], [37.5, 7171.0], [37.6, 7197.0], [37.7, 7208.0], [37.8, 7217.0], [37.9, 7224.0], [38.0, 7234.0], [38.1, 7248.0], [38.2, 7266.0], [38.3, 7294.0], [38.4, 7319.0], [38.5, 7352.0], [38.6, 7361.0], [38.7, 7382.0], [38.8, 7395.0], [38.9, 7411.0], [39.0, 7435.0], [39.1, 7456.0], [39.2, 7492.0], [39.3, 7511.0], [39.4, 7534.0], [39.5, 7555.0], [39.6, 7583.0], [39.7, 7602.0], [39.8, 7629.0], [39.9, 7645.0], [40.0, 7665.0], [40.1, 7679.0], [40.2, 7699.0], [40.3, 7707.0], [40.4, 7735.0], [40.5, 7748.0], [40.6, 7769.0], [40.7, 7780.0], [40.8, 7795.0], [40.9, 7832.0], [41.0, 7860.0], [41.1, 7875.0], [41.2, 7901.0], [41.3, 7929.0], [41.4, 7944.0], [41.5, 7960.0], [41.6, 7981.0], [41.7, 8005.0], [41.8, 8025.0], [41.9, 8039.0], [42.0, 8060.0], [42.1, 8087.0], [42.2, 8106.0], [42.3, 8122.0], [42.4, 8148.0], [42.5, 8175.0], [42.6, 8201.0], [42.7, 8238.0], [42.8, 8249.0], [42.9, 8273.0], [43.0, 8280.0], [43.1, 8292.0], [43.2, 8304.0], [43.3, 8332.0], [43.4, 8357.0], [43.5, 8377.0], [43.6, 8387.0], [43.7, 8401.0], [43.8, 8430.0], [43.9, 8434.0], [44.0, 8447.0], [44.1, 8468.0], [44.2, 8498.0], [44.3, 8512.0], [44.4, 8545.0], [44.5, 8552.0], [44.6, 8573.0], [44.7, 8593.0], [44.8, 8611.0], [44.9, 8639.0], [45.0, 8669.0], [45.1, 8687.0], [45.2, 8710.0], [45.3, 8728.0], [45.4, 8764.0], [45.5, 8800.0], [45.6, 8812.0], [45.7, 8870.0], [45.8, 8906.0], [45.9, 8923.0], [46.0, 8960.0], [46.1, 8990.0], [46.2, 9020.0], [46.3, 9065.0], [46.4, 9119.0], [46.5, 9165.0], [46.6, 9221.0], [46.7, 9252.0], [46.8, 9280.0], [46.9, 9307.0], [47.0, 9356.0], [47.1, 9419.0], [47.2, 9449.0], [47.3, 9460.0], [47.4, 9503.0], [47.5, 9530.0], [47.6, 9555.0], [47.7, 9641.0], [47.8, 9691.0], [47.9, 9724.0], [48.0, 9734.0], [48.1, 9766.0], [48.2, 9824.0], [48.3, 9843.0], [48.4, 9889.0], [48.5, 9925.0], [48.6, 9949.0], [48.7, 10013.0], [48.8, 10064.0], [48.9, 10105.0], [49.0, 10135.0], [49.1, 10177.0], [49.2, 10215.0], [49.3, 10266.0], [49.4, 10335.0], [49.5, 10384.0], [49.6, 10436.0], [49.7, 10463.0], [49.8, 10511.0], [49.9, 10544.0], [50.0, 10591.0], [50.1, 10621.0], [50.2, 10668.0], [50.3, 10700.0], [50.4, 10722.0], [50.5, 10773.0], [50.6, 10830.0], [50.7, 10907.0], [50.8, 10953.0], [50.9, 10984.0], [51.0, 11018.0], [51.1, 11061.0], [51.2, 11092.0], [51.3, 11133.0], [51.4, 11199.0], [51.5, 11256.0], [51.6, 11344.0], [51.7, 11361.0], [51.8, 11389.0], [51.9, 11433.0], [52.0, 11466.0], [52.1, 11500.0], [52.2, 11530.0], [52.3, 11570.0], [52.4, 11607.0], [52.5, 11633.0], [52.6, 11665.0], [52.7, 11695.0], [52.8, 11761.0], [52.9, 11774.0], [53.0, 11830.0], [53.1, 11894.0], [53.2, 11909.0], [53.3, 11938.0], [53.4, 11974.0], [53.5, 12019.0], [53.6, 12036.0], [53.7, 12071.0], [53.8, 12090.0], [53.9, 12164.0], [54.0, 12223.0], [54.1, 12249.0], [54.2, 12302.0], [54.3, 12338.0], [54.4, 12395.0], [54.5, 12443.0], [54.6, 12467.0], [54.7, 12522.0], [54.8, 12580.0], [54.9, 12632.0], [55.0, 12701.0], [55.1, 12761.0], [55.2, 12805.0], [55.3, 12899.0], [55.4, 12968.0], [55.5, 13046.0], [55.6, 13123.0], [55.7, 13189.0], [55.8, 13391.0], [55.9, 13586.0], [56.0, 13666.0], [56.1, 13780.0], [56.2, 13891.0], [56.3, 14053.0], [56.4, 14169.0], [56.5, 14209.0], [56.6, 14333.0], [56.7, 14416.0], [56.8, 14508.0], [56.9, 14714.0], [57.0, 14770.0], [57.1, 14922.0], [57.2, 15105.0], [57.3, 15186.0], [57.4, 15330.0], [57.5, 15493.0], [57.6, 15572.0], [57.7, 15687.0], [57.8, 15819.0], [57.9, 15885.0], [58.0, 15916.0], [58.1, 16032.0], [58.2, 16188.0], [58.3, 16260.0], [58.4, 16349.0], [58.5, 16432.0], [58.6, 16580.0], [58.7, 16715.0], [58.8, 16783.0], [58.9, 16835.0], [59.0, 16878.0], [59.1, 16905.0], [59.2, 16957.0], [59.3, 16990.0], [59.4, 17010.0], [59.5, 17033.0], [59.6, 17075.0], [59.7, 17122.0], [59.8, 17204.0], [59.9, 17285.0], [60.0, 17316.0], [60.1, 17375.0], [60.2, 17425.0], [60.3, 17483.0], [60.4, 17515.0], [60.5, 17532.0], [60.6, 17576.0], [60.7, 17613.0], [60.8, 17659.0], [60.9, 17691.0], [61.0, 17730.0], [61.1, 17761.0], [61.2, 17778.0], [61.3, 17800.0], [61.4, 17818.0], [61.5, 17836.0], [61.6, 17887.0], [61.7, 17900.0], [61.8, 17928.0], [61.9, 17953.0], [62.0, 18005.0], [62.1, 18045.0], [62.2, 18060.0], [62.3, 18121.0], [62.4, 18155.0], [62.5, 18183.0], [62.6, 18217.0], [62.7, 18251.0], [62.8, 18285.0], [62.9, 18321.0], [63.0, 18346.0], [63.1, 18384.0], [63.2, 18421.0], [63.3, 18438.0], [63.4, 18464.0], [63.5, 18523.0], [63.6, 18532.0], [63.7, 18565.0], [63.8, 18601.0], [63.9, 18634.0], [64.0, 18649.0], [64.1, 18671.0], [64.2, 18695.0], [64.3, 18739.0], [64.4, 18801.0], [64.5, 18823.0], [64.6, 18882.0], [64.7, 18921.0], [64.8, 18968.0], [64.9, 18993.0], [65.0, 19029.0], [65.1, 19079.0], [65.2, 19145.0], [65.3, 19179.0], [65.4, 19199.0], [65.5, 19230.0], [65.6, 19276.0], [65.7, 19329.0], [65.8, 19358.0], [65.9, 19392.0], [66.0, 19425.0], [66.1, 19490.0], [66.2, 19511.0], [66.3, 19542.0], [66.4, 19599.0], [66.5, 19632.0], [66.6, 19677.0], [66.7, 19712.0], [66.8, 19776.0], [66.9, 19807.0], [67.0, 19831.0], [67.1, 19854.0], [67.2, 19877.0], [67.3, 19910.0], [67.4, 19960.0], [67.5, 19992.0], [67.6, 20028.0], [67.7, 20052.0], [67.8, 20097.0], [67.9, 20141.0], [68.0, 20197.0], [68.1, 20233.0], [68.2, 20258.0], [68.3, 20317.0], [68.4, 20347.0], [68.5, 20418.0], [68.6, 20475.0], [68.7, 20496.0], [68.8, 20545.0], [68.9, 20584.0], [69.0, 20623.0], [69.1, 20692.0], [69.2, 20750.0], [69.3, 20778.0], [69.4, 20824.0], [69.5, 20857.0], [69.6, 20911.0], [69.7, 20940.0], [69.8, 20973.0], [69.9, 21029.0], [70.0, 21054.0], [70.1, 21081.0], [70.2, 21114.0], [70.3, 21150.0], [70.4, 21194.0], [70.5, 21224.0], [70.6, 21243.0], [70.7, 21261.0], [70.8, 21305.0], [70.9, 21355.0], [71.0, 21380.0], [71.1, 21428.0], [71.2, 21456.0], [71.3, 21501.0], [71.4, 21547.0], [71.5, 21616.0], [71.6, 21698.0], [71.7, 21787.0], [71.8, 21830.0], [71.9, 21876.0], [72.0, 21937.0], [72.1, 22021.0], [72.2, 22081.0], [72.3, 22155.0], [72.4, 22224.0], [72.5, 22284.0], [72.6, 22331.0], [72.7, 22384.0], [72.8, 22460.0], [72.9, 22507.0], [73.0, 22607.0], [73.1, 22690.0], [73.2, 22748.0], [73.3, 22764.0], [73.4, 22825.0], [73.5, 22953.0], [73.6, 23094.0], [73.7, 23176.0], [73.8, 23195.0], [73.9, 23315.0], [74.0, 23463.0], [74.1, 23590.0], [74.2, 23670.0], [74.3, 23808.0], [74.4, 23910.0], [74.5, 24045.0], [74.6, 24130.0], [74.7, 24218.0], [74.8, 24277.0], [74.9, 24348.0], [75.0, 24391.0], [75.1, 24466.0], [75.2, 24530.0], [75.3, 24549.0], [75.4, 24589.0], [75.5, 24633.0], [75.6, 24684.0], [75.7, 24735.0], [75.8, 24898.0], [75.9, 24979.0], [76.0, 25151.0], [76.1, 25249.0], [76.2, 25324.0], [76.3, 25492.0], [76.4, 25611.0], [76.5, 25742.0], [76.6, 25900.0], [76.7, 25901.0], [76.8, 25901.0], [76.9, 25902.0], [77.0, 25902.0], [77.1, 25902.0], [77.2, 25902.0], [77.3, 25902.0], [77.4, 25902.0], [77.5, 25902.0], [77.6, 25902.0], [77.7, 25903.0], [77.8, 25903.0], [77.9, 25903.0], [78.0, 25903.0], [78.1, 25903.0], [78.2, 25903.0], [78.3, 25903.0], [78.4, 25903.0], [78.5, 25903.0], [78.6, 25903.0], [78.7, 25903.0], [78.8, 25903.0], [78.9, 25903.0], [79.0, 25903.0], [79.1, 25903.0], [79.2, 25903.0], [79.3, 25903.0], [79.4, 25904.0], [79.5, 25904.0], [79.6, 25904.0], [79.7, 25904.0], [79.8, 25904.0], [79.9, 25904.0], [80.0, 25904.0], [80.1, 25904.0], [80.2, 25904.0], [80.3, 25904.0], [80.4, 25904.0], [80.5, 25904.0], [80.6, 25904.0], [80.7, 25904.0], [80.8, 25904.0], [80.9, 25904.0], [81.0, 25904.0], [81.1, 25904.0], [81.2, 25904.0], [81.3, 25904.0], [81.4, 25904.0], [81.5, 25904.0], [81.6, 25904.0], [81.7, 25904.0], [81.8, 25904.0], [81.9, 25904.0], [82.0, 25904.0], [82.1, 25904.0], [82.2, 25904.0], [82.3, 25904.0], [82.4, 25905.0], [82.5, 25905.0], [82.6, 25905.0], [82.7, 25905.0], [82.8, 25905.0], [82.9, 25905.0], [83.0, 25905.0], [83.1, 25905.0], [83.2, 25905.0], [83.3, 25905.0], [83.4, 25905.0], [83.5, 25905.0], [83.6, 25905.0], [83.7, 25905.0], [83.8, 25905.0], [83.9, 25905.0], [84.0, 25905.0], [84.1, 25905.0], [84.2, 25905.0], [84.3, 25905.0], [84.4, 25905.0], [84.5, 25905.0], [84.6, 25905.0], [84.7, 25905.0], [84.8, 25905.0], [84.9, 25905.0], [85.0, 25905.0], [85.1, 25905.0], [85.2, 25905.0], [85.3, 25905.0], [85.4, 25905.0], [85.5, 25905.0], [85.6, 25905.0], [85.7, 25905.0], [85.8, 25906.0], [85.9, 25906.0], [86.0, 25906.0], [86.1, 25906.0], [86.2, 25906.0], [86.3, 25906.0], [86.4, 25906.0], [86.5, 25906.0], [86.6, 25906.0], [86.7, 25906.0], [86.8, 25906.0], [86.9, 25906.0], [87.0, 25906.0], [87.1, 25906.0], [87.2, 25906.0], [87.3, 25906.0], [87.4, 25906.0], [87.5, 25906.0], [87.6, 25906.0], [87.7, 25906.0], [87.8, 25906.0], [87.9, 25906.0], [88.0, 25906.0], [88.1, 25906.0], [88.2, 25906.0], [88.3, 25906.0], [88.4, 25906.0], [88.5, 25906.0], [88.6, 25906.0], [88.7, 25906.0], [88.8, 25906.0], [88.9, 25906.0], [89.0, 25906.0], [89.1, 25906.0], [89.2, 25906.0], [89.3, 25906.0], [89.4, 25906.0], [89.5, 25906.0], [89.6, 25906.0], [89.7, 25906.0], [89.8, 25906.0], [89.9, 25907.0], [90.0, 25907.0], [90.1, 25907.0], [90.2, 25907.0], [90.3, 25907.0], [90.4, 25907.0], [90.5, 25907.0], [90.6, 25907.0], [90.7, 25907.0], [90.8, 25907.0], [90.9, 25907.0], [91.0, 25907.0], [91.1, 25907.0], [91.2, 25907.0], [91.3, 25907.0], [91.4, 25907.0], [91.5, 25907.0], [91.6, 25907.0], [91.7, 25907.0], [91.8, 25907.0], [91.9, 25907.0], [92.0, 25907.0], [92.1, 25907.0], [92.2, 25907.0], [92.3, 25907.0], [92.4, 25907.0], [92.5, 25907.0], [92.6, 25907.0], [92.7, 25907.0], [92.8, 25907.0], [92.9, 25907.0], [93.0, 25908.0], [93.1, 25908.0], [93.2, 25908.0], [93.3, 25908.0], [93.4, 25908.0], [93.5, 25908.0], [93.6, 25908.0], [93.7, 25908.0], [93.8, 25908.0], [93.9, 25908.0], [94.0, 25908.0], [94.1, 25908.0], [94.2, 25908.0], [94.3, 25908.0], [94.4, 25908.0], [94.5, 25908.0], [94.6, 25908.0], [94.7, 25908.0], [94.8, 25908.0], [94.9, 25908.0], [95.0, 25908.0], [95.1, 25909.0], [95.2, 25909.0], [95.3, 25909.0], [95.4, 25909.0], [95.5, 25909.0], [95.6, 25909.0], [95.7, 25909.0], [95.8, 25909.0], [95.9, 25909.0], [96.0, 25909.0], [96.1, 25909.0], [96.2, 25909.0], [96.3, 25910.0], [96.4, 25910.0], [96.5, 25910.0], [96.6, 25910.0], [96.7, 25910.0], [96.8, 25910.0], [96.9, 25911.0], [97.0, 25911.0], [97.1, 25911.0], [97.2, 25912.0], [97.3, 25913.0], [97.4, 25915.0], [97.5, 25923.0], [97.6, 25947.0], [97.7, 26207.0], [97.8, 26438.0], [97.9, 26550.0], [98.0, 26658.0], [98.1, 26897.0], [98.2, 27053.0], [98.3, 27227.0], [98.4, 27584.0], [98.5, 28019.0], [98.6, 28224.0], [98.7, 28572.0], [98.8, 29367.0], [98.9, 29878.0], [99.0, 30030.0], [99.1, 30265.0], [99.2, 31071.0], [99.3, 31769.0], [99.4, 32841.0], [99.5, 33410.0], [99.6, 33917.0], [99.7, 34511.0], [99.8, 35050.0], [99.9, 36887.0]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1264.0, "series": [{"data": [[0.0, 2.0], [100.0, 7.0], [34500.0, 2.0], [34100.0, 1.0], [33700.0, 1.0], [33300.0, 1.0], [35700.0, 1.0], [34900.0, 2.0], [37300.0, 2.0], [200.0, 8.0], [300.0, 3.0], [400.0, 3.0], [500.0, 3.0], [600.0, 1.0], [700.0, 2.0], [800.0, 2.0], [1000.0, 4.0], [1100.0, 3.0], [1200.0, 7.0], [1300.0, 4.0], [1400.0, 10.0], [1500.0, 7.0], [1600.0, 11.0], [1700.0, 7.0], [1800.0, 17.0], [1900.0, 10.0], [2000.0, 11.0], [2100.0, 12.0], [2200.0, 17.0], [2300.0, 11.0], [2400.0, 15.0], [2500.0, 22.0], [2600.0, 14.0], [2700.0, 13.0], [2800.0, 16.0], [2900.0, 22.0], [3000.0, 31.0], [3100.0, 25.0], [3200.0, 30.0], [3300.0, 23.0], [3400.0, 19.0], [3500.0, 26.0], [3600.0, 28.0], [3700.0, 21.0], [3800.0, 22.0], [3900.0, 23.0], [4000.0, 29.0], [4200.0, 43.0], [4300.0, 38.0], [4100.0, 30.0], [4500.0, 48.0], [4400.0, 51.0], [4600.0, 65.0], [4800.0, 58.0], [4700.0, 69.0], [5100.0, 81.0], [5000.0, 70.0], [4900.0, 75.0], [5200.0, 82.0], [5300.0, 80.0], [5400.0, 71.0], [5600.0, 70.0], [5500.0, 66.0], [5700.0, 50.0], [5800.0, 62.0], [6100.0, 49.0], [5900.0, 56.0], [6000.0, 59.0], [6200.0, 42.0], [6300.0, 48.0], [6500.0, 42.0], [6600.0, 39.0], [6400.0, 57.0], [6800.0, 46.0], [6700.0, 55.0], [6900.0, 36.0], [7000.0, 50.0], [7100.0, 30.0], [7200.0, 41.0], [7300.0, 30.0], [7400.0, 25.0], [7500.0, 26.0], [7600.0, 32.0], [7900.0, 27.0], [7700.0, 36.0], [7800.0, 23.0], [8000.0, 30.0], [8100.0, 26.0], [8500.0, 31.0], [8300.0, 30.0], [8700.0, 22.0], [8200.0, 35.0], [8600.0, 24.0], [8400.0, 33.0], [8900.0, 23.0], [9200.0, 18.0], [9100.0, 11.0], [9000.0, 13.0], [8800.0, 17.0], [9400.0, 19.0], [9300.0, 13.0], [9500.0, 17.0], [9700.0, 21.0], [9600.0, 9.0], [10000.0, 13.0], [9800.0, 14.0], [9900.0, 16.0], [10200.0, 12.0], [10100.0, 15.0], [10400.0, 15.0], [10600.0, 16.0], [10300.0, 11.0], [10700.0, 16.0], [10500.0, 15.0], [10800.0, 7.0], [11000.0, 17.0], [11100.0, 12.0], [11200.0, 10.0], [10900.0, 15.0], [11400.0, 14.0], [11500.0, 16.0], [11700.0, 15.0], [11300.0, 17.0], [11600.0, 21.0], [11900.0, 21.0], [12200.0, 14.0], [11800.0, 10.0], [12000.0, 20.0], [12100.0, 9.0], [12700.0, 12.0], [12600.0, 10.0], [12400.0, 14.0], [12500.0, 11.0], [12300.0, 13.0], [13000.0, 6.0], [12800.0, 7.0], [13100.0, 9.0], [12900.0, 9.0], [13200.0, 3.0], [13300.0, 3.0], [13500.0, 4.0], [13600.0, 6.0], [13400.0, 3.0], [13800.0, 6.0], [13700.0, 5.0], [14100.0, 8.0], [13900.0, 2.0], [14300.0, 5.0], [14000.0, 7.0], [14200.0, 5.0], [14400.0, 7.0], [14500.0, 3.0], [14700.0, 9.0], [14800.0, 4.0], [14600.0, 3.0], [15100.0, 8.0], [15200.0, 4.0], [15300.0, 2.0], [15000.0, 4.0], [14900.0, 1.0], [15500.0, 9.0], [15400.0, 6.0], [15800.0, 11.0], [15600.0, 4.0], [15700.0, 3.0], [15900.0, 6.0], [16200.0, 8.0], [16100.0, 4.0], [16000.0, 6.0], [16300.0, 6.0], [16600.0, 5.0], [16800.0, 14.0], [17000.0, 21.0], [17400.0, 10.0], [16400.0, 6.0], [17200.0, 9.0], [17600.0, 16.0], [18000.0, 16.0], [17800.0, 24.0], [18400.0, 19.0], [18200.0, 19.0], [19200.0, 13.0], [18600.0, 26.0], [18800.0, 14.0], [19000.0, 14.0], [19400.0, 13.0], [19800.0, 23.0], [20400.0, 18.0], [19600.0, 14.0], [20200.0, 15.0], [20000.0, 19.0], [21200.0, 22.0], [20600.0, 12.0], [21000.0, 18.0], [21400.0, 16.0], [20800.0, 13.0], [21600.0, 9.0], [22400.0, 8.0], [21800.0, 12.0], [22200.0, 9.0], [22000.0, 11.0], [22800.0, 6.0], [23000.0, 5.0], [23400.0, 5.0], [22600.0, 8.0], [23200.0, 4.0], [24400.0, 10.0], [24000.0, 7.0], [23600.0, 6.0], [23800.0, 6.0], [24200.0, 9.0], [24600.0, 12.0], [25200.0, 5.0], [24800.0, 4.0], [25400.0, 4.0], [25000.0, 2.0], [25800.0, 3.0], [26600.0, 6.0], [25600.0, 5.0], [26400.0, 6.0], [26200.0, 4.0], [27000.0, 6.0], [27600.0, 1.0], [27400.0, 4.0], [27200.0, 1.0], [26800.0, 4.0], [28200.0, 4.0], [27800.0, 2.0], [28000.0, 4.0], [28400.0, 1.0], [28600.0, 2.0], [28800.0, 1.0], [29600.0, 1.0], [29800.0, 3.0], [30200.0, 3.0], [30000.0, 3.0], [31000.0, 1.0], [31200.0, 1.0], [32600.0, 2.0], [32400.0, 1.0], [31800.0, 1.0], [34000.0, 1.0], [33200.0, 1.0], [34400.0, 1.0], [32800.0, 1.0], [33600.0, 2.0], [36000.0, 1.0], [35600.0, 1.0], [36800.0, 1.0], [38400.0, 1.0], [38800.0, 1.0], [33900.0, 2.0], [34300.0, 1.0], [33100.0, 1.0], [36300.0, 1.0], [16900.0, 15.0], [16700.0, 9.0], [17100.0, 7.0], [16500.0, 3.0], [17300.0, 14.0], [18300.0, 17.0], [18100.0, 17.0], [17500.0, 20.0], [17700.0, 21.0], [17900.0, 18.0], [18700.0, 10.0], [18500.0, 20.0], [19100.0, 16.0], [18900.0, 17.0], [19300.0, 17.0], [19500.0, 17.0], [19900.0, 15.0], [20300.0, 10.0], [20100.0, 11.0], [19700.0, 14.0], [21500.0, 11.0], [20700.0, 14.0], [20900.0, 17.0], [21100.0, 17.0], [20500.0, 11.0], [21300.0, 13.0], [22300.0, 11.0], [22100.0, 10.0], [21700.0, 10.0], [21900.0, 4.0], [22500.0, 7.0], [22700.0, 15.0], [22900.0, 5.0], [23500.0, 6.0], [23100.0, 11.0], [23300.0, 4.0], [24300.0, 11.0], [24100.0, 6.0], [23700.0, 4.0], [24500.0, 14.0], [23900.0, 4.0], [25100.0, 7.0], [25300.0, 6.0], [24700.0, 8.0], [24900.0, 6.0], [25500.0, 5.0], [25900.0, 1264.0], [26500.0, 3.0], [25700.0, 3.0], [26100.0, 3.0], [26300.0, 1.0], [26900.0, 4.0], [26700.0, 1.0], [27300.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [28100.0, 3.0], [28300.0, 1.0], [28500.0, 1.0], [27900.0, 1.0], [29500.0, 1.0], [28900.0, 1.0], [29300.0, 1.0], [28700.0, 1.0], [30300.0, 2.0], [29900.0, 5.0], [30100.0, 1.0], [30500.0, 1.0], [29700.0, 1.0], [30900.0, 2.0], [31300.0, 1.0], [31700.0, 2.0], [31500.0, 1.0], [31100.0, 1.0], [32100.0, 1.0], [33400.0, 2.0], [33000.0, 2.0], [33800.0, 1.0], [36600.0, 1.0], [35000.0, 3.0], [39800.0, 1.0]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 4579.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 24.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4579.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1397.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 56.864864864864856, "minX": 1.64618717E12, "maxY": 1207.745233968802, "series": [{"data": [[1.64618721E12, 535.0464547677261], [1.64618723E12, 802.8713692946059], [1.64618725E12, 943.4528985507242], [1.64618727E12, 1207.745233968802], [1.64618729E12, 358.9190283400813], [1.64618718E12, 194.68589743589746], [1.6461872E12, 428.77860696517433], [1.64618722E12, 702.2926267281107], [1.64618724E12, 866.500948766603], [1.64618726E12, 1016.5231788079473], [1.64618728E12, 912.8257328990229], [1.6461873E12, 56.864864864864856], [1.64618717E12, 90.61290322580643], [1.64618719E12, 318.72949002217325]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6461873E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1496.3333333333333, "minX": 1.0, "maxY": 36373.0, "series": [{"data": [[4.0, 26340.0], [7.0, 25225.333333333332], [8.0, 27077.0], [11.0, 27150.0], [14.0, 25394.0], [15.0, 25972.0], [17.0, 27456.5], [20.0, 27069.666666666668], [21.0, 25039.0], [25.0, 27919.25], [29.0, 29002.0], [30.0, 28077.0], [33.0, 28419.333333333332], [36.0, 26387.0], [39.0, 31358.333333333332], [41.0, 26609.0], [40.0, 29912.0], [44.0, 28458.333333333332], [47.0, 27228.0], [48.0, 31071.0], [51.0, 32344.666666666668], [53.0, 24518.0], [52.0, 25324.0], [57.0, 26445.0], [56.0, 27830.0], [60.0, 29337.0], [63.0, 29707.666666666668], [67.0, 33162.0], [66.0, 29465.666666666668], [71.0, 29367.666666666668], [68.0, 27584.0], [73.0, 35030.0], [72.0, 33661.0], [79.0, 20399.75], [76.0, 30311.666666666668], [82.0, 1533.5], [81.0, 1496.3333333333333], [83.0, 24061.6], [87.0, 12943.5], [86.0, 8910.0], [85.0, 29846.5], [91.0, 1890.0], [90.0, 28698.0], [89.0, 29574.5], [94.0, 15206.111111111111], [95.0, 12565.333333333334], [96.0, 1873.4444444444443], [98.0, 9344.444444444445], [97.0, 2160.5], [102.0, 22712.8], [103.0, 12855.0], [107.0, 10682.0], [106.0, 16388.166666666664], [105.0, 1731.0], [104.0, 2167.5], [109.0, 2325.0], [110.0, 1845.1000000000001], [111.0, 5610.666666666666], [108.0, 6917.0], [112.0, 7827.4], [114.0, 2419.8181818181815], [113.0, 6412.25], [115.0, 2290.0], [116.0, 14906.0], [117.0, 26174.0], [121.0, 24702.0], [120.0, 28885.0], [124.0, 18176.0], [125.0, 2210.0], [126.0, 2838.5], [127.0, 2359.0], [130.0, 9488.666666666668], [129.0, 6553.6], [128.0, 13341.5], [132.0, 12707.5], [133.0, 2277.0], [135.0, 26164.0], [134.0, 27776.0], [131.0, 26259.0], [142.0, 24785.666666666668], [139.0, 22182.0], [138.0, 30457.666666666668], [151.0, 21367.0], [150.0, 22291.0], [149.0, 25739.0], [148.0, 36373.0], [147.0, 33538.5], [145.0, 22857.666666666668], [157.0, 8226.75], [155.0, 19182.2], [156.0, 11621.0], [158.0, 25668.0], [152.0, 21321.0], [163.0, 2935.3333333333335], [162.0, 14115.5], [160.0, 2994.5], [166.0, 2618.0], [165.0, 6963.25], [164.0, 23467.5], [169.0, 11250.5], [175.0, 3768.5], [173.0, 20930.0], [172.0, 23097.0], [171.0, 23327.0], [170.0, 21461.0], [168.0, 22229.333333333332], [180.0, 3223.0], [182.0, 27053.0], [181.0, 23345.0], [177.0, 26715.0], [176.0, 22970.333333333332], [188.0, 3715.0], [190.0, 26841.0], [189.0, 23713.333333333332], [186.0, 21237.0], [185.0, 23832.333333333332], [197.0, 9080.0], [199.0, 12335.5], [198.0, 2732.0], [196.0, 8438.25], [195.0, 19778.0], [194.0, 28195.0], [193.0, 21337.333333333332], [200.0, 6068.857142857143], [201.0, 6299.857142857143], [202.0, 11241.666666666668], [206.0, 16562.0], [207.0, 9221.0], [203.0, 21521.0], [213.0, 21245.0], [212.0, 27059.5], [208.0, 21033.0], [216.0, 18314.5], [221.0, 12893.0], [220.0, 14996.5], [219.0, 13420.0], [222.0, 5152.0], [223.0, 12917.25], [217.0, 22819.0], [224.0, 12363.5], [226.0, 8464.25], [229.0, 5662.555555555556], [228.0, 8857.333333333334], [227.0, 2491.5], [231.0, 9577.5], [230.0, 7754.75], [225.0, 23014.0], [232.0, 5612.555555555556], [233.0, 9849.333333333332], [235.0, 7129.0], [238.0, 10432.0], [237.0, 10727.666666666668], [239.0, 19707.0], [236.0, 25910.0], [234.0, 22094.0], [241.0, 4172.666666666667], [245.0, 7247.0], [242.0, 19520.666666666668], [246.0, 15800.5], [247.0, 25907.0], [244.0, 25915.0], [240.0, 25908.0], [250.0, 12954.5], [255.0, 21481.0], [254.0, 25904.0], [253.0, 25905.0], [252.0, 25904.0], [251.0, 22178.0], [249.0, 25906.0], [248.0, 20661.0], [268.0, 8514.285714285714], [256.0, 15877.5], [257.0, 16292.0], [259.0, 22081.0], [258.0, 25908.0], [263.0, 6591.363636363637], [260.0, 13106.333333333332], [261.0, 25907.0], [262.0, 16103.5], [267.0, 15764.5], [271.0, 13665.75], [265.0, 22256.0], [264.0, 25912.0], [266.0, 25905.0], [269.0, 8180.5], [270.0, 4550.5], [273.0, 6819.0], [274.0, 13244.5], [276.0, 3613.0], [279.0, 11867.272727272728], [277.0, 6766.5], [272.0, 14608.0], [275.0, 15314.5], [278.0, 3068.6666666666665], [280.0, 3257.5], [285.0, 8588.444444444445], [284.0, 7907.642857142858], [286.0, 6565.200000000001], [287.0, 9087.0], [282.0, 16899.0], [283.0, 10746.5], [281.0, 4555.0], [291.0, 9886.666666666668], [296.0, 7631.111111111111], [297.0, 9057.0], [293.0, 6192.90909090909], [292.0, 8155.666666666667], [289.0, 6714.25], [290.0, 8173.700000000001], [294.0, 6054.166666666666], [295.0, 5098.888888888889], [288.0, 9747.1], [303.0, 7619.0], [302.0, 6620.000000000001], [300.0, 5852.599999999999], [301.0, 14396.714285714284], [299.0, 4507.812500000001], [298.0, 6035.181818181818], [316.0, 6016.777777777777], [304.0, 5326.652173913044], [306.0, 6706.125], [305.0, 7712.333333333333], [307.0, 9686.666666666666], [309.0, 8854.714285714286], [308.0, 8014.727272727273], [310.0, 6941.0], [311.0, 9290.0], [312.0, 6756.692307692308], [313.0, 4281.888888888889], [315.0, 8273.714285714286], [314.0, 16121.0], [317.0, 5401.5], [318.0, 10816.000000000002], [319.0, 22016.0], [320.0, 3021.0], [327.0, 10459.666666666668], [328.0, 7330.2], [329.0, 18596.0], [331.0, 4885.6], [330.0, 8548.0], [326.0, 11172.3], [325.0, 5255.5], [324.0, 7095.5], [323.0, 15318.5], [322.0, 22879.0], [334.0, 21053.5], [332.0, 24333.0], [335.0, 6673.0], [349.0, 6383.615384615385], [341.0, 15364.6], [342.0, 25906.0], [343.0, 11400.0], [346.0, 15163.5], [348.0, 8883.0], [338.0, 24655.0], [337.0, 20166.666666666668], [347.0, 8228.714285714286], [350.0, 17524.0], [351.0, 13417.0], [345.0, 18664.0], [353.0, 11373.666666666668], [357.0, 6696.428571428572], [356.0, 11303.0], [355.0, 12639.0], [354.0, 25906.0], [364.0, 18783.333333333332], [366.0, 18836.0], [365.0, 21435.0], [359.0, 11052.375], [352.0, 19001.0], [358.0, 6580.500000000001], [361.0, 7965.222222222223], [363.0, 7948.0], [362.0, 5111.0], [360.0, 7289.0], [367.0, 17953.0], [369.0, 3377.0], [372.0, 10352.5], [373.0, 7664.200000000001], [374.0, 7648.25], [376.0, 10474.5], [383.0, 10326.6], [381.0, 16459.333333333332], [382.0, 11067.4], [375.0, 8123.5], [368.0, 18839.0], [378.0, 7617.600000000001], [377.0, 7359.076923076924], [379.0, 10034.666666666666], [380.0, 9469.857142857143], [371.0, 16136.75], [386.0, 13245.5], [388.0, 13138.0], [389.0, 9315.857142857143], [394.0, 12856.0], [395.0, 5210.0], [392.0, 7501.0], [393.0, 25909.0], [390.0, 9029.6], [387.0, 12184.6], [397.0, 20218.0], [398.0, 13079.0], [384.0, 10153.8], [385.0, 25905.0], [391.0, 10035.5], [412.0, 10967.75], [411.0, 12214.4], [410.0, 12407.749999999998], [409.0, 5003.333333333333], [415.0, 10992.0], [413.0, 14551.0], [414.0, 11407.5], [407.0, 12424.285714285716], [404.0, 9930.333333333332], [402.0, 11040.333333333332], [401.0, 17946.0], [400.0, 19528.5], [403.0, 19272.0], [406.0, 8775.5], [405.0, 8910.0], [430.0, 9758.692307692309], [416.0, 10147.0], [417.0, 17508.0], [419.0, 25904.0], [418.0, 17394.0], [425.0, 13976.25], [429.0, 10944.647058823528], [431.0, 9602.857142857143], [424.0, 14120.6], [428.0, 10644.499999999998], [427.0, 8662.949999999999], [426.0, 11031.666666666664], [423.0, 9676.0], [421.0, 25907.0], [420.0, 25906.0], [434.0, 10023.0], [435.0, 6600.5], [444.0, 7473.0], [445.0, 12790.57142857143], [446.0, 14304.666666666668], [447.0, 25906.0], [433.0, 13335.0], [437.0, 8437.181818181818], [436.0, 12283.888888888889], [432.0, 7290.625], [440.0, 11532.857142857143], [439.0, 8456.0], [438.0, 8102.181818181818], [441.0, 8235.0], [442.0, 13205.777777777777], [443.0, 9281.333333333334], [450.0, 8286.0], [451.0, 9659.0], [461.0, 25906.0], [460.0, 25905.0], [452.0, 8260.055555555557], [448.0, 9085.5], [449.0, 17092.0], [454.0, 12233.4], [453.0, 7382.0], [455.0, 11523.2], [458.0, 11162.0], [457.0, 25906.0], [456.0, 25908.0], [459.0, 22327.0], [463.0, 22100.5], [466.0, 11877.0], [464.0, 11631.666666666668], [465.0, 17016.0], [473.0, 15695.75], [477.0, 24067.0], [476.0, 19780.0], [475.0, 20036.0], [474.0, 19221.0], [471.0, 19442.333333333332], [467.0, 24704.0], [494.0, 10004.444444444445], [492.0, 10531.25], [495.0, 11358.25], [493.0, 14141.166666666666], [490.0, 11414.666666666668], [491.0, 8800.25], [489.0, 10515.9375], [488.0, 9378.090909090908], [487.0, 7596.416666666667], [486.0, 11418.75], [481.0, 10640.0], [480.0, 19677.333333333332], [483.0, 6222.0], [482.0, 12771.0], [484.0, 10865.272727272726], [485.0, 11451.75], [508.0, 10136.4375], [496.0, 11638.25], [497.0, 11997.0], [499.0, 7664.0], [498.0, 9306.0], [502.0, 9891.444444444443], [501.0, 12214.375], [500.0, 17745.875], [507.0, 9836.2], [509.0, 10147.086956521736], [510.0, 7997.75], [506.0, 10766.250000000002], [511.0, 13961.833333333334], [505.0, 9601.888888888889], [504.0, 10977.27272727273], [513.0, 18231.0], [512.0, 10225.800000000001], [516.0, 12174.5], [519.0, 8760.0], [535.0, 14360.0], [534.0, 22748.0], [533.0, 20686.0], [530.0, 21051.0], [528.0, 25518.0], [543.0, 25902.0], [542.0, 25905.0], [541.0, 25907.0], [540.0, 18607.0], [537.0, 29598.0], [536.0, 18696.0], [518.0, 10113.75], [517.0, 13919.0], [515.0, 18513.333333333332], [514.0, 7982.0], [522.0, 8152.5], [523.0, 9201.0], [521.0, 17864.4], [520.0, 6588.0], [524.0, 10317.8], [525.0, 8839.333333333334], [526.0, 19994.666666666668], [527.0, 11698.0], [551.0, 25906.0], [572.0, 9553.095238095239], [569.0, 9547.642857142859], [554.0, 16349.5], [553.0, 25909.0], [552.0, 25907.0], [556.0, 18525.0], [555.0, 25906.0], [571.0, 10630.692307692309], [570.0, 10580.0], [568.0, 13997.57142857143], [550.0, 25906.0], [549.0, 25909.0], [548.0, 25907.0], [547.0, 25907.0], [546.0, 25905.0], [545.0, 25905.0], [544.0, 25907.0], [559.0, 21717.666666666668], [565.0, 17177.666666666668], [566.0, 13064.5], [564.0, 7580.0], [575.0, 10367.5], [561.0, 25906.0], [560.0, 25907.0], [562.0, 25906.0], [574.0, 15517.666666666666], [573.0, 6746.8], [567.0, 11254.2], [579.0, 12892.5], [588.0, 13040.0], [576.0, 8843.9], [585.0, 16345.2], [589.0, 9606.0], [590.0, 9954.375], [591.0, 14094.25], [587.0, 14588.25], [586.0, 13907.571428571428], [584.0, 8039.0], [583.0, 7631.666666666666], [600.0, 17777.5], [603.0, 18035.5], [602.0, 25910.0], [601.0, 25906.0], [605.0, 25906.0], [604.0, 25906.0], [607.0, 24347.0], [606.0, 24633.0], [595.0, 13747.4], [596.0, 18335.5], [599.0, 19347.0], [598.0, 17780.0], [597.0, 25901.0], [593.0, 13885.5], [594.0, 12164.0], [592.0, 15192.5], [582.0, 5841.0], [581.0, 11662.0], [580.0, 24735.0], [578.0, 11311.75], [577.0, 16085.0], [636.0, 15713.0], [616.0, 19056.5], [618.0, 25909.0], [617.0, 18155.0], [623.0, 16666.25], [609.0, 14845.0], [608.0, 18046.0], [613.0, 19268.0], [612.0, 20595.666666666668], [615.0, 18060.0], [614.0, 24479.0], [619.0, 25906.0], [627.0, 17414.0], [626.0, 25913.0], [625.0, 25906.0], [624.0, 25909.0], [629.0, 25909.0], [628.0, 25906.0], [631.0, 25909.0], [630.0, 25904.0], [634.0, 12940.25], [633.0, 16419.5], [632.0, 17798.0], [635.0, 9555.666666666666], [639.0, 17670.0], [638.0, 25907.0], [637.0, 25906.0], [640.0, 14344.0], [651.0, 8740.0], [646.0, 12350.5], [647.0, 24038.0], [665.0, 9906.999999999998], [664.0, 13860.8], [666.0, 12064.833333333334], [668.0, 9552.642857142857], [667.0, 17688.0], [669.0, 13156.666666666668], [671.0, 12002.555555555555], [670.0, 11450.4], [656.0, 17424.333333333332], [663.0, 11102.571428571428], [662.0, 10348.0], [660.0, 18164.666666666668], [657.0, 24179.0], [648.0, 12307.6], [645.0, 7520.0], [644.0, 6253.0], [643.0, 20838.5], [641.0, 17379.0], [649.0, 15340.5], [650.0, 13435.0], [652.0, 8922.4], [654.0, 12779.700000000003], [655.0, 13460.0], [653.0, 8957.166666666666], [678.0, 14467.333333333332], [674.0, 10132.999999999998], [675.0, 13928.25], [673.0, 10541.0], [672.0, 13725.666666666666], [677.0, 11896.374999999998], [676.0, 11394.2], [679.0, 12155.7], [696.0, 7333.0], [698.0, 6971.5], [697.0, 6362.0], [700.0, 14107.4], [699.0, 19727.0], [701.0, 25905.0], [703.0, 16865.0], [702.0, 25254.0], [688.0, 10119.0], [695.0, 9569.0], [693.0, 16771.0], [690.0, 13633.0], [694.0, 16245.5], [681.0, 12449.25], [682.0, 11770.0], [680.0, 14005.666666666668], [683.0, 7641.6], [684.0, 9994.666666666668], [685.0, 7236.142857142858], [686.0, 8479.333333333334], [687.0, 14239.75], [705.0, 16207.666666666666], [704.0, 9293.0], [718.0, 11685.636363636364], [719.0, 9996.5], [706.0, 14290.5], [708.0, 20979.0], [711.0, 13595.0], [710.0, 12249.0], [709.0, 12952.5], [729.0, 10191.75], [728.0, 17541.30769230769], [713.0, 13933.333333333332], [712.0, 14657.181818181818], [715.0, 12566.8125], [716.0, 9375.666666666668], [714.0, 19535.625], [717.0, 12848.454545454544], [730.0, 10242.157894736842], [734.0, 20070.5], [732.0, 11583.125], [733.0, 11149.199999999999], [731.0, 13911.727272727274], [735.0, 10956.25], [720.0, 11977.4], [721.0, 11073.5], [723.0, 12855.125], [722.0, 9353.6], [727.0, 18557.2], [726.0, 17416.2], [725.0, 17063.166666666668], [724.0, 17873.199999999997], [743.0, 16252.666666666666], [739.0, 12246.5], [741.0, 9790.0], [744.0, 15156.125], [746.0, 25905.0], [745.0, 25906.0], [748.0, 25903.0], [747.0, 24556.0], [750.0, 25909.0], [749.0, 25905.0], [752.0, 25908.0], [755.0, 10583.0], [754.0, 15865.0], [753.0, 18064.0], [767.0, 23463.0], [764.0, 13512.333333333332], [765.0, 20966.0], [766.0, 15331.5], [760.0, 12288.199999999999], [762.0, 7844.285714285714], [761.0, 14416.533333333335], [763.0, 11295.9], [756.0, 12821.666666666668], [757.0, 7896.0], [759.0, 7640.6], [758.0, 8999.333333333334], [742.0, 9057.0], [740.0, 7474.0], [738.0, 21389.75], [737.0, 17252.0], [736.0, 13466.0], [751.0, 21158.666666666668], [771.0, 9227.285714285714], [781.0, 16881.5], [769.0, 19833.857142857145], [782.0, 18975.571428571428], [783.0, 11870.461538461537], [768.0, 25904.0], [770.0, 15559.5], [773.0, 10009.363636363636], [772.0, 25905.5], [774.0, 12971.444444444445], [775.0, 9037.25], [793.0, 15268.0], [792.0, 8415.714285714286], [794.0, 13865.125000000002], [797.0, 13237.47619047619], [798.0, 10200.888888888889], [799.0, 12486.5], [796.0, 16914.333333333332], [795.0, 5972.4], [786.0, 13189.142857142855], [785.0, 17690.333333333332], [784.0, 12529.500000000002], [787.0, 17972.999999999996], [788.0, 17690.5], [789.0, 8437.666666666666], [790.0, 4984.0], [791.0, 14045.75], [776.0, 13175.6], [777.0, 12411.8], [779.0, 18772.5], [778.0, 8798.0], [780.0, 12496.0], [826.0, 11600.25], [804.0, 12545.375], [805.0, 17916.666666666668], [807.0, 18430.142857142855], [828.0, 9412.25], [827.0, 18418.0], [830.0, 13532.75], [831.0, 5721.0], [823.0, 20903.0], [822.0, 25905.0], [821.0, 21214.0], [819.0, 20313.0], [818.0, 17430.0], [817.0, 21852.666666666668], [829.0, 3970.0], [806.0, 16350.500000000004], [808.0, 18124.14285714286], [809.0, 11677.666666666666], [803.0, 17395.4], [801.0, 16812.2], [800.0, 7509.0], [813.0, 15670.5], [814.0, 21576.0], [812.0, 19081.5], [811.0, 19237.714285714286], [810.0, 5163.0], [836.0, 14300.8], [832.0, 10393.888888888889], [834.0, 9043.75], [835.0, 9529.0], [833.0, 12097.285714285714], [839.0, 10085.25], [856.0, 23354.57142857143], [857.0, 25907.0], [858.0, 13391.5], [859.0, 17079.57142857143], [860.0, 12835.6], [861.0, 9942.777777777777], [863.0, 9629.363636363636], [862.0, 12776.25], [838.0, 16445.333333333332], [837.0, 25908.0], [849.0, 15967.583333333332], [850.0, 15129.222222222223], [851.0, 14463.37931034483], [852.0, 16268.866666666667], [853.0, 16728.69444444445], [854.0, 13153.8125], [855.0, 16334.933333333334], [848.0, 17743.066666666666], [840.0, 19156.6], [841.0, 13046.0], [842.0, 18640.11111111111], [845.0, 13782.181818181816], [846.0, 19805.8125], [847.0, 13455.322580645161], [844.0, 11560.933333333336], [843.0, 10993.111111111111], [870.0, 11126.75], [865.0, 13764.3125], [872.0, 10025.0], [871.0, 11458.375], [888.0, 23282.5], [889.0, 25906.0], [892.0, 16361.5], [891.0, 7983.857142857142], [890.0, 18648.333333333332], [894.0, 18300.3], [895.0, 23359.42857142857], [893.0, 10845.0], [880.0, 10451.25], [881.0, 16286.42857142857], [883.0, 8901.285714285714], [885.0, 12853.555555555555], [886.0, 18369.0], [887.0, 19547.333333333332], [884.0, 12141.833333333334], [882.0, 24546.222222222226], [873.0, 15908.0], [876.0, 10071.0], [877.0, 23816.833333333336], [878.0, 22367.375], [879.0, 19324.714285714286], [864.0, 17370.333333333336], [875.0, 4770.25], [874.0, 21708.14285714286], [869.0, 5795.5], [868.0, 14409.5], [867.0, 15204.166666666666], [866.0, 23441.25], [903.0, 6381.333333333333], [899.0, 17732.5], [897.0, 12693.181818181818], [896.0, 8834.8], [911.0, 13980.333333333332], [910.0, 14070.666666666666], [908.0, 23953.0], [909.0, 16049.25], [900.0, 9978.153846153848], [898.0, 12961.2], [901.0, 14684.61904761905], [913.0, 13412.857142857141], [914.0, 10025.833333333332], [912.0, 22304.454545454544], [922.0, 19249.0], [925.0, 8874.0], [926.0, 21368.0], [920.0, 20488.0], [921.0, 27193.75], [915.0, 19078.714285714286], [918.0, 5810.0], [919.0, 13483.466666666665], [917.0, 13626.272727272728], [916.0, 11360.125], [902.0, 13475.09090909091], [904.0, 20963.5], [905.0, 25906.0], [907.0, 17278.333333333332], [935.0, 20917.000000000004], [930.0, 15985.6], [928.0, 6858.0], [929.0, 18863.25], [942.0, 12752.695652173916], [943.0, 14163.625], [939.0, 20691.2], [940.0, 17326.90322580645], [941.0, 17958.27272727272], [933.0, 15498.875], [932.0, 14946.999999999998], [931.0, 22386.333333333332], [938.0, 15081.124999999998], [937.0, 13449.5], [934.0, 14285.500000000002], [936.0, 16685.714285714286], [949.0, 8705.076923076922], [951.0, 13689.42857142857], [950.0, 14854.0], [948.0, 14362.0], [947.0, 19064.76923076923], [946.0, 14810.399999999998], [945.0, 16018.631578947368], [944.0, 21964.0], [959.0, 25901.0], [958.0, 25904.0], [955.0, 8912.1], [956.0, 25906.0], [954.0, 15295.5], [952.0, 15171.363636363636], [953.0, 9265.166666666666], [957.0, 16281.0], [967.0, 16356.071428571431], [963.0, 16582.999999999996], [962.0, 21555.266666666663], [964.0, 13905.84210526316], [961.0, 13500.25], [960.0, 13475.0], [972.0, 16823.0], [974.0, 20916.5], [973.0, 14942.400000000001], [975.0, 15253.866666666667], [965.0, 11684.733333333334], [976.0, 14804.0], [991.0, 19362.0], [990.0, 10753.909090909092], [989.0, 10710.57142857143], [988.0, 22723.416666666664], [987.0, 22690.14285714286], [986.0, 11528.666666666668], [984.0, 25023.666666666668], [979.0, 15917.9375], [980.0, 10789.846153846154], [983.0, 17578.2], [982.0, 25904.0], [981.0, 20664.5], [978.0, 16961.222222222223], [977.0, 15452.875], [968.0, 16685.166666666664], [970.0, 8667.0], [969.0, 18010.375], [971.0, 13126.333333333334], [966.0, 13548.0], [1019.0, 25903.0], [994.0, 17246.545454545452], [993.0, 17121.444444444445], [995.0, 19618.260869565212], [992.0, 16495.8], [999.0, 15040.535714285717], [1016.0, 14386.6], [1018.0, 14139.75], [1017.0, 13336.333333333332], [1020.0, 17625.666666666668], [1023.0, 14276.8], [1021.0, 10672.666666666668], [1008.0, 9689.599999999999], [1009.0, 18666.25], [1010.0, 25907.5], [1012.0, 15511.636363636362], [1013.0, 9641.0], [1015.0, 19993.85714285714], [1014.0, 15681.5], [1011.0, 16266.666666666668], [998.0, 12961.25], [1002.0, 10694.857142857143], [1001.0, 16270.25], [1000.0, 14565.0], [1003.0, 20745.545454545456], [1004.0, 18750.928571428572], [1007.0, 11885.4375], [1006.0, 5958.0], [1005.0, 14701.285714285714], [996.0, 15096.5625], [997.0, 22074.5], [1032.0, 17456.0], [1024.0, 16157.0], [1054.0, 12201.2], [1052.0, 14076.5], [1050.0, 16031.0], [1048.0, 22009.14285714286], [1046.0, 21519.142857142855], [1026.0, 11516.571428571428], [1034.0, 20955.5], [1030.0, 14974.5], [1028.0, 25905.5], [1036.0, 16516.25], [1084.0, 16702.0], [1086.0, 14934.285714285714], [1056.0, 6436.0], [1072.0, 12777.0], [1038.0, 5900.0], [1074.0, 10396.0], [1082.0, 25904.0], [1080.0, 5951.0], [1076.0, 25907.0], [1058.0, 25905.0], [1060.0, 12384.0], [1062.0, 24302.0], [1064.0, 6837.5], [1066.0, 12718.333333333334], [1068.0, 22126.333333333336], [1070.0, 14947.636363636364], [1040.0, 12812.714285714286], [1042.0, 12073.8], [1044.0, 22304.11111111111], [1138.0, 16809.642857142855], [1102.0, 25905.0], [1088.0, 15727.0], [1114.0, 15536.0], [1118.0, 18967.0], [1112.0, 12467.5], [1110.0, 9644.0], [1108.0, 25906.0], [1106.0, 25906.0], [1104.0, 25905.0], [1090.0, 10977.25], [1092.0, 25908.0], [1100.0, 20879.0], [1098.0, 25908.0], [1136.0, 14242.25], [1120.0, 11673.5], [1150.0, 7226.0], [1148.0, 21350.25], [1146.0, 25903.0], [1144.0, 25904.5], [1142.0, 13506.000000000002], [1140.0, 14011.6], [1124.0, 19817.428571428572], [1128.0, 25903.0], [1122.0, 9925.75], [1130.0, 12222.8], [1134.0, 16406.0], [1132.0, 21614.0], [1162.0, 14310.888888888887], [1154.0, 21484.5], [1152.0, 17748.8], [1182.0, 5342.0], [1180.0, 5155.0], [1178.0, 25905.0], [1176.0, 12922.666666666666], [1172.0, 16845.0], [1174.0, 25907.0], [1170.0, 18615.75], [1168.0, 15595.142857142857], [1158.0, 16646.5], [1156.0, 20950.25], [1160.0, 13963.2], [1166.0, 24734.6], [1164.0, 25903.0], [1184.0, 8720.714285714286], [1214.0, 25907.0], [1212.0, 6738.0], [1210.0, 9255.0], [1208.0, 14048.0], [1204.0, 7671.0], [1206.0, 15928.5], [1202.0, 13382.0], [1200.0, 16594.14285714286], [1186.0, 25905.0], [1192.0, 5853.666666666667], [1194.0, 21265.666666666664], [1196.0, 12458.0], [1198.0, 23889.666666666668], [1190.0, 14493.5], [1188.0, 8842.5], [1220.0, 5080.5], [1232.0, 5968.5], [1230.0, 25906.5], [1228.0, 25907.0], [1226.0, 25907.0], [1224.0, 25905.0], [1222.0, 25907.0], [1264.0, 25907.0], [1268.0, 19065.666666666668], [1276.0, 16836.5], [1274.0, 18069.0], [1272.0, 25910.0], [1270.0, 25905.0], [1278.0, 11017.75], [1248.0, 8815.0], [1234.0, 15859.42857142857], [1236.0, 12107.333333333334], [1238.0, 25906.0], [1246.0, 25905.0], [1218.0, 25910.0], [1244.0, 25903.0], [1242.0, 25907.0], [1240.0, 16542.0], [1252.0, 15793.0], [1254.0, 16930.5], [1258.0, 8369.333333333334], [1260.0, 17775.2], [1262.0, 25901.0], [1284.0, 8902.666666666666], [1304.0, 18684.666666666668], [1282.0, 20735.666666666668], [1310.0, 17814.6], [1280.0, 25908.0], [1292.0, 25905.5], [1290.0, 25909.0], [1288.0, 5319.0], [1286.0, 25906.0], [1294.0, 14682.0], [1322.0, 19000.333333333332], [1318.0, 25906.0], [1316.0, 10345.0], [1312.0, 12194.0], [1326.0, 25904.0], [1324.0, 6021.0], [1342.0, 25905.0], [1340.0, 25902.0], [1338.0, 25904.0], [1334.0, 25904.0], [1330.0, 21151.5], [1328.0, 25904.0], [1332.0, 23572.0], [1296.0, 25905.0], [1298.0, 25905.0], [1302.0, 24317.5], [1300.0, 5223.0], [1306.0, 13260.666666666666], [1308.0, 11053.166666666668], [1350.0, 6995.0], [1358.0, 20583.75], [1366.0, 15727.0], [1364.0, 4827.0], [1362.0, 24232.666666666668], [1354.0, 16303.5], [1352.0, 8897.0], [1348.0, 25909.0], [1346.0, 25904.0], [1344.0, 9077.0], [1039.0, 14238.571428571428], [1025.0, 18535.333333333332], [1055.0, 14849.8], [1027.0, 22712.777777777777], [1053.0, 12365.333333333332], [1051.0, 13926.0], [1049.0, 12775.266666666668], [1047.0, 19727.777777777777], [1033.0, 18134.375], [1035.0, 13923.0], [1031.0, 17730.0], [1029.0, 25908.166666666668], [1057.0, 25229.333333333336], [1087.0, 15576.666666666668], [1085.0, 7177.0], [1083.0, 11749.333333333332], [1081.0, 19818.0], [1079.0, 23376.0], [1077.0, 25903.0], [1075.0, 7062.0], [1059.0, 24034.25], [1063.0, 15794.75], [1065.0, 16972.666666666668], [1071.0, 19890.75], [1069.0, 10080.909090909092], [1067.0, 16007.666666666664], [1061.0, 14454.0], [1037.0, 20436.0], [1041.0, 17354.333333333332], [1043.0, 13723.666666666666], [1045.0, 13112.333333333334], [1141.0, 25906.0], [1091.0, 25906.5], [1119.0, 12584.333333333334], [1109.0, 25905.5], [1107.0, 25903.0], [1105.0, 25905.0], [1113.0, 25906.0], [1111.0, 25905.0], [1117.0, 5199.0], [1115.0, 5634.0], [1089.0, 16360.666666666668], [1101.0, 25907.0], [1099.0, 25906.0], [1097.0, 5068.5], [1095.0, 11216.5], [1093.0, 11915.666666666666], [1103.0, 11025.75], [1139.0, 19338.333333333336], [1145.0, 19666.0], [1147.0, 15619.5], [1149.0, 11046.333333333334], [1151.0, 25905.0], [1143.0, 24723.0], [1137.0, 16512.75], [1121.0, 22732.23076923077], [1123.0, 9948.857142857143], [1125.0, 5738.0], [1131.0, 23655.333333333332], [1129.0, 23055.5], [1127.0, 18712.800000000003], [1133.0, 20763.25], [1135.0, 20636.0], [1163.0, 11190.333333333334], [1155.0, 18949.5], [1175.0, 25904.0], [1173.0, 14644.0], [1171.0, 11089.166666666668], [1169.0, 18566.5], [1153.0, 14967.428571428572], [1181.0, 3524.0], [1179.0, 25905.0], [1177.0, 25911.0], [1157.0, 20472.571428571428], [1159.0, 18209.0], [1161.0, 19321.333333333332], [1165.0, 7295.25], [1167.0, 17109.428571428572], [1193.0, 5034.0], [1201.0, 12649.333333333334], [1203.0, 21058.5], [1205.0, 6978.0], [1207.0, 7042.75], [1211.0, 25905.0], [1209.0, 7321.0], [1215.0, 25907.0], [1191.0, 12030.0], [1189.0, 16432.0], [1213.0, 25902.0], [1195.0, 19072.555555555555], [1199.0, 21133.4], [1197.0, 12534.0], [1229.0, 16499.0], [1235.0, 15987.77777777778], [1231.0, 13487.714285714284], [1267.0, 6152.333333333333], [1269.0, 22632.0], [1273.0, 22824.0], [1271.0, 25905.0], [1275.0, 17007.0], [1277.0, 18627.666666666668], [1279.0, 25905.5], [1251.0, 7755.5], [1249.0, 25905.0], [1233.0, 9397.4], [1237.0, 16451.666666666668], [1241.0, 25906.0], [1243.0, 11316.0], [1245.0, 19249.333333333332], [1219.0, 25906.0], [1217.0, 13378.5], [1223.0, 3503.0], [1221.0, 27991.0], [1227.0, 19966.0], [1225.0, 25904.0], [1253.0, 12724.0], [1261.0, 15876.0], [1255.0, 6107.0], [1263.0, 25904.0], [1283.0, 15403.0], [1281.0, 25904.0], [1293.0, 25906.0], [1291.0, 25904.0], [1289.0, 25908.0], [1285.0, 17758.0], [1295.0, 25906.5], [1299.0, 25903.0], [1297.0, 6880.0], [1301.0, 12624.5], [1309.0, 9832.0], [1307.0, 25906.0], [1311.0, 13417.0], [1323.0, 11869.333333333332], [1321.0, 15840.333333333334], [1317.0, 10544.0], [1313.0, 6723.0], [1327.0, 25904.0], [1325.0, 5085.0], [1329.0, 13050.333333333332], [1333.0, 4513.0], [1331.0, 25905.0], [1337.0, 6576.5], [1335.0, 11085.0], [1341.0, 19520.0], [1339.0, 25904.0], [1343.0, 25909.0], [1349.0, 25910.0], [1367.0, 19142.0], [1365.0, 16349.0], [1363.0, 25906.0], [1359.0, 25908.0], [1355.0, 3021.0], [1351.0, 5133.0], [1347.0, 25905.0], [1345.0, 24548.0], [1.0, 25568.0]], "isOverall": false, "label": "Plot and download", "isController": false}, {"data": [[720.4423333333326, 13844.536333333283]], "isOverall": false, "label": "Plot and download-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1367.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 523.9, "minX": 1.64618717E12, "maxY": 77051.5, "series": [{"data": [[1.64618721E12, 17920.6], [1.64618723E12, 41661.2], [1.64618725E12, 61228.4], [1.64618727E12, 75604.3], [1.64618729E12, 47343.5], [1.64618718E12, 12813.7], [1.6461872E12, 17651.8], [1.64618722E12, 28358.1], [1.64618724E12, 56608.2], [1.64618726E12, 71646.2], [1.64618728E12, 77051.5], [1.6461873E12, 4262.4], [1.64618717E12, 1190.4], [1.64618719E12, 19533.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64618721E12, 6743.1], [1.64618723E12, 6337.5], [1.64618725E12, 6202.3], [1.64618727E12, 5577.0], [1.64618729E12, 6134.7], [1.64618718E12, 5205.2], [1.6461872E12, 6624.8], [1.64618722E12, 6422.0], [1.64618724E12, 6067.1], [1.64618726E12, 6422.0], [1.64618728E12, 6202.3], [1.6461873E12, 1875.9], [1.64618717E12, 523.9], [1.64618719E12, 7452.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6461873E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1720.3225806451615, "minX": 1.64618717E12, "maxY": 28374.405405405425, "series": [{"data": [[1.64618721E12, 8794.158924205383], [1.64618723E12, 12606.867219917007], [1.64618725E12, 15514.65036231883], [1.64618727E12, 16508.590987868287], [1.64618729E12, 23030.37246963564], [1.64618718E12, 3438.6538461538457], [1.6461872E12, 8311.805970149251], [1.64618722E12, 10918.74423963133], [1.64618724E12, 15045.235294117661], [1.64618726E12, 15862.357615894027], [1.64618728E12, 18759.07166123778], [1.6461873E12, 28374.405405405425], [1.64618717E12, 1720.3225806451615], [1.64618719E12, 5640.235033259417]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6461873E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1720.2258064516134, "minX": 1.64618717E12, "maxY": 28374.37837837838, "series": [{"data": [[1.64618721E12, 8705.488997555018], [1.64618723E12, 7532.01452282158], [1.64618725E12, 7417.500000000006], [1.64618727E12, 6079.213171577125], [1.64618729E12, 16227.151821862353], [1.64618718E12, 3433.5576923076906], [1.6461872E12, 8237.375621890544], [1.64618722E12, 8320.894009216592], [1.64618724E12, 7308.969639468688], [1.64618726E12, 6876.453642384099], [1.64618728E12, 8681.81758957654], [1.6461873E12, 28374.37837837838], [1.64618717E12, 1720.2258064516134], [1.64618719E12, 5610.334811529932]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6461873E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.9839743589743599, "minX": 1.64618717E12, "maxY": 16276.27927927928, "series": [{"data": [[1.64618721E12, 670.8068459657698], [1.64618723E12, 5804.481327800827], [1.64618725E12, 8699.115942028991], [1.64618727E12, 10940.188908145588], [1.64618729E12, 15211.821862348179], [1.64618718E12, 0.9839743589743599], [1.6461872E12, 117.14925373134331], [1.64618722E12, 3263.8617511520756], [1.64618724E12, 8476.404174573061], [1.64618726E12, 9601.432119205308], [1.64618728E12, 12792.258957654714], [1.6461873E12, 16276.27927927928], [1.64618717E12, 18.0], [1.64618719E12, 1.0598669623059855]], "isOverall": false, "label": "Plot and download", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6461873E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1059.0, "minX": 1.64618717E12, "maxY": 39867.0, "series": [{"data": [[1.64618721E12, 19542.0], [1.64618723E12, 34511.0], [1.64618725E12, 33492.0], [1.64618727E12, 36654.0], [1.64618729E12, 37375.0], [1.64618718E12, 8060.0], [1.6461872E12, 14416.0], [1.64618722E12, 24466.0], [1.64618724E12, 39867.0], [1.64618726E12, 38816.0], [1.64618728E12, 29808.0], [1.6461873E12, 36887.0], [1.64618717E12, 2236.0], [1.64618719E12, 11908.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64618721E12, 12632.0], [1.64618723E12, 18671.800000000003], [1.64618725E12, 21183.0], [1.64618727E12, 19959.7], [1.64618729E12, 26238.600000000002], [1.64618718E12, 6198.100000000002], [1.6461872E12, 12019.199999999999], [1.64618722E12, 16017.500000000005], [1.64618724E12, 21355.0], [1.64618726E12, 20613.7], [1.64618728E12, 23465.0], [1.6461873E12, 33784.2], [1.64618717E12, 2181.2], [1.64618719E12, 9263.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64618721E12, 16274.0], [1.64618723E12, 22402.24], [1.64618725E12, 28111.83999999998], [1.64618727E12, 26317.68], [1.64618729E12, 36136.200000000004], [1.64618718E12, 7924.92000000001], [1.6461872E12, 13553.199999999999], [1.64618722E12, 21342.649999999998], [1.64618724E12, 25510.599999999988], [1.64618726E12, 32655.61], [1.64618728E12, 26441.48], [1.6461873E12, 36666.55999999999], [1.64618717E12, 2236.0], [1.64618719E12, 11138.33999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64618721E12, 13829.0], [1.64618723E12, 20165.399999999998], [1.64618725E12, 22758.0], [1.64618727E12, 20849.1], [1.64618729E12, 29278.800000000007], [1.64618718E12, 6687.900000000001], [1.6461872E12, 12669.149999999998], [1.64618722E12, 17642.35], [1.64618724E12, 22825.0], [1.64618726E12, 21782.899999999998], [1.64618728E12, 24555.2], [1.6461873E12, 34967.0], [1.64618717E12, 2222.2], [1.64618719E12, 10008.399999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64618721E12, 3552.0], [1.64618723E12, 3606.0], [1.64618725E12, 3877.0], [1.64618727E12, 4070.0], [1.64618729E12, 15894.0], [1.64618718E12, 1059.0], [1.6461872E12, 2959.0], [1.64618722E12, 3253.0], [1.64618724E12, 3757.0], [1.64618726E12, 3805.0], [1.64618728E12, 4770.0], [1.6461873E12, 22926.0], [1.64618717E12, 1072.0], [1.64618719E12, 2434.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64618721E12, 8314.0], [1.64618723E12, 6594.0], [1.64618725E12, 6357.0], [1.64618727E12, 7220.0], [1.64618729E12, 21863.0], [1.64618718E12, 2923.0], [1.6461872E12, 8589.5], [1.64618722E12, 7774.0], [1.64618724E12, 6248.0], [1.64618726E12, 7001.0], [1.64618728E12, 14261.0], [1.6461873E12, 27584.0], [1.64618717E12, 1751.0], [1.64618719E12, 4961.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6461873E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 266.0, "minX": 16.0, "maxY": 25907.0, "series": [{"data": [[16.0, 8870.0], [17.0, 5738.0], [21.0, 3665.0], [22.0, 5836.0], [23.0, 3906.0], [24.0, 2345.5], [25.0, 6857.0], [29.0, 3671.0], [30.0, 7078.5], [31.0, 3893.5], [33.0, 5805.0], [35.0, 10695.5], [34.0, 5257.5], [36.0, 4828.0], [39.0, 4281.0], [38.0, 8554.0], [41.0, 7859.5], [40.0, 7278.5], [43.0, 10028.0], [42.0, 18974.5], [44.0, 9724.0], [45.0, 8370.0], [46.0, 5108.0], [47.0, 18955.0], [49.0, 15916.0], [48.0, 7803.0], [50.0, 6950.0], [51.0, 7102.0], [53.0, 7902.0], [54.0, 10128.0], [55.0, 5867.0], [57.0, 6393.5], [56.0, 7915.0], [58.0, 17033.0], [59.0, 13053.0], [61.0, 8148.0], [60.0, 16944.5], [62.0, 4909.0], [63.0, 7684.0], [65.0, 8857.0], [64.0, 8745.0], [67.0, 6523.0], [68.0, 8233.5], [69.0, 16971.0], [70.0, 5637.0], [71.0, 11417.0], [73.0, 6362.5], [72.0, 7148.5], [77.0, 19778.0], [81.0, 8293.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 2545.5], [35.0, 25906.0], [34.0, 25906.5], [36.0, 1995.5], [38.0, 3591.5], [39.0, 3817.0], [41.0, 25906.0], [40.0, 25906.0], [43.0, 25906.0], [42.0, 25905.0], [44.0, 25907.0], [45.0, 25905.0], [46.0, 25905.0], [47.0, 25906.0], [49.0, 25906.0], [48.0, 25905.0], [50.0, 25906.0], [51.0, 25906.0], [53.0, 25906.0], [54.0, 25906.0], [55.0, 25906.0], [57.0, 25906.0], [56.0, 25905.0], [58.0, 25906.0], [59.0, 25906.0], [61.0, 25905.0], [60.0, 25906.0], [62.0, 25905.0], [63.0, 638.0], [65.0, 25905.0], [64.0, 25906.0], [67.0, 25905.0], [68.0, 25906.0], [69.0, 25906.0], [70.0, 25905.0], [71.0, 25904.0], [73.0, 25905.0], [72.0, 25906.0], [77.0, 25906.0], [81.0, 25905.5], [16.0, 2946.0], [17.0, 2184.5], [22.0, 3052.0], [23.0, 2291.0], [25.0, 25906.0], [29.0, 737.0], [30.0, 2522.5], [31.0, 266.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 81.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 16.0, "maxY": 19778.0, "series": [{"data": [[16.0, 8870.0], [17.0, 5738.0], [21.0, 3665.0], [22.0, 5836.0], [23.0, 3906.0], [24.0, 2345.5], [25.0, 6857.0], [29.0, 3671.0], [30.0, 7078.5], [31.0, 3893.5], [33.0, 5805.0], [35.0, 10695.5], [34.0, 5257.5], [36.0, 4828.0], [39.0, 4281.0], [38.0, 8554.0], [41.0, 7859.0], [40.0, 7278.5], [43.0, 10028.0], [42.0, 18973.5], [44.0, 9724.0], [45.0, 8369.0], [46.0, 5108.0], [47.0, 18955.0], [49.0, 15916.0], [48.0, 7803.0], [50.0, 6950.0], [51.0, 7102.0], [53.0, 7902.0], [54.0, 10128.0], [55.0, 5867.0], [57.0, 6393.5], [56.0, 7915.0], [58.0, 17033.0], [59.0, 13053.0], [61.0, 8148.0], [60.0, 16944.5], [62.0, 4909.0], [63.0, 7684.0], [65.0, 8857.0], [64.0, 8745.0], [67.0, 6523.0], [68.0, 8233.5], [69.0, 16971.0], [70.0, 5637.0], [71.0, 11417.0], [73.0, 6362.5], [72.0, 7148.5], [77.0, 19778.0], [81.0, 8293.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 0.0], [35.0, 0.0], [34.0, 0.0], [36.0, 0.0], [38.0, 0.0], [39.0, 0.0], [41.0, 0.0], [40.0, 0.0], [43.0, 0.0], [42.0, 0.0], [44.0, 0.0], [45.0, 0.0], [46.0, 0.0], [47.0, 0.0], [49.0, 0.0], [48.0, 0.0], [50.0, 0.0], [51.0, 0.0], [53.0, 0.0], [54.0, 0.0], [55.0, 0.0], [57.0, 0.0], [56.0, 0.0], [58.0, 0.0], [59.0, 0.0], [61.0, 0.0], [60.0, 0.0], [62.0, 0.0], [63.0, 0.0], [65.0, 0.0], [64.0, 0.0], [67.0, 0.0], [68.0, 0.0], [69.0, 0.0], [70.0, 0.0], [71.0, 0.0], [73.0, 0.0], [72.0, 0.0], [77.0, 0.0], [81.0, 0.0], [16.0, 0.0], [17.0, 0.0], [22.0, 0.0], [23.0, 0.0], [25.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 81.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.4, "minX": 1.64618717E12, "maxY": 73.0, "series": [{"data": [[1.64618721E12, 54.5], [1.6461872E12, 53.1], [1.64618723E12, 56.8], [1.64618722E12, 54.8], [1.64618725E12, 62.9], [1.64618724E12, 58.2], [1.64618727E12, 73.0], [1.64618726E12, 69.3], [1.64618717E12, 12.4], [1.64618719E12, 52.8], [1.64618718E12, 52.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64618727E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.64618717E12, "maxY": 44.1, "series": [{"data": [[1.64618721E12, 39.9], [1.64618723E12, 37.5], [1.64618725E12, 36.7], [1.64618727E12, 33.0], [1.64618729E12, 36.3], [1.64618718E12, 30.8], [1.6461872E12, 39.2], [1.64618722E12, 38.0], [1.64618724E12, 35.9], [1.64618726E12, 38.0], [1.64618728E12, 36.7], [1.6461873E12, 11.1], [1.64618717E12, 3.1], [1.64618719E12, 44.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64618723E12, 9.3], [1.64618722E12, 4.1], [1.64618725E12, 17.1], [1.64618724E12, 15.6], [1.64618727E12, 23.0], [1.64618726E12, 20.8], [1.64618729E12, 12.6], [1.64618728E12, 23.4]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.64618718E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.64618721E12, 1.0], [1.6461872E12, 1.0], [1.64618723E12, 1.4], [1.64618722E12, 1.3], [1.64618725E12, 1.4], [1.64618724E12, 1.2], [1.64618727E12, 1.7], [1.64618726E12, 1.6], [1.64618729E12, 0.5], [1.64618728E12, 1.3], [1.64618719E12, 1.0], [1.64618718E12, 0.3]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.6461873E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.64618717E12, "maxY": 44.1, "series": [{"data": [[1.64618721E12, 1.0], [1.6461872E12, 1.0], [1.64618723E12, 10.7], [1.64618722E12, 5.4], [1.64618725E12, 18.5], [1.64618724E12, 16.8], [1.64618727E12, 24.7], [1.64618726E12, 22.4], [1.64618729E12, 13.1], [1.64618728E12, 24.7], [1.64618719E12, 1.0], [1.64618718E12, 0.4]], "isOverall": false, "label": "Plot and download-failure", "isController": false}, {"data": [[1.64618721E12, 39.9], [1.64618723E12, 37.5], [1.64618725E12, 36.7], [1.64618727E12, 33.0], [1.64618729E12, 36.3], [1.64618718E12, 30.8], [1.6461872E12, 39.2], [1.64618722E12, 38.0], [1.64618724E12, 35.9], [1.64618726E12, 38.0], [1.64618728E12, 36.7], [1.6461873E12, 11.1], [1.64618717E12, 3.1], [1.64618719E12, 44.1]], "isOverall": false, "label": "Plot and download-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6461873E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.64618717E12, "maxY": 44.1, "series": [{"data": [[1.64618721E12, 39.9], [1.64618723E12, 37.5], [1.64618725E12, 36.7], [1.64618727E12, 33.0], [1.64618729E12, 36.3], [1.64618718E12, 30.8], [1.6461872E12, 39.2], [1.64618722E12, 38.0], [1.64618724E12, 35.9], [1.64618726E12, 38.0], [1.64618728E12, 36.7], [1.6461873E12, 11.1], [1.64618717E12, 3.1], [1.64618719E12, 44.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64618721E12, 1.0], [1.6461872E12, 1.0], [1.64618723E12, 10.7], [1.64618722E12, 5.4], [1.64618725E12, 18.5], [1.64618724E12, 16.8], [1.64618727E12, 24.7], [1.64618726E12, 22.4], [1.64618729E12, 13.1], [1.64618728E12, 24.7], [1.64618719E12, 1.0], [1.64618718E12, 0.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.6461873E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

