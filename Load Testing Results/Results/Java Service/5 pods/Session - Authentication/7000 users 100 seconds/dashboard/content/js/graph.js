/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 4240.0, "series": [{"data": [[0.0, 7.0], [0.1, 8.0], [0.2, 8.0], [0.3, 8.0], [0.4, 8.0], [0.5, 8.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 9.0], [1.9, 9.0], [2.0, 9.0], [2.1, 9.0], [2.2, 9.0], [2.3, 9.0], [2.4, 9.0], [2.5, 9.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 9.0], [3.1, 9.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 9.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 9.0], [4.6, 9.0], [4.7, 9.0], [4.8, 9.0], [4.9, 9.0], [5.0, 10.0], [5.1, 10.0], [5.2, 10.0], [5.3, 10.0], [5.4, 10.0], [5.5, 10.0], [5.6, 10.0], [5.7, 10.0], [5.8, 10.0], [5.9, 10.0], [6.0, 10.0], [6.1, 10.0], [6.2, 10.0], [6.3, 10.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 10.0], [6.9, 10.0], [7.0, 10.0], [7.1, 10.0], [7.2, 10.0], [7.3, 10.0], [7.4, 10.0], [7.5, 10.0], [7.6, 11.0], [7.7, 11.0], [7.8, 11.0], [7.9, 11.0], [8.0, 11.0], [8.1, 11.0], [8.2, 11.0], [8.3, 11.0], [8.4, 11.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 12.0], [9.3, 12.0], [9.4, 12.0], [9.5, 12.0], [9.6, 12.0], [9.7, 12.0], [9.8, 12.0], [9.9, 12.0], [10.0, 13.0], [10.1, 13.0], [10.2, 13.0], [10.3, 13.0], [10.4, 13.0], [10.5, 13.0], [10.6, 13.0], [10.7, 13.0], [10.8, 13.0], [10.9, 13.0], [11.0, 14.0], [11.1, 14.0], [11.2, 14.0], [11.3, 14.0], [11.4, 14.0], [11.5, 14.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 14.0], [12.1, 14.0], [12.2, 14.0], [12.3, 14.0], [12.4, 14.0], [12.5, 14.0], [12.6, 14.0], [12.7, 14.0], [12.8, 14.0], [12.9, 14.0], [13.0, 14.0], [13.1, 14.0], [13.2, 14.0], [13.3, 14.0], [13.4, 14.0], [13.5, 14.0], [13.6, 15.0], [13.7, 15.0], [13.8, 15.0], [13.9, 15.0], [14.0, 15.0], [14.1, 15.0], [14.2, 15.0], [14.3, 15.0], [14.4, 15.0], [14.5, 15.0], [14.6, 15.0], [14.7, 15.0], [14.8, 15.0], [14.9, 15.0], [15.0, 15.0], [15.1, 15.0], [15.2, 15.0], [15.3, 15.0], [15.4, 15.0], [15.5, 15.0], [15.6, 15.0], [15.7, 15.0], [15.8, 15.0], [15.9, 15.0], [16.0, 15.0], [16.1, 15.0], [16.2, 15.0], [16.3, 16.0], [16.4, 16.0], [16.5, 16.0], [16.6, 16.0], [16.7, 16.0], [16.8, 16.0], [16.9, 16.0], [17.0, 16.0], [17.1, 16.0], [17.2, 16.0], [17.3, 16.0], [17.4, 16.0], [17.5, 16.0], [17.6, 16.0], [17.7, 16.0], [17.8, 16.0], [17.9, 16.0], [18.0, 16.0], [18.1, 16.0], [18.2, 16.0], [18.3, 16.0], [18.4, 17.0], [18.5, 17.0], [18.6, 17.0], [18.7, 17.0], [18.8, 17.0], [18.9, 17.0], [19.0, 17.0], [19.1, 17.0], [19.2, 17.0], [19.3, 17.0], [19.4, 17.0], [19.5, 17.0], [19.6, 17.0], [19.7, 17.0], [19.8, 17.0], [19.9, 17.0], [20.0, 18.0], [20.1, 18.0], [20.2, 18.0], [20.3, 18.0], [20.4, 18.0], [20.5, 18.0], [20.6, 18.0], [20.7, 18.0], [20.8, 18.0], [20.9, 18.0], [21.0, 18.0], [21.1, 18.0], [21.2, 18.0], [21.3, 18.0], [21.4, 18.0], [21.5, 18.0], [21.6, 19.0], [21.7, 19.0], [21.8, 19.0], [21.9, 19.0], [22.0, 19.0], [22.1, 19.0], [22.2, 19.0], [22.3, 19.0], [22.4, 19.0], [22.5, 19.0], [22.6, 19.0], [22.7, 19.0], [22.8, 19.0], [22.9, 19.0], [23.0, 19.0], [23.1, 19.0], [23.2, 19.0], [23.3, 19.0], [23.4, 19.0], [23.5, 19.0], [23.6, 20.0], [23.7, 20.0], [23.8, 20.0], [23.9, 20.0], [24.0, 20.0], [24.1, 20.0], [24.2, 20.0], [24.3, 20.0], [24.4, 20.0], [24.5, 20.0], [24.6, 20.0], [24.7, 20.0], [24.8, 20.0], [24.9, 20.0], [25.0, 20.0], [25.1, 20.0], [25.2, 20.0], [25.3, 20.0], [25.4, 20.0], [25.5, 20.0], [25.6, 20.0], [25.7, 21.0], [25.8, 21.0], [25.9, 21.0], [26.0, 21.0], [26.1, 21.0], [26.2, 21.0], [26.3, 21.0], [26.4, 21.0], [26.5, 21.0], [26.6, 21.0], [26.7, 21.0], [26.8, 21.0], [26.9, 21.0], [27.0, 21.0], [27.1, 21.0], [27.2, 21.0], [27.3, 21.0], [27.4, 21.0], [27.5, 21.0], [27.6, 21.0], [27.7, 21.0], [27.8, 21.0], [27.9, 21.0], [28.0, 21.0], [28.1, 21.0], [28.2, 21.0], [28.3, 21.0], [28.4, 21.0], [28.5, 21.0], [28.6, 21.0], [28.7, 21.0], [28.8, 21.0], [28.9, 21.0], [29.0, 21.0], [29.1, 21.0], [29.2, 22.0], [29.3, 22.0], [29.4, 22.0], [29.5, 22.0], [29.6, 22.0], [29.7, 22.0], [29.8, 22.0], [29.9, 22.0], [30.0, 22.0], [30.1, 22.0], [30.2, 22.0], [30.3, 22.0], [30.4, 22.0], [30.5, 22.0], [30.6, 22.0], [30.7, 22.0], [30.8, 22.0], [30.9, 22.0], [31.0, 22.0], [31.1, 22.0], [31.2, 22.0], [31.3, 22.0], [31.4, 22.0], [31.5, 22.0], [31.6, 22.0], [31.7, 22.0], [31.8, 22.0], [31.9, 22.0], [32.0, 22.0], [32.1, 22.0], [32.2, 22.0], [32.3, 22.0], [32.4, 22.0], [32.5, 22.0], [32.6, 22.0], [32.7, 22.0], [32.8, 22.0], [32.9, 22.0], [33.0, 22.0], [33.1, 22.0], [33.2, 22.0], [33.3, 22.0], [33.4, 22.0], [33.5, 22.0], [33.6, 23.0], [33.7, 23.0], [33.8, 23.0], [33.9, 23.0], [34.0, 23.0], [34.1, 23.0], [34.2, 23.0], [34.3, 23.0], [34.4, 23.0], [34.5, 23.0], [34.6, 23.0], [34.7, 23.0], [34.8, 23.0], [34.9, 23.0], [35.0, 23.0], [35.1, 23.0], [35.2, 23.0], [35.3, 23.0], [35.4, 23.0], [35.5, 23.0], [35.6, 23.0], [35.7, 23.0], [35.8, 23.0], [35.9, 23.0], [36.0, 23.0], [36.1, 23.0], [36.2, 23.0], [36.3, 23.0], [36.4, 23.0], [36.5, 23.0], [36.6, 23.0], [36.7, 23.0], [36.8, 23.0], [36.9, 23.0], [37.0, 23.0], [37.1, 23.0], [37.2, 23.0], [37.3, 23.0], [37.4, 24.0], [37.5, 24.0], [37.6, 24.0], [37.7, 24.0], [37.8, 24.0], [37.9, 24.0], [38.0, 24.0], [38.1, 24.0], [38.2, 24.0], [38.3, 24.0], [38.4, 24.0], [38.5, 24.0], [38.6, 24.0], [38.7, 24.0], [38.8, 24.0], [38.9, 24.0], [39.0, 24.0], [39.1, 24.0], [39.2, 24.0], [39.3, 24.0], [39.4, 24.0], [39.5, 24.0], [39.6, 24.0], [39.7, 24.0], [39.8, 24.0], [39.9, 24.0], [40.0, 24.0], [40.1, 24.0], [40.2, 24.0], [40.3, 24.0], [40.4, 24.0], [40.5, 24.0], [40.6, 24.0], [40.7, 24.0], [40.8, 24.0], [40.9, 24.0], [41.0, 24.0], [41.1, 24.0], [41.2, 24.0], [41.3, 24.0], [41.4, 24.0], [41.5, 24.0], [41.6, 24.0], [41.7, 24.0], [41.8, 25.0], [41.9, 25.0], [42.0, 25.0], [42.1, 25.0], [42.2, 25.0], [42.3, 25.0], [42.4, 25.0], [42.5, 25.0], [42.6, 25.0], [42.7, 25.0], [42.8, 25.0], [42.9, 25.0], [43.0, 25.0], [43.1, 25.0], [43.2, 25.0], [43.3, 25.0], [43.4, 25.0], [43.5, 25.0], [43.6, 25.0], [43.7, 25.0], [43.8, 25.0], [43.9, 25.0], [44.0, 25.0], [44.1, 25.0], [44.2, 25.0], [44.3, 25.0], [44.4, 25.0], [44.5, 25.0], [44.6, 25.0], [44.7, 25.0], [44.8, 25.0], [44.9, 25.0], [45.0, 25.0], [45.1, 25.0], [45.2, 25.0], [45.3, 25.0], [45.4, 25.0], [45.5, 25.0], [45.6, 25.0], [45.7, 25.0], [45.8, 25.0], [45.9, 25.0], [46.0, 25.0], [46.1, 26.0], [46.2, 26.0], [46.3, 26.0], [46.4, 26.0], [46.5, 26.0], [46.6, 26.0], [46.7, 26.0], [46.8, 26.0], [46.9, 26.0], [47.0, 26.0], [47.1, 26.0], [47.2, 26.0], [47.3, 26.0], [47.4, 26.0], [47.5, 26.0], [47.6, 26.0], [47.7, 26.0], [47.8, 26.0], [47.9, 26.0], [48.0, 26.0], [48.1, 26.0], [48.2, 26.0], [48.3, 26.0], [48.4, 26.0], [48.5, 26.0], [48.6, 26.0], [48.7, 26.0], [48.8, 26.0], [48.9, 26.0], [49.0, 26.0], [49.1, 26.0], [49.2, 26.0], [49.3, 26.0], [49.4, 26.0], [49.5, 26.0], [49.6, 26.0], [49.7, 26.0], [49.8, 26.0], [49.9, 26.0], [50.0, 26.0], [50.1, 27.0], [50.2, 27.0], [50.3, 27.0], [50.4, 27.0], [50.5, 27.0], [50.6, 27.0], [50.7, 27.0], [50.8, 27.0], [50.9, 27.0], [51.0, 27.0], [51.1, 27.0], [51.2, 27.0], [51.3, 27.0], [51.4, 27.0], [51.5, 27.0], [51.6, 27.0], [51.7, 27.0], [51.8, 27.0], [51.9, 27.0], [52.0, 27.0], [52.1, 27.0], [52.2, 27.0], [52.3, 27.0], [52.4, 27.0], [52.5, 27.0], [52.6, 27.0], [52.7, 27.0], [52.8, 27.0], [52.9, 27.0], [53.0, 27.0], [53.1, 27.0], [53.2, 27.0], [53.3, 27.0], [53.4, 27.0], [53.5, 28.0], [53.6, 28.0], [53.7, 28.0], [53.8, 28.0], [53.9, 28.0], [54.0, 28.0], [54.1, 28.0], [54.2, 28.0], [54.3, 28.0], [54.4, 28.0], [54.5, 28.0], [54.6, 28.0], [54.7, 28.0], [54.8, 28.0], [54.9, 28.0], [55.0, 28.0], [55.1, 28.0], [55.2, 28.0], [55.3, 28.0], [55.4, 28.0], [55.5, 28.0], [55.6, 28.0], [55.7, 28.0], [55.8, 28.0], [55.9, 28.0], [56.0, 28.0], [56.1, 29.0], [56.2, 29.0], [56.3, 29.0], [56.4, 29.0], [56.5, 29.0], [56.6, 29.0], [56.7, 29.0], [56.8, 29.0], [56.9, 29.0], [57.0, 29.0], [57.1, 29.0], [57.2, 29.0], [57.3, 29.0], [57.4, 29.0], [57.5, 29.0], [57.6, 29.0], [57.7, 29.0], [57.8, 29.0], [57.9, 29.0], [58.0, 29.0], [58.1, 30.0], [58.2, 30.0], [58.3, 30.0], [58.4, 30.0], [58.5, 30.0], [58.6, 30.0], [58.7, 30.0], [58.8, 30.0], [58.9, 30.0], [59.0, 30.0], [59.1, 31.0], [59.2, 31.0], [59.3, 31.0], [59.4, 31.0], [59.5, 31.0], [59.6, 32.0], [59.7, 32.0], [59.8, 32.0], [59.9, 32.0], [60.0, 33.0], [60.1, 33.0], [60.2, 33.0], [60.3, 34.0], [60.4, 34.0], [60.5, 34.0], [60.6, 35.0], [60.7, 35.0], [60.8, 35.0], [60.9, 35.0], [61.0, 36.0], [61.1, 36.0], [61.2, 37.0], [61.3, 37.0], [61.4, 37.0], [61.5, 38.0], [61.6, 38.0], [61.7, 39.0], [61.8, 39.0], [61.9, 40.0], [62.0, 40.0], [62.1, 41.0], [62.2, 41.0], [62.3, 41.0], [62.4, 42.0], [62.5, 42.0], [62.6, 43.0], [62.7, 43.0], [62.8, 44.0], [62.9, 44.0], [63.0, 45.0], [63.1, 45.0], [63.2, 46.0], [63.3, 46.0], [63.4, 47.0], [63.5, 47.0], [63.6, 47.0], [63.7, 48.0], [63.8, 49.0], [63.9, 49.0], [64.0, 50.0], [64.1, 50.0], [64.2, 51.0], [64.3, 51.0], [64.4, 52.0], [64.5, 52.0], [64.6, 52.0], [64.7, 53.0], [64.8, 54.0], [64.9, 54.0], [65.0, 55.0], [65.1, 55.0], [65.2, 56.0], [65.3, 57.0], [65.4, 57.0], [65.5, 59.0], [65.6, 60.0], [65.7, 61.0], [65.8, 62.0], [65.9, 63.0], [66.0, 64.0], [66.1, 64.0], [66.2, 65.0], [66.3, 66.0], [66.4, 67.0], [66.5, 68.0], [66.6, 71.0], [66.7, 71.0], [66.8, 72.0], [66.9, 73.0], [67.0, 74.0], [67.1, 75.0], [67.2, 76.0], [67.3, 77.0], [67.4, 77.0], [67.5, 79.0], [67.6, 79.0], [67.7, 80.0], [67.8, 81.0], [67.9, 83.0], [68.0, 85.0], [68.1, 86.0], [68.2, 88.0], [68.3, 89.0], [68.4, 91.0], [68.5, 93.0], [68.6, 94.0], [68.7, 96.0], [68.8, 99.0], [68.9, 101.0], [69.0, 102.0], [69.1, 103.0], [69.2, 104.0], [69.3, 105.0], [69.4, 107.0], [69.5, 109.0], [69.6, 109.0], [69.7, 111.0], [69.8, 112.0], [69.9, 114.0], [70.0, 115.0], [70.1, 117.0], [70.2, 119.0], [70.3, 120.0], [70.4, 122.0], [70.5, 124.0], [70.6, 125.0], [70.7, 125.0], [70.8, 127.0], [70.9, 129.0], [71.0, 130.0], [71.1, 131.0], [71.2, 132.0], [71.3, 133.0], [71.4, 134.0], [71.5, 136.0], [71.6, 138.0], [71.7, 140.0], [71.8, 141.0], [71.9, 142.0], [72.0, 144.0], [72.1, 146.0], [72.2, 147.0], [72.3, 149.0], [72.4, 150.0], [72.5, 152.0], [72.6, 153.0], [72.7, 154.0], [72.8, 156.0], [72.9, 159.0], [73.0, 160.0], [73.1, 161.0], [73.2, 163.0], [73.3, 165.0], [73.4, 166.0], [73.5, 169.0], [73.6, 171.0], [73.7, 172.0], [73.8, 173.0], [73.9, 174.0], [74.0, 176.0], [74.1, 177.0], [74.2, 179.0], [74.3, 180.0], [74.4, 183.0], [74.5, 185.0], [74.6, 186.0], [74.7, 187.0], [74.8, 189.0], [74.9, 190.0], [75.0, 190.0], [75.1, 194.0], [75.2, 196.0], [75.3, 197.0], [75.4, 199.0], [75.5, 200.0], [75.6, 203.0], [75.7, 204.0], [75.8, 206.0], [75.9, 206.0], [76.0, 209.0], [76.1, 212.0], [76.2, 214.0], [76.3, 216.0], [76.4, 217.0], [76.5, 218.0], [76.6, 220.0], [76.7, 221.0], [76.8, 223.0], [76.9, 225.0], [77.0, 227.0], [77.1, 230.0], [77.2, 232.0], [77.3, 235.0], [77.4, 236.0], [77.5, 239.0], [77.6, 243.0], [77.7, 244.0], [77.8, 246.0], [77.9, 250.0], [78.0, 254.0], [78.1, 256.0], [78.2, 260.0], [78.3, 262.0], [78.4, 268.0], [78.5, 271.0], [78.6, 275.0], [78.7, 278.0], [78.8, 281.0], [78.9, 283.0], [79.0, 285.0], [79.1, 289.0], [79.2, 290.0], [79.3, 293.0], [79.4, 294.0], [79.5, 296.0], [79.6, 298.0], [79.7, 302.0], [79.8, 305.0], [79.9, 307.0], [80.0, 309.0], [80.1, 310.0], [80.2, 312.0], [80.3, 314.0], [80.4, 316.0], [80.5, 319.0], [80.6, 322.0], [80.7, 322.0], [80.8, 326.0], [80.9, 329.0], [81.0, 331.0], [81.1, 334.0], [81.2, 336.0], [81.3, 339.0], [81.4, 340.0], [81.5, 342.0], [81.6, 344.0], [81.7, 347.0], [81.8, 351.0], [81.9, 352.0], [82.0, 353.0], [82.1, 356.0], [82.2, 358.0], [82.3, 360.0], [82.4, 363.0], [82.5, 365.0], [82.6, 367.0], [82.7, 371.0], [82.8, 373.0], [82.9, 376.0], [83.0, 381.0], [83.1, 383.0], [83.2, 385.0], [83.3, 387.0], [83.4, 390.0], [83.5, 394.0], [83.6, 398.0], [83.7, 402.0], [83.8, 406.0], [83.9, 411.0], [84.0, 416.0], [84.1, 419.0], [84.2, 423.0], [84.3, 427.0], [84.4, 432.0], [84.5, 435.0], [84.6, 440.0], [84.7, 443.0], [84.8, 446.0], [84.9, 449.0], [85.0, 455.0], [85.1, 462.0], [85.2, 465.0], [85.3, 471.0], [85.4, 479.0], [85.5, 485.0], [85.6, 493.0], [85.7, 497.0], [85.8, 505.0], [85.9, 510.0], [86.0, 515.0], [86.1, 525.0], [86.2, 531.0], [86.3, 539.0], [86.4, 546.0], [86.5, 553.0], [86.6, 565.0], [86.7, 571.0], [86.8, 579.0], [86.9, 584.0], [87.0, 589.0], [87.1, 595.0], [87.2, 602.0], [87.3, 608.0], [87.4, 618.0], [87.5, 620.0], [87.6, 622.0], [87.7, 628.0], [87.8, 632.0], [87.9, 636.0], [88.0, 645.0], [88.1, 653.0], [88.2, 657.0], [88.3, 663.0], [88.4, 670.0], [88.5, 673.0], [88.6, 681.0], [88.7, 685.0], [88.8, 694.0], [88.9, 702.0], [89.0, 710.0], [89.1, 715.0], [89.2, 720.0], [89.3, 731.0], [89.4, 737.0], [89.5, 752.0], [89.6, 766.0], [89.7, 788.0], [89.8, 821.0], [89.9, 858.0], [90.0, 882.0], [90.1, 911.0], [90.2, 927.0], [90.3, 945.0], [90.4, 964.0], [90.5, 977.0], [90.6, 996.0], [90.7, 1011.0], [90.8, 1032.0], [90.9, 1047.0], [91.0, 1064.0], [91.1, 1084.0], [91.2, 1103.0], [91.3, 1111.0], [91.4, 1126.0], [91.5, 1137.0], [91.6, 1152.0], [91.7, 1156.0], [91.8, 1161.0], [91.9, 1169.0], [92.0, 1183.0], [92.1, 1189.0], [92.2, 1197.0], [92.3, 1205.0], [92.4, 1215.0], [92.5, 1222.0], [92.6, 1230.0], [92.7, 1233.0], [92.8, 1240.0], [92.9, 1250.0], [93.0, 1261.0], [93.1, 1268.0], [93.2, 1280.0], [93.3, 1292.0], [93.4, 1302.0], [93.5, 1321.0], [93.6, 1329.0], [93.7, 1343.0], [93.8, 1360.0], [93.9, 1379.0], [94.0, 1390.0], [94.1, 1402.0], [94.2, 1412.0], [94.3, 1430.0], [94.4, 1442.0], [94.5, 1459.0], [94.6, 1470.0], [94.7, 1479.0], [94.8, 1488.0], [94.9, 1504.0], [95.0, 1518.0], [95.1, 1529.0], [95.2, 1540.0], [95.3, 1553.0], [95.4, 1567.0], [95.5, 1584.0], [95.6, 1599.0], [95.7, 1615.0], [95.8, 1628.0], [95.9, 1643.0], [96.0, 1653.0], [96.1, 1669.0], [96.2, 1678.0], [96.3, 1691.0], [96.4, 1696.0], [96.5, 1711.0], [96.6, 1726.0], [96.7, 1751.0], [96.8, 1774.0], [96.9, 1819.0], [97.0, 1919.0], [97.1, 2019.0], [97.2, 2035.0], [97.3, 2060.0], [97.4, 2082.0], [97.5, 2121.0], [97.6, 2150.0], [97.7, 2168.0], [97.8, 2209.0], [97.9, 2283.0], [98.0, 2292.0], [98.1, 2299.0], [98.2, 2321.0], [98.3, 2335.0], [98.4, 2352.0], [98.5, 2357.0], [98.6, 2381.0], [98.7, 2773.0], [98.8, 2806.0], [98.9, 2815.0], [99.0, 2856.0], [99.1, 3070.0], [99.2, 3081.0], [99.3, 3092.0], [99.4, 3105.0], [99.5, 3116.0], [99.6, 3132.0], [99.7, 4147.0], [99.8, 4150.0], [99.9, 4183.0], [100.0, 4240.0]], "isOverall": false, "label": "User Registration - SSO", "isController": false}, {"data": [[0.0, 6.0], [0.1, 6.0], [0.2, 6.0], [0.3, 6.0], [0.4, 6.0], [0.5, 6.0], [0.6, 6.0], [0.7, 6.0], [0.8, 6.0], [0.9, 6.0], [1.0, 6.0], [1.1, 6.0], [1.2, 6.0], [1.3, 6.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 7.0], [1.9, 7.0], [2.0, 7.0], [2.1, 7.0], [2.2, 7.0], [2.3, 7.0], [2.4, 7.0], [2.5, 7.0], [2.6, 7.0], [2.7, 7.0], [2.8, 7.0], [2.9, 7.0], [3.0, 7.0], [3.1, 7.0], [3.2, 7.0], [3.3, 7.0], [3.4, 7.0], [3.5, 7.0], [3.6, 7.0], [3.7, 7.0], [3.8, 7.0], [3.9, 7.0], [4.0, 7.0], [4.1, 7.0], [4.2, 7.0], [4.3, 7.0], [4.4, 7.0], [4.5, 7.0], [4.6, 7.0], [4.7, 7.0], [4.8, 7.0], [4.9, 7.0], [5.0, 7.0], [5.1, 7.0], [5.2, 7.0], [5.3, 7.0], [5.4, 7.0], [5.5, 7.0], [5.6, 7.0], [5.7, 7.0], [5.8, 7.0], [5.9, 7.0], [6.0, 7.0], [6.1, 7.0], [6.2, 7.0], [6.3, 7.0], [6.4, 7.0], [6.5, 7.0], [6.6, 7.0], [6.7, 7.0], [6.8, 7.0], [6.9, 7.0], [7.0, 7.0], [7.1, 7.0], [7.2, 7.0], [7.3, 7.0], [7.4, 7.0], [7.5, 7.0], [7.6, 7.0], [7.7, 7.0], [7.8, 7.0], [7.9, 7.0], [8.0, 7.0], [8.1, 7.0], [8.2, 7.0], [8.3, 7.0], [8.4, 7.0], [8.5, 7.0], [8.6, 7.0], [8.7, 7.0], [8.8, 7.0], [8.9, 7.0], [9.0, 7.0], [9.1, 7.0], [9.2, 7.0], [9.3, 7.0], [9.4, 7.0], [9.5, 7.0], [9.6, 7.0], [9.7, 7.0], [9.8, 7.0], [9.9, 7.0], [10.0, 7.0], [10.1, 7.0], [10.2, 7.0], [10.3, 7.0], [10.4, 7.0], [10.5, 7.0], [10.6, 7.0], [10.7, 7.0], [10.8, 7.0], [10.9, 7.0], [11.0, 7.0], [11.1, 7.0], [11.2, 7.0], [11.3, 7.0], [11.4, 7.0], [11.5, 7.0], [11.6, 7.0], [11.7, 7.0], [11.8, 7.0], [11.9, 7.0], [12.0, 7.0], [12.1, 7.0], [12.2, 7.0], [12.3, 7.0], [12.4, 7.0], [12.5, 7.0], [12.6, 7.0], [12.7, 7.0], [12.8, 7.0], [12.9, 7.0], [13.0, 7.0], [13.1, 7.0], [13.2, 7.0], [13.3, 7.0], [13.4, 7.0], [13.5, 7.0], [13.6, 7.0], [13.7, 7.0], [13.8, 7.0], [13.9, 7.0], [14.0, 7.0], [14.1, 7.0], [14.2, 7.0], [14.3, 7.0], [14.4, 7.0], [14.5, 7.0], [14.6, 7.0], [14.7, 7.0], [14.8, 8.0], [14.9, 8.0], [15.0, 8.0], [15.1, 8.0], [15.2, 8.0], [15.3, 8.0], [15.4, 8.0], [15.5, 8.0], [15.6, 8.0], [15.7, 8.0], [15.8, 8.0], [15.9, 8.0], [16.0, 8.0], [16.1, 8.0], [16.2, 8.0], [16.3, 8.0], [16.4, 8.0], [16.5, 8.0], [16.6, 8.0], [16.7, 8.0], [16.8, 8.0], [16.9, 8.0], [17.0, 8.0], [17.1, 8.0], [17.2, 8.0], [17.3, 8.0], [17.4, 8.0], [17.5, 8.0], [17.6, 8.0], [17.7, 8.0], [17.8, 8.0], [17.9, 8.0], [18.0, 8.0], [18.1, 8.0], [18.2, 8.0], [18.3, 8.0], [18.4, 8.0], [18.5, 8.0], [18.6, 8.0], [18.7, 8.0], [18.8, 8.0], [18.9, 8.0], [19.0, 8.0], [19.1, 8.0], [19.2, 8.0], [19.3, 8.0], [19.4, 8.0], [19.5, 8.0], [19.6, 8.0], [19.7, 8.0], [19.8, 8.0], [19.9, 8.0], [20.0, 8.0], [20.1, 8.0], [20.2, 8.0], [20.3, 8.0], [20.4, 8.0], [20.5, 8.0], [20.6, 8.0], [20.7, 8.0], [20.8, 8.0], [20.9, 8.0], [21.0, 8.0], [21.1, 8.0], [21.2, 8.0], [21.3, 8.0], [21.4, 8.0], [21.5, 8.0], [21.6, 8.0], [21.7, 8.0], [21.8, 8.0], [21.9, 8.0], [22.0, 8.0], [22.1, 8.0], [22.2, 8.0], [22.3, 8.0], [22.4, 8.0], [22.5, 8.0], [22.6, 8.0], [22.7, 8.0], [22.8, 8.0], [22.9, 8.0], [23.0, 8.0], [23.1, 8.0], [23.2, 8.0], [23.3, 8.0], [23.4, 8.0], [23.5, 8.0], [23.6, 9.0], [23.7, 9.0], [23.8, 9.0], [23.9, 9.0], [24.0, 9.0], [24.1, 9.0], [24.2, 9.0], [24.3, 9.0], [24.4, 9.0], [24.5, 9.0], [24.6, 9.0], [24.7, 9.0], [24.8, 9.0], [24.9, 9.0], [25.0, 9.0], [25.1, 9.0], [25.2, 9.0], [25.3, 9.0], [25.4, 9.0], [25.5, 9.0], [25.6, 9.0], [25.7, 9.0], [25.8, 9.0], [25.9, 9.0], [26.0, 9.0], [26.1, 9.0], [26.2, 9.0], [26.3, 9.0], [26.4, 9.0], [26.5, 9.0], [26.6, 9.0], [26.7, 9.0], [26.8, 9.0], [26.9, 9.0], [27.0, 9.0], [27.1, 9.0], [27.2, 9.0], [27.3, 9.0], [27.4, 9.0], [27.5, 9.0], [27.6, 9.0], [27.7, 9.0], [27.8, 9.0], [27.9, 9.0], [28.0, 10.0], [28.1, 10.0], [28.2, 10.0], [28.3, 10.0], [28.4, 10.0], [28.5, 10.0], [28.6, 10.0], [28.7, 10.0], [28.8, 10.0], [28.9, 10.0], [29.0, 10.0], [29.1, 10.0], [29.2, 10.0], [29.3, 10.0], [29.4, 10.0], [29.5, 10.0], [29.6, 10.0], [29.7, 10.0], [29.8, 10.0], [29.9, 10.0], [30.0, 10.0], [30.1, 11.0], [30.2, 11.0], [30.3, 11.0], [30.4, 11.0], [30.5, 11.0], [30.6, 11.0], [30.7, 11.0], [30.8, 11.0], [30.9, 11.0], [31.0, 11.0], [31.1, 11.0], [31.2, 11.0], [31.3, 11.0], [31.4, 11.0], [31.5, 11.0], [31.6, 12.0], [31.7, 12.0], [31.8, 12.0], [31.9, 12.0], [32.0, 12.0], [32.1, 12.0], [32.2, 12.0], [32.3, 12.0], [32.4, 12.0], [32.5, 12.0], [32.6, 12.0], [32.7, 12.0], [32.8, 12.0], [32.9, 12.0], [33.0, 12.0], [33.1, 12.0], [33.2, 12.0], [33.3, 12.0], [33.4, 13.0], [33.5, 13.0], [33.6, 13.0], [33.7, 13.0], [33.8, 13.0], [33.9, 13.0], [34.0, 13.0], [34.1, 13.0], [34.2, 13.0], [34.3, 13.0], [34.4, 13.0], [34.5, 13.0], [34.6, 13.0], [34.7, 13.0], [34.8, 13.0], [34.9, 14.0], [35.0, 14.0], [35.1, 14.0], [35.2, 14.0], [35.3, 14.0], [35.4, 14.0], [35.5, 14.0], [35.6, 14.0], [35.7, 14.0], [35.8, 14.0], [35.9, 14.0], [36.0, 14.0], [36.1, 14.0], [36.2, 14.0], [36.3, 15.0], [36.4, 15.0], [36.5, 15.0], [36.6, 15.0], [36.7, 15.0], [36.8, 15.0], [36.9, 15.0], [37.0, 15.0], [37.1, 15.0], [37.2, 15.0], [37.3, 15.0], [37.4, 15.0], [37.5, 15.0], [37.6, 15.0], [37.7, 16.0], [37.8, 16.0], [37.9, 16.0], [38.0, 16.0], [38.1, 16.0], [38.2, 16.0], [38.3, 16.0], [38.4, 16.0], [38.5, 16.0], [38.6, 16.0], [38.7, 16.0], [38.8, 16.0], [38.9, 16.0], [39.0, 16.0], [39.1, 16.0], [39.2, 16.0], [39.3, 16.0], [39.4, 17.0], [39.5, 17.0], [39.6, 17.0], [39.7, 17.0], [39.8, 17.0], [39.9, 17.0], [40.0, 17.0], [40.1, 17.0], [40.2, 17.0], [40.3, 17.0], [40.4, 17.0], [40.5, 17.0], [40.6, 17.0], [40.7, 17.0], [40.8, 17.0], [40.9, 18.0], [41.0, 18.0], [41.1, 18.0], [41.2, 18.0], [41.3, 18.0], [41.4, 18.0], [41.5, 18.0], [41.6, 18.0], [41.7, 18.0], [41.8, 18.0], [41.9, 18.0], [42.0, 18.0], [42.1, 18.0], [42.2, 18.0], [42.3, 18.0], [42.4, 19.0], [42.5, 19.0], [42.6, 19.0], [42.7, 19.0], [42.8, 19.0], [42.9, 19.0], [43.0, 19.0], [43.1, 19.0], [43.2, 19.0], [43.3, 19.0], [43.4, 19.0], [43.5, 19.0], [43.6, 19.0], [43.7, 19.0], [43.8, 19.0], [43.9, 19.0], [44.0, 19.0], [44.1, 19.0], [44.2, 19.0], [44.3, 19.0], [44.4, 19.0], [44.5, 19.0], [44.6, 19.0], [44.7, 19.0], [44.8, 19.0], [44.9, 20.0], [45.0, 20.0], [45.1, 20.0], [45.2, 20.0], [45.3, 20.0], [45.4, 20.0], [45.5, 20.0], [45.6, 20.0], [45.7, 20.0], [45.8, 20.0], [45.9, 20.0], [46.0, 20.0], [46.1, 20.0], [46.2, 20.0], [46.3, 20.0], [46.4, 20.0], [46.5, 20.0], [46.6, 20.0], [46.7, 20.0], [46.8, 20.0], [46.9, 20.0], [47.0, 20.0], [47.1, 21.0], [47.2, 21.0], [47.3, 21.0], [47.4, 21.0], [47.5, 21.0], [47.6, 21.0], [47.7, 21.0], [47.8, 21.0], [47.9, 21.0], [48.0, 21.0], [48.1, 21.0], [48.2, 21.0], [48.3, 21.0], [48.4, 21.0], [48.5, 21.0], [48.6, 21.0], [48.7, 21.0], [48.8, 21.0], [48.9, 21.0], [49.0, 21.0], [49.1, 21.0], [49.2, 21.0], [49.3, 21.0], [49.4, 21.0], [49.5, 21.0], [49.6, 21.0], [49.7, 22.0], [49.8, 22.0], [49.9, 22.0], [50.0, 22.0], [50.1, 22.0], [50.2, 22.0], [50.3, 22.0], [50.4, 22.0], [50.5, 22.0], [50.6, 22.0], [50.7, 22.0], [50.8, 22.0], [50.9, 22.0], [51.0, 22.0], [51.1, 22.0], [51.2, 22.0], [51.3, 22.0], [51.4, 22.0], [51.5, 22.0], [51.6, 22.0], [51.7, 22.0], [51.8, 22.0], [51.9, 22.0], [52.0, 22.0], [52.1, 22.0], [52.2, 23.0], [52.3, 23.0], [52.4, 23.0], [52.5, 23.0], [52.6, 23.0], [52.7, 23.0], [52.8, 23.0], [52.9, 23.0], [53.0, 23.0], [53.1, 23.0], [53.2, 23.0], [53.3, 23.0], [53.4, 23.0], [53.5, 23.0], [53.6, 23.0], [53.7, 23.0], [53.8, 23.0], [53.9, 23.0], [54.0, 23.0], [54.1, 23.0], [54.2, 23.0], [54.3, 23.0], [54.4, 24.0], [54.5, 24.0], [54.6, 24.0], [54.7, 24.0], [54.8, 24.0], [54.9, 24.0], [55.0, 24.0], [55.1, 24.0], [55.2, 24.0], [55.3, 24.0], [55.4, 24.0], [55.5, 24.0], [55.6, 24.0], [55.7, 24.0], [55.8, 24.0], [55.9, 24.0], [56.0, 24.0], [56.1, 24.0], [56.2, 24.0], [56.3, 24.0], [56.4, 24.0], [56.5, 24.0], [56.6, 24.0], [56.7, 25.0], [56.8, 25.0], [56.9, 25.0], [57.0, 25.0], [57.1, 25.0], [57.2, 25.0], [57.3, 25.0], [57.4, 25.0], [57.5, 25.0], [57.6, 25.0], [57.7, 25.0], [57.8, 25.0], [57.9, 25.0], [58.0, 25.0], [58.1, 25.0], [58.2, 25.0], [58.3, 25.0], [58.4, 25.0], [58.5, 25.0], [58.6, 26.0], [58.7, 26.0], [58.8, 26.0], [58.9, 26.0], [59.0, 26.0], [59.1, 26.0], [59.2, 26.0], [59.3, 26.0], [59.4, 26.0], [59.5, 26.0], [59.6, 26.0], [59.7, 26.0], [59.8, 26.0], [59.9, 26.0], [60.0, 27.0], [60.1, 27.0], [60.2, 27.0], [60.3, 27.0], [60.4, 27.0], [60.5, 27.0], [60.6, 27.0], [60.7, 27.0], [60.8, 27.0], [60.9, 27.0], [61.0, 27.0], [61.1, 27.0], [61.2, 27.0], [61.3, 28.0], [61.4, 28.0], [61.5, 28.0], [61.6, 28.0], [61.7, 28.0], [61.8, 28.0], [61.9, 28.0], [62.0, 28.0], [62.1, 28.0], [62.2, 29.0], [62.3, 29.0], [62.4, 29.0], [62.5, 29.0], [62.6, 29.0], [62.7, 29.0], [62.8, 30.0], [62.9, 30.0], [63.0, 30.0], [63.1, 30.0], [63.2, 30.0], [63.3, 31.0], [63.4, 31.0], [63.5, 31.0], [63.6, 31.0], [63.7, 32.0], [63.8, 32.0], [63.9, 32.0], [64.0, 32.0], [64.1, 33.0], [64.2, 33.0], [64.3, 33.0], [64.4, 33.0], [64.5, 34.0], [64.6, 34.0], [64.7, 35.0], [64.8, 35.0], [64.9, 35.0], [65.0, 36.0], [65.1, 36.0], [65.2, 37.0], [65.3, 37.0], [65.4, 37.0], [65.5, 38.0], [65.6, 38.0], [65.7, 38.0], [65.8, 39.0], [65.9, 39.0], [66.0, 39.0], [66.1, 40.0], [66.2, 40.0], [66.3, 41.0], [66.4, 41.0], [66.5, 41.0], [66.6, 42.0], [66.7, 42.0], [66.8, 43.0], [66.9, 43.0], [67.0, 44.0], [67.1, 44.0], [67.2, 45.0], [67.3, 45.0], [67.4, 46.0], [67.5, 46.0], [67.6, 47.0], [67.7, 48.0], [67.8, 48.0], [67.9, 48.0], [68.0, 49.0], [68.1, 49.0], [68.2, 50.0], [68.3, 51.0], [68.4, 51.0], [68.5, 52.0], [68.6, 52.0], [68.7, 53.0], [68.8, 54.0], [68.9, 55.0], [69.0, 55.0], [69.1, 56.0], [69.2, 56.0], [69.3, 57.0], [69.4, 58.0], [69.5, 58.0], [69.6, 59.0], [69.7, 60.0], [69.8, 61.0], [69.9, 62.0], [70.0, 63.0], [70.1, 64.0], [70.2, 64.0], [70.3, 65.0], [70.4, 66.0], [70.5, 66.0], [70.6, 67.0], [70.7, 68.0], [70.8, 68.0], [70.9, 69.0], [71.0, 70.0], [71.1, 70.0], [71.2, 71.0], [71.3, 72.0], [71.4, 73.0], [71.5, 74.0], [71.6, 74.0], [71.7, 75.0], [71.8, 76.0], [71.9, 76.0], [72.0, 77.0], [72.1, 77.0], [72.2, 78.0], [72.3, 79.0], [72.4, 79.0], [72.5, 80.0], [72.6, 80.0], [72.7, 81.0], [72.8, 81.0], [72.9, 83.0], [73.0, 83.0], [73.1, 84.0], [73.2, 84.0], [73.3, 85.0], [73.4, 86.0], [73.5, 87.0], [73.6, 87.0], [73.7, 89.0], [73.8, 90.0], [73.9, 91.0], [74.0, 93.0], [74.1, 93.0], [74.2, 94.0], [74.3, 95.0], [74.4, 96.0], [74.5, 97.0], [74.6, 98.0], [74.7, 99.0], [74.8, 100.0], [74.9, 101.0], [75.0, 103.0], [75.1, 104.0], [75.2, 104.0], [75.3, 105.0], [75.4, 107.0], [75.5, 108.0], [75.6, 109.0], [75.7, 110.0], [75.8, 112.0], [75.9, 113.0], [76.0, 114.0], [76.1, 115.0], [76.2, 116.0], [76.3, 117.0], [76.4, 118.0], [76.5, 119.0], [76.6, 119.0], [76.7, 121.0], [76.8, 122.0], [76.9, 124.0], [77.0, 126.0], [77.1, 126.0], [77.2, 127.0], [77.3, 128.0], [77.4, 130.0], [77.5, 131.0], [77.6, 133.0], [77.7, 134.0], [77.8, 134.0], [77.9, 136.0], [78.0, 137.0], [78.1, 139.0], [78.2, 141.0], [78.3, 142.0], [78.4, 142.0], [78.5, 144.0], [78.6, 145.0], [78.7, 146.0], [78.8, 148.0], [78.9, 149.0], [79.0, 150.0], [79.1, 152.0], [79.2, 153.0], [79.3, 156.0], [79.4, 157.0], [79.5, 158.0], [79.6, 160.0], [79.7, 161.0], [79.8, 163.0], [79.9, 163.0], [80.0, 165.0], [80.1, 166.0], [80.2, 166.0], [80.3, 167.0], [80.4, 168.0], [80.5, 169.0], [80.6, 171.0], [80.7, 172.0], [80.8, 174.0], [80.9, 175.0], [81.0, 176.0], [81.1, 177.0], [81.2, 180.0], [81.3, 181.0], [81.4, 183.0], [81.5, 186.0], [81.6, 187.0], [81.7, 188.0], [81.8, 191.0], [81.9, 193.0], [82.0, 196.0], [82.1, 198.0], [82.2, 199.0], [82.3, 201.0], [82.4, 204.0], [82.5, 206.0], [82.6, 209.0], [82.7, 212.0], [82.8, 216.0], [82.9, 219.0], [83.0, 221.0], [83.1, 222.0], [83.2, 223.0], [83.3, 226.0], [83.4, 229.0], [83.5, 232.0], [83.6, 237.0], [83.7, 240.0], [83.8, 243.0], [83.9, 245.0], [84.0, 246.0], [84.1, 249.0], [84.2, 250.0], [84.3, 252.0], [84.4, 253.0], [84.5, 255.0], [84.6, 258.0], [84.7, 260.0], [84.8, 262.0], [84.9, 264.0], [85.0, 266.0], [85.1, 270.0], [85.2, 273.0], [85.3, 276.0], [85.4, 283.0], [85.5, 286.0], [85.6, 288.0], [85.7, 292.0], [85.8, 295.0], [85.9, 298.0], [86.0, 303.0], [86.1, 310.0], [86.2, 316.0], [86.3, 321.0], [86.4, 328.0], [86.5, 332.0], [86.6, 336.0], [86.7, 343.0], [86.8, 356.0], [86.9, 366.0], [87.0, 378.0], [87.1, 390.0], [87.2, 396.0], [87.3, 402.0], [87.4, 403.0], [87.5, 406.0], [87.6, 412.0], [87.7, 415.0], [87.8, 418.0], [87.9, 421.0], [88.0, 423.0], [88.1, 426.0], [88.2, 428.0], [88.3, 431.0], [88.4, 434.0], [88.5, 437.0], [88.6, 442.0], [88.7, 443.0], [88.8, 447.0], [88.9, 451.0], [89.0, 453.0], [89.1, 458.0], [89.2, 463.0], [89.3, 468.0], [89.4, 473.0], [89.5, 479.0], [89.6, 498.0], [89.7, 504.0], [89.8, 506.0], [89.9, 509.0], [90.0, 511.0], [90.1, 514.0], [90.2, 516.0], [90.3, 519.0], [90.4, 523.0], [90.5, 529.0], [90.6, 535.0], [90.7, 545.0], [90.8, 576.0], [90.9, 584.0], [91.0, 597.0], [91.1, 628.0], [91.2, 661.0], [91.3, 726.0], [91.4, 742.0], [91.5, 761.0], [91.6, 769.0], [91.7, 803.0], [91.8, 817.0], [91.9, 824.0], [92.0, 843.0], [92.1, 886.0], [92.2, 911.0], [92.3, 933.0], [92.4, 957.0], [92.5, 986.0], [92.6, 994.0], [92.7, 998.0], [92.8, 1002.0], [92.9, 1010.0], [93.0, 1016.0], [93.1, 1019.0], [93.2, 1026.0], [93.3, 1033.0], [93.4, 1036.0], [93.5, 1041.0], [93.6, 1050.0], [93.7, 1059.0], [93.8, 1066.0], [93.9, 1070.0], [94.0, 1075.0], [94.1, 1080.0], [94.2, 1086.0], [94.3, 1089.0], [94.4, 1092.0], [94.5, 1097.0], [94.6, 1109.0], [94.7, 1113.0], [94.8, 1127.0], [94.9, 1133.0], [95.0, 1147.0], [95.1, 1165.0], [95.2, 1175.0], [95.3, 1227.0], [95.4, 1232.0], [95.5, 1237.0], [95.6, 1276.0], [95.7, 1298.0], [95.8, 1307.0], [95.9, 1313.0], [96.0, 1318.0], [96.1, 1325.0], [96.2, 1328.0], [96.3, 1329.0], [96.4, 1332.0], [96.5, 1335.0], [96.6, 1336.0], [96.7, 1340.0], [96.8, 1346.0], [96.9, 1348.0], [97.0, 1352.0], [97.1, 1358.0], [97.2, 1363.0], [97.3, 1371.0], [97.4, 1376.0], [97.5, 1386.0], [97.6, 1395.0], [97.7, 1404.0], [97.8, 1407.0], [97.9, 1415.0], [98.0, 1430.0], [98.1, 1435.0], [98.2, 1443.0], [98.3, 1448.0], [98.4, 1456.0], [98.5, 1473.0], [98.6, 1753.0], [98.7, 1806.0], [98.8, 1881.0], [98.9, 1886.0], [99.0, 1896.0], [99.1, 1909.0], [99.2, 1928.0], [99.3, 1939.0], [99.4, 1947.0], [99.5, 1958.0], [99.6, 1963.0], [99.7, 1977.0], [99.8, 1994.0], [99.9, 2004.0], [100.0, 4140.0]], "isOverall": false, "label": "User Registration - Local", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 5232.0, "series": [{"data": [[0.0, 4817.0], [600.0, 122.0], [700.0, 60.0], [800.0, 21.0], [900.0, 40.0], [1000.0, 40.0], [1100.0, 73.0], [1200.0, 81.0], [1300.0, 48.0], [1400.0, 53.0], [1500.0, 54.0], [100.0, 462.0], [1600.0, 57.0], [1700.0, 30.0], [1800.0, 10.0], [1900.0, 6.0], [2000.0, 26.0], [2100.0, 24.0], [2200.0, 22.0], [2300.0, 36.0], [2700.0, 9.0], [2800.0, 18.0], [3000.0, 24.0], [3100.0, 20.0], [200.0, 294.0], [4100.0, 25.0], [4200.0, 1.0], [300.0, 280.0], [400.0, 148.0], [500.0, 99.0]], "isOverall": false, "label": "User Registration - SSO", "isController": false}, {"data": [[0.0, 5232.0], [600.0, 20.0], [700.0, 28.0], [2900.0, 1.0], [200.0, 258.0], [800.0, 33.0], [900.0, 43.0], [1000.0, 121.0], [4000.0, 1.0], [4100.0, 1.0], [1100.0, 49.0], [300.0, 93.0], [1200.0, 36.0], [1300.0, 135.0], [1400.0, 61.0], [100.0, 524.0], [400.0, 167.0], [1600.0, 5.0], [1700.0, 6.0], [1800.0, 26.0], [1900.0, 58.0], [500.0, 96.0], [2000.0, 6.0]], "isOverall": false, "label": "User Registration - Local", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12276.0, "series": [{"data": [[0.0, 12276.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1255.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 465.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.178888888888888, "minX": 1.64668822E12, "maxY": 142.95078299776299, "series": [{"data": [[1.64668835E12, 10.006129597197885], [1.64668833E12, 6.770091556459814], [1.64668822E12, 9.740740740740742], [1.64668837E12, 142.95078299776299], [1.64668826E12, 9.704384724186703], [1.64668824E12, 3.597515527950305], [1.6466883E12, 2.178888888888888], [1.64668828E12, 14.634221311475423], [1.64668834E12, 6.375119617224885], [1.64668832E12, 3.8027139874739047], [1.64668823E12, 2.752512562814072], [1.64668836E12, 55.80399274047181], [1.64668827E12, 102.89533417402268], [1.64668825E12, 2.491379310344828], [1.64668831E12, 4.010881392818281], [1.64668829E12, 6.525959367945827]], "isOverall": false, "label": "Team_terra", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64668837E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.773049645390077, "minX": 1.0, "maxY": 3053.1333333333337, "series": [{"data": [[2.0, 23.59283819628648], [3.0, 25.93745704467358], [4.0, 42.78879310344828], [5.0, 57.79699248120302], [6.0, 72.37878787878788], [7.0, 88.19230769230768], [8.0, 111.63265306122452], [9.0, 132.57333333333344], [10.0, 141.2465753424657], [11.0, 148.53012048192767], [12.0, 154.85135135135138], [13.0, 160.6599999999999], [14.0, 187.13953488372096], [15.0, 183.08823529411768], [16.0, 209.5], [17.0, 237.8780487804878], [18.0, 276.4666666666667], [19.0, 288.03846153846155], [20.0, 280.27659574468083], [21.0, 264.92592592592604], [22.0, 282.2205882352942], [23.0, 263.79591836734704], [24.0, 269.6060606060607], [25.0, 336.31249999999994], [26.0, 321.7142857142856], [27.0, 327.72727272727275], [28.0, 365.57142857142856], [29.0, 2406.0232558139537], [30.0, 1047.625], [31.0, 355.1304347826087], [32.0, 412.20000000000005], [33.0, 394.1428571428572], [34.0, 509.1904761904763], [35.0, 458.1538461538462], [36.0, 470.36], [37.0, 414.65217391304344], [39.0, 400.304347826087], [38.0, 415.4516129032259], [40.0, 422.45454545454544], [41.0, 459.2500000000001], [43.0, 367.05882352941177], [42.0, 377.5], [44.0, 454.85714285714283], [45.0, 399.5], [46.0, 596.0909090909091], [47.0, 621.8571428571428], [48.0, 788.0], [49.0, 659.1428571428572], [50.0, 735.8], [51.0, 643.1818181818182], [53.0, 692.1818181818182], [52.0, 793.875], [55.0, 718.8750000000001], [54.0, 554.1666666666666], [56.0, 527.2], [57.0, 618.3333333333333], [58.0, 671.0], [59.0, 628.2500000000001], [60.0, 755.7], [61.0, 795.0909090909091], [62.0, 642.8333333333333], [63.0, 700.0000000000001], [65.0, 673.0], [66.0, 694.8333333333334], [67.0, 677.8333333333334], [64.0, 723.25], [68.0, 717.25], [69.0, 584.6], [70.0, 965.4], [71.0, 1241.6666666666665], [72.0, 1009.5], [74.0, 1031.4615384615388], [75.0, 1086.5333333333333], [73.0, 1285.5714285714284], [76.0, 851.8], [77.0, 1001.0], [78.0, 879.8461538461539], [79.0, 903.9285714285714], [82.0, 895.5555555555555], [80.0, 707.0909090909091], [81.0, 926.6], [83.0, 725.3076923076923], [84.0, 905.1], [85.0, 810.3333333333334], [86.0, 955.3333333333334], [87.0, 897.6153846153845], [88.0, 876.1052631578948], [89.0, 1142.4], [91.0, 956.0], [90.0, 520.0], [92.0, 1180.0], [96.0, 1727.4], [97.0, 1671.0], [98.0, 1628.2], [99.0, 1563.0], [100.0, 1526.0], [101.0, 1553.0], [102.0, 1686.5], [103.0, 1485.4545454545453], [104.0, 1475.75], [105.0, 1506.2], [106.0, 1445.142857142857], [107.0, 1544.5555555555557], [109.0, 1421.9999999999998], [110.0, 1335.0], [111.0, 1409.6666666666667], [108.0, 1443.857142857143], [112.0, 1263.6666666666665], [113.0, 1549.5555555555557], [114.0, 1213.4444444444443], [115.0, 1487.25], [116.0, 1355.5], [118.0, 1451.125], [119.0, 1665.3333333333333], [117.0, 1444.0], [120.0, 1459.125], [121.0, 1450.7777777777776], [122.0, 1644.3000000000002], [123.0, 1672.0], [124.0, 1332.375], [125.0, 1732.111111111111], [127.0, 1520.7333333333331], [126.0, 1324.4444444444443], [128.0, 1479.0], [129.0, 1600.0], [131.0, 1487.4444444444446], [132.0, 1394.6666666666665], [134.0, 1401.0], [135.0, 1355.0], [130.0, 1263.0], [133.0, 1164.3333333333333], [136.0, 1265.0], [138.0, 1263.0], [139.0, 1262.0], [140.0, 1256.5], [141.0, 1246.0], [142.0, 1240.0], [143.0, 1231.0], [145.0, 1321.3333333333333], [146.0, 1366.5], [147.0, 1381.6], [148.0, 1470.0], [144.0, 1226.0], [149.0, 1196.5], [150.0, 1187.0], [151.0, 3053.1333333333337], [152.0, 1183.0], [153.0, 1174.6666666666667], [155.0, 1158.6666666666667], [164.0, 1230.0], [165.0, 1231.0], [166.0, 1234.0], [168.0, 1236.0], [169.0, 1232.0], [170.0, 1227.0], [171.0, 1222.0], [172.0, 1218.0], [173.0, 1216.0], [174.0, 1210.5], [176.0, 1209.0], [177.0, 1202.0], [178.0, 1195.0], [180.0, 1192.5], [182.0, 1197.0], [207.0, 302.0], [200.0, 2343.2187500000005], [214.0, 13.0], [1.0, 12.917293233082708]], "isOverall": false, "label": "User Registration - SSO", "isController": false}, {"data": [[20.478285714285644, 263.4899999999992]], "isOverall": false, "label": "User Registration - SSO-Aggregated", "isController": false}, {"data": [[2.0, 9.608557123350032], [3.0, 21.878768441308523], [4.0, 26.860627177700355], [5.0, 35.87500000000001], [6.0, 39.52173913043479], [7.0, 54.54098360655737], [8.0, 52.437500000000014], [9.0, 74.32051282051279], [10.0, 71.72307692307689], [11.0, 81.7105263157895], [12.0, 83.54117647058828], [13.0, 99.18333333333332], [14.0, 109.30508474576274], [15.0, 106.10638297872337], [16.0, 131.18604651162792], [17.0, 110.225], [18.0, 114.66666666666667], [19.0, 159.13636363636363], [20.0, 137.046511627907], [21.0, 161.59523809523813], [22.0, 188.88888888888894], [23.0, 149.3243243243243], [24.0, 163.38636363636368], [25.0, 191.62222222222223], [26.0, 172.05555555555557], [27.0, 199.2], [28.0, 176.43750000000003], [29.0, 773.5], [30.0, 423.73333333333335], [31.0, 179.89473684210523], [33.0, 296.13793103448273], [32.0, 210.87499999999997], [35.0, 265.22222222222223], [34.0, 236.56521739130437], [37.0, 282.6521739130435], [36.0, 287.0], [39.0, 258.0], [38.0, 311.2380952380953], [41.0, 390.65], [40.0, 322.41666666666674], [42.0, 291.15], [43.0, 311.0], [44.0, 406.59999999999997], [45.0, 386.99999999999994], [46.0, 451.8333333333333], [47.0, 451.8888888888889], [49.0, 373.33333333333337], [48.0, 465.0], [51.0, 355.625], [50.0, 378.22222222222223], [53.0, 390.4285714285714], [52.0, 333.7], [55.0, 518.6363636363636], [54.0, 575.4444444444445], [57.0, 506.6666666666667], [56.0, 538.8571428571429], [59.0, 498.0], [58.0, 472.22222222222223], [61.0, 449.3333333333333], [60.0, 503.8333333333333], [62.0, 370.0909090909091], [63.0, 617.5882352941176], [67.0, 811.6666666666667], [66.0, 537.4285714285714], [65.0, 458.18749999999994], [64.0, 468.7272727272727], [70.0, 601.3333333333334], [69.0, 635.0], [68.0, 436.75], [71.0, 484.25], [75.0, 717.0], [74.0, 656.0], [72.0, 467.83333333333337], [73.0, 468.0], [79.0, 486.14285714285717], [78.0, 608.2222222222222], [76.0, 460.57142857142856], [77.0, 475.7272727272727], [80.0, 691.2608695652175], [83.0, 541.1], [82.0, 524.9], [81.0, 539.8181818181818], [86.0, 608.8], [85.0, 603.4], [87.0, 437.8], [84.0, 484.75], [89.0, 780.25], [88.0, 687.2500000000001], [91.0, 468.0], [90.0, 498.3333333333333], [92.0, 681.4545454545455], [95.0, 1329.142857142857], [94.0, 1264.0], [93.0, 390.0], [99.0, 1001.8], [97.0, 1067.0], [96.0, 1078.3333333333333], [98.0, 1227.0], [103.0, 1115.6666666666667], [102.0, 1108.0555555555552], [101.0, 1115.4999999999998], [100.0, 1077.2857142857142], [105.0, 1195.1666666666667], [104.0, 1387.8], [107.0, 1405.857142857143], [106.0, 1341.3999999999999], [110.0, 1207.3478260869565], [108.0, 1228.5], [109.0, 1516.6666666666667], [111.0, 1118.6], [115.0, 1362.0], [113.0, 1290.25], [114.0, 1239.0], [112.0, 1482.9999999999998], [116.0, 1433.4], [119.0, 1318.0], [118.0, 1289.4545454545455], [117.0, 1358.4], [121.0, 1359.9999999999998], [123.0, 1331.6666666666667], [122.0, 1354.4615384615383], [120.0, 1401.3], [125.0, 1373.2], [124.0, 1340.4285714285713], [127.0, 1600.142857142857], [126.0, 1369.25], [135.0, 1530.6666666666667], [134.0, 1293.5], [133.0, 1236.5714285714287], [132.0, 1304.0], [131.0, 1406.0], [130.0, 1379.2727272727273], [128.0, 1370.9166666666665], [129.0, 1298.0], [141.0, 1410.0], [140.0, 1638.0], [139.0, 1480.8333333333333], [136.0, 1402.75], [138.0, 1877.0], [148.0, 1599.6666666666667], [147.0, 1679.5], [146.0, 1800.0], [145.0, 1434.0], [144.0, 1413.4], [151.0, 1934.0], [150.0, 1928.0], [149.0, 1922.0], [158.0, 1808.0], [157.0, 1793.0], [156.0, 1675.4], [167.0, 1959.0], [166.0, 1966.0], [165.0, 1983.4285714285716], [175.0, 1963.0], [174.0, 1987.2], [169.0, 1942.0], [168.0, 1951.0], [182.0, 1525.090909090909], [181.0, 937.1428571428571], [180.0, 1001.6666666666667], [179.0, 991.0000000000001], [183.0, 1974.0], [176.0, 1961.0], [190.0, 1977.0], [189.0, 1976.0], [188.0, 1936.0], [187.0, 1942.0], [186.0, 1947.0], [185.0, 1955.0], [184.0, 1962.0], [199.0, 1944.0], [198.0, 1949.0], [197.0, 1990.5714285714287], [207.0, 1011.0], [206.0, 1025.0], [200.0, 1986.0], [210.0, 1065.0], [211.0, 1081.5], [212.0, 1093.0], [213.0, 1102.0], [215.0, 1046.8333333333333], [208.0, 1017.0], [220.0, 1135.75], [217.0, 1098.3333333333333], [218.0, 1111.0], [216.0, 1031.0], [226.0, 1152.8], [224.0, 1140.4285714285716], [225.0, 1127.0], [1.0, 7.773049645390077]], "isOverall": false, "label": "User Registration - Local", "isController": false}, {"data": [[19.830571428571403, 172.84514285714224]], "isOverall": false, "label": "User Registration - Local-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 226.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8382.9, "minX": 1.64668822E12, "maxY": 29749.1, "series": [{"data": [[1.64668835E12, 18614.6], [1.64668833E12, 16030.1], [1.64668822E12, 11880.3], [1.64668837E12, 8382.9], [1.64668826E12, 11468.9], [1.64668824E12, 13123.9], [1.6466883E12, 14670.0], [1.64668828E12, 16014.4], [1.64668834E12, 17031.1], [1.64668832E12, 15610.6], [1.64668823E12, 12974.8], [1.64668836E12, 17852.2], [1.64668827E12, 12875.5], [1.64668825E12, 13235.6], [1.64668831E12, 14977.3], [1.64668829E12, 14441.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.64668835E12, 29749.1], [1.64668833E12, 25612.7], [1.64668822E12, 18988.6], [1.64668837E12, 11634.5], [1.64668826E12, 18374.8], [1.64668824E12, 20972.1], [1.6466883E12, 23445.0], [1.64668828E12, 25506.2], [1.64668834E12, 27220.4], [1.64668832E12, 24952.2], [1.64668823E12, 20735.8], [1.64668836E12, 28622.0], [1.64668827E12, 20618.8], [1.64668825E12, 21152.6], [1.64668831E12, 23938.1], [1.64668829E12, 23080.3]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64668837E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 13.888888888888888, "minX": 1.64668822E12, "maxY": 2723.8449999999993, "series": [{"data": [[1.64668835E12, 105.60770577933452], [1.64668833E12, 76.89183673469387], [1.64668822E12, 133.2465753424658], [1.64668837E12, 2723.8449999999993], [1.64668826E12, 153.88767123287676], [1.64668824E12, 43.97014925373136], [1.6466883E12, 21.508888888888887], [1.64668828E12, 160.73390557939922], [1.64668834E12, 69.56596558317399], [1.64668832E12, 41.125], [1.64668823E12, 32.29145728643217], [1.64668836E12, 488.60975609756105], [1.64668827E12, 1412.5012285012285], [1.64668825E12, 27.608374384236463], [1.64668831E12, 47.656521739130426], [1.64668829E12, 83.89390519187363]], "isOverall": false, "label": "User Registration - SSO", "isController": false}, {"data": [[1.64668835E12, 55.31698774080559], [1.64668833E12, 42.48884381338743], [1.64668822E12, 82.42032967032969], [1.64668837E12, 1378.1538461538457], [1.64668826E12, 96.406432748538], [1.64668824E12, 28.483870967741943], [1.6466883E12, 13.888888888888888], [1.64668828E12, 123.83529411764721], [1.64668834E12, 40.31226053639848], [1.64668832E12, 24.240585774058584], [1.64668823E12, 20.268844221105542], [1.64668836E12, 331.8276515151517], [1.64668827E12, 1083.310880829015], [1.64668825E12, 18.35221674876846], [1.64668831E12, 28.28758169934642], [1.64668829E12, 42.04740406320541]], "isOverall": false, "label": "User Registration - Local", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64668837E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 13.880000000000003, "minX": 1.64668822E12, "maxY": 2705.585, "series": [{"data": [[1.64668835E12, 105.59194395796851], [1.64668833E12, 76.88367346938774], [1.64668822E12, 133.07671232876717], [1.64668837E12, 2705.585], [1.64668826E12, 153.85205479452048], [1.64668824E12, 43.93034825870645], [1.6466883E12, 21.491111111111127], [1.64668828E12, 160.68884120171663], [1.64668834E12, 69.55449330783938], [1.64668832E12, 41.114583333333336], [1.64668823E12, 32.23618090452259], [1.64668836E12, 488.6045296167245], [1.64668827E12, 1412.4889434889437], [1.64668825E12, 27.57635467980296], [1.64668831E12, 47.639130434782636], [1.64668829E12, 83.88261851015794]], "isOverall": false, "label": "User Registration - SSO", "isController": false}, {"data": [[1.64668835E12, 55.30122591943955], [1.64668833E12, 42.47464503042597], [1.64668822E12, 82.20329670329669], [1.64668837E12, 1378.0971659919026], [1.64668826E12, 96.36257309941526], [1.64668824E12, 28.43920595533499], [1.6466883E12, 13.880000000000003], [1.64668828E12, 123.78431372549005], [1.64668834E12, 40.30268199233716], [1.64668832E12, 24.23221757322176], [1.64668823E12, 20.218592964824133], [1.64668836E12, 331.81818181818164], [1.64668827E12, 1083.217616580311], [1.64668825E12, 18.312807881773395], [1.64668831E12, 28.27450980392155], [1.64668829E12, 42.03386004514672]], "isOverall": false, "label": "User Registration - Local", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64668837E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.64668822E12, "maxY": 10.720547945205476, "series": [{"data": [[1.64668835E12, 0.48336252189141876], [1.64668833E12, 0.44285714285714267], [1.64668822E12, 10.720547945205476], [1.64668837E12, 0.5000000000000008], [1.64668826E12, 2.8876712328767136], [1.64668824E12, 0.9875621890547265], [1.6466883E12, 0.5266666666666675], [1.64668828E12, 0.8519313304721023], [1.64668834E12, 0.5793499043977056], [1.64668832E12, 0.5583333333333328], [1.64668823E12, 1.6733668341708547], [1.64668836E12, 0.5034843205574914], [1.64668827E12, 1.9656019656019645], [1.64668825E12, 0.9926108374384234], [1.64668831E12, 0.6456521739130429], [1.64668829E12, 0.55530474040632]], "isOverall": false, "label": "User Registration - SSO", "isController": false}, {"data": [[1.64668835E12, 0.0], [1.64668833E12, 0.0], [1.64668822E12, 0.0], [1.64668837E12, 0.03238866396761133], [1.64668826E12, 0.0], [1.64668824E12, 0.0], [1.6466883E12, 0.0], [1.64668828E12, 0.0], [1.64668834E12, 0.0], [1.64668832E12, 0.0], [1.64668823E12, 0.0], [1.64668836E12, 0.0], [1.64668827E12, 0.0], [1.64668825E12, 0.0], [1.64668831E12, 0.0], [1.64668829E12, 0.0]], "isOverall": false, "label": "User Registration - Local", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64668837E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.64668822E12, "maxY": 4240.0, "series": [{"data": [[1.64668835E12, 480.0], [1.64668833E12, 507.0], [1.64668822E12, 429.0], [1.64668837E12, 4240.0], [1.64668826E12, 798.0], [1.64668824E12, 243.0], [1.6466883E12, 86.0], [1.64668828E12, 1106.0], [1.64668834E12, 382.0], [1.64668832E12, 297.0], [1.64668823E12, 232.0], [1.64668836E12, 1296.0], [1.64668827E12, 2092.0], [1.64668825E12, 82.0], [1.64668831E12, 357.0], [1.64668829E12, 731.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.64668835E12, 242.70000000000005], [1.64668833E12, 182.0], [1.64668822E12, 226.0], [1.64668837E12, 3106.2], [1.64668826E12, 521.2], [1.64668824E12, 83.79999999999995], [1.6466883E12, 26.0], [1.64668828E12, 527.3000000000001], [1.64668834E12, 177.0], [1.64668832E12, 89.10000000000002], [1.64668823E12, 40.30000000000007], [1.64668836E12, 1021.1000000000001], [1.64668827E12, 1666.6], [1.64668825E12, 40.700000000000045], [1.64668831E12, 100.0], [1.64668829E12, 213.30000000000007]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.64668835E12, 403.7099999999998], [1.64668833E12, 412.75999999999965], [1.64668822E12, 385.4000000000001], [1.64668837E12, 4189.0], [1.64668826E12, 738.7599999999999], [1.64668824E12, 197.93999999999994], [1.6466883E12, 50.960000000000036], [1.64668828E12, 964.46], [1.64668834E12, 344.0799999999999], [1.64668832E12, 236.91999999999962], [1.64668823E12, 174.08999999999992], [1.64668836E12, 1260.7300000000002], [1.64668827E12, 2019.1799999999998], [1.64668825E12, 78.0], [1.64668831E12, 248.39999999999964], [1.64668829E12, 666.3399999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.64668835E12, 309.8499999999999], [1.64668833E12, 243.5999999999999], [1.64668822E12, 317.5], [1.64668837E12, 4146.8], [1.64668826E12, 641.0000000000003], [1.64668824E12, 125.0], [1.6466883E12, 28.0], [1.64668828E12, 680.8999999999999], [1.64668834E12, 240.39999999999986], [1.64668832E12, 148.04999999999995], [1.64668823E12, 79.0], [1.64668836E12, 1165.85], [1.64668827E12, 1735.6999999999996], [1.64668825E12, 52.0], [1.64668831E12, 132.0], [1.64668829E12, 315.29999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.64668835E12, 6.0], [1.64668833E12, 6.0], [1.64668822E12, 7.0], [1.64668837E12, 162.0], [1.64668826E12, 6.0], [1.64668824E12, 6.0], [1.6466883E12, 6.0], [1.64668828E12, 6.0], [1.64668834E12, 6.0], [1.64668832E12, 6.0], [1.64668823E12, 6.0], [1.64668836E12, 6.0], [1.64668827E12, 310.0], [1.64668825E12, 6.0], [1.64668831E12, 6.0], [1.64668829E12, 6.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.64668835E12, 26.5], [1.64668833E12, 23.0], [1.64668822E12, 83.0], [1.64668837E12, 1973.0], [1.64668826E12, 24.0], [1.64668824E12, 26.0], [1.6466883E12, 18.0], [1.64668828E12, 23.0], [1.64668834E12, 21.0], [1.64668832E12, 20.0], [1.64668823E12, 22.0], [1.64668836E12, 372.0], [1.64668827E12, 1327.0], [1.64668825E12, 23.0], [1.64668831E12, 22.0], [1.64668829E12, 23.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64668837E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14.0, "minX": 5.0, "maxY": 2157.0, "series": [{"data": [[5.0, 140.0], [37.0, 397.0], [39.0, 1321.0], [47.0, 1302.0], [54.0, 18.5], [57.0, 197.5], [60.0, 83.0], [62.0, 507.0], [63.0, 856.0], [64.0, 223.0], [67.0, 106.0], [65.0, 39.0], [69.0, 121.0], [68.0, 889.0], [70.0, 1330.0], [74.0, 21.0], [79.0, 26.0], [78.0, 26.0], [76.0, 93.0], [80.0, 18.0], [82.0, 23.0], [81.0, 21.0], [83.0, 16.5], [84.0, 21.0], [87.0, 15.0], [86.0, 18.0], [85.0, 23.0], [89.0, 21.0], [90.0, 15.0], [88.0, 15.0], [91.0, 27.5], [95.0, 25.0], [92.0, 18.5], [94.0, 19.0], [93.0, 22.0], [97.0, 23.0], [98.0, 446.0], [96.0, 18.0], [99.0, 21.0], [102.0, 46.5], [100.0, 679.0], [101.0, 20.0], [103.0, 20.0], [106.0, 101.5], [105.0, 19.0], [111.0, 110.0], [110.0, 18.5], [113.0, 66.0], [112.0, 14.0], [118.0, 114.0], [116.0, 127.5], [117.0, 190.5], [119.0, 16.0], [120.0, 242.5], [123.0, 26.0], [121.0, 17.0], [124.0, 598.5], [127.0, 68.0], [135.0, 1235.0], [133.0, 145.0], [129.0, 1922.0], [147.0, 274.0], [148.0, 548.5], [153.0, 70.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 1163.0], [85.0, 157.5], [63.0, 2157.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 153.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 5.0, "maxY": 1922.0, "series": [{"data": [[5.0, 140.0], [37.0, 397.0], [39.0, 1321.0], [47.0, 1302.0], [54.0, 18.5], [57.0, 197.5], [60.0, 82.0], [62.0, 507.0], [63.0, 856.0], [64.0, 223.0], [67.0, 106.0], [65.0, 39.0], [69.0, 121.0], [68.0, 889.0], [70.0, 1330.0], [74.0, 21.0], [79.0, 26.0], [78.0, 26.0], [76.0, 93.0], [80.0, 17.5], [82.0, 23.0], [81.0, 21.0], [83.0, 16.5], [84.0, 21.0], [87.0, 15.0], [86.0, 18.0], [85.0, 23.0], [89.0, 21.0], [90.0, 15.0], [88.0, 15.0], [91.0, 27.5], [95.0, 25.0], [92.0, 18.5], [94.0, 19.0], [93.0, 22.0], [97.0, 23.0], [98.0, 446.0], [96.0, 18.0], [99.0, 21.0], [102.0, 46.5], [100.0, 679.0], [101.0, 20.0], [103.0, 20.0], [106.0, 101.5], [105.0, 19.0], [111.0, 110.0], [110.0, 18.5], [113.0, 66.0], [112.0, 14.0], [118.0, 114.0], [116.0, 127.5], [117.0, 190.5], [119.0, 16.0], [120.0, 242.0], [123.0, 26.0], [121.0, 17.0], [124.0, 598.5], [127.0, 68.0], [135.0, 1235.0], [133.0, 145.0], [129.0, 1922.0], [147.0, 274.0], [148.0, 548.5], [153.0, 70.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 0.0], [85.0, 0.0], [63.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 153.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 26.8, "minX": 1.64668822E12, "maxY": 127.9, "series": [{"data": [[1.64668835E12, 114.2], [1.64668833E12, 98.0], [1.64668822E12, 73.1], [1.64668837E12, 26.8], [1.64668826E12, 76.0], [1.64668824E12, 80.4], [1.6466883E12, 90.0], [1.64668828E12, 89.1], [1.64668834E12, 104.5], [1.64668832E12, 96.1], [1.64668823E12, 79.6], [1.64668836E12, 127.9], [1.64668827E12, 82.6], [1.64668825E12, 81.1], [1.64668831E12, 92.0], [1.64668829E12, 88.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64668837E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.64668822E12, "maxY": 114.2, "series": [{"data": [[1.64668835E12, 114.2], [1.64668833E12, 98.3], [1.64668822E12, 72.9], [1.64668837E12, 44.3], [1.64668826E12, 70.7], [1.64668824E12, 80.5], [1.6466883E12, 90.0], [1.64668828E12, 97.6], [1.64668834E12, 104.5], [1.64668832E12, 95.8], [1.64668823E12, 79.6], [1.64668836E12, 110.2], [1.64668827E12, 79.3], [1.64668825E12, 81.2], [1.64668831E12, 91.9], [1.64668829E12, 88.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.64668837E12, 0.4]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 10000, "maxX": 1.64668837E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.64668822E12, "maxY": 57.4, "series": [{"data": [[1.64668837E12, 0.4]], "isOverall": false, "label": "User Registration - SSO-failure", "isController": false}, {"data": [[1.64668835E12, 57.1], [1.64668833E12, 49.3], [1.64668822E12, 36.4], [1.64668837E12, 24.7], [1.64668826E12, 34.2], [1.64668824E12, 40.3], [1.6466883E12, 45.0], [1.64668828E12, 51.0], [1.64668834E12, 52.2], [1.64668832E12, 47.8], [1.64668823E12, 39.8], [1.64668836E12, 52.8], [1.64668827E12, 38.6], [1.64668825E12, 40.6], [1.64668831E12, 45.9], [1.64668829E12, 44.3]], "isOverall": false, "label": "User Registration - Local-success", "isController": false}, {"data": [[1.64668835E12, 57.1], [1.64668833E12, 49.0], [1.64668822E12, 36.5], [1.64668837E12, 19.6], [1.64668826E12, 36.5], [1.64668824E12, 40.2], [1.6466883E12, 45.0], [1.64668828E12, 46.6], [1.64668834E12, 52.3], [1.64668832E12, 48.0], [1.64668823E12, 39.8], [1.64668836E12, 57.4], [1.64668827E12, 40.7], [1.64668825E12, 40.6], [1.64668831E12, 46.0], [1.64668829E12, 44.3]], "isOverall": false, "label": "User Registration - SSO-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64668837E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.64668822E12, "maxY": 114.2, "series": [{"data": [[1.64668835E12, 114.2], [1.64668833E12, 98.3], [1.64668822E12, 72.9], [1.64668837E12, 44.3], [1.64668826E12, 70.7], [1.64668824E12, 80.5], [1.6466883E12, 90.0], [1.64668828E12, 97.6], [1.64668834E12, 104.5], [1.64668832E12, 95.8], [1.64668823E12, 79.6], [1.64668836E12, 110.2], [1.64668827E12, 79.3], [1.64668825E12, 81.2], [1.64668831E12, 91.9], [1.64668829E12, 88.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.64668837E12, 0.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 10000, "maxX": 1.64668837E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

