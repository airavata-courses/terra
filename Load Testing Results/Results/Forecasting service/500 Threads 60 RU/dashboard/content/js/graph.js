/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 117326.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 437.0], [0.3, 437.0], [0.4, 498.0], [0.5, 498.0], [0.6, 498.0], [0.7, 780.0], [0.8, 914.0], [0.9, 914.0], [1.0, 977.0], [1.1, 977.0], [1.2, 1154.0], [1.3, 1154.0], [1.4, 1157.0], [1.5, 1157.0], [1.6, 1514.0], [1.7, 1514.0], [1.8, 1524.0], [1.9, 1524.0], [2.0, 1524.0], [2.1, 1524.0], [2.2, 1752.0], [2.3, 1752.0], [2.4, 1928.0], [2.5, 1928.0], [2.6, 2006.0], [2.7, 2006.0], [2.8, 2006.0], [2.9, 2079.0], [3.0, 2079.0], [3.1, 2304.0], [3.2, 2304.0], [3.3, 2458.0], [3.4, 2458.0], [3.5, 2681.0], [3.6, 2681.0], [3.7, 2766.0], [3.8, 2766.0], [3.9, 3043.0], [4.0, 3043.0], [4.1, 3111.0], [4.2, 3111.0], [4.3, 3112.0], [4.4, 3112.0], [4.5, 3365.0], [4.6, 3365.0], [4.7, 3422.0], [4.8, 3422.0], [4.9, 3605.0], [5.0, 3605.0], [5.1, 3658.0], [5.2, 3658.0], [5.3, 3797.0], [5.4, 3797.0], [5.5, 3896.0], [5.6, 3896.0], [5.7, 4196.0], [5.8, 4196.0], [5.9, 4199.0], [6.0, 4199.0], [6.1, 4246.0], [6.2, 4246.0], [6.3, 4517.0], [6.4, 4517.0], [6.5, 4649.0], [6.6, 4649.0], [6.7, 5081.0], [6.8, 5081.0], [6.9, 5313.0], [7.0, 5313.0], [7.1, 5405.0], [7.2, 5405.0], [7.3, 5678.0], [7.4, 5678.0], [7.5, 5730.0], [7.6, 5730.0], [7.7, 5888.0], [7.8, 5888.0], [7.9, 5986.0], [8.0, 5986.0], [8.1, 6251.0], [8.2, 6251.0], [8.3, 6334.0], [8.4, 6334.0], [8.5, 6457.0], [8.6, 6457.0], [8.7, 6562.0], [8.8, 6640.0], [8.9, 6640.0], [9.0, 6658.0], [9.1, 6658.0], [9.2, 6865.0], [9.3, 6865.0], [9.4, 7084.0], [9.5, 7084.0], [9.6, 7153.0], [9.7, 7153.0], [9.8, 7441.0], [9.9, 7441.0], [10.0, 7470.0], [10.1, 7470.0], [10.2, 7639.0], [10.3, 7639.0], [10.4, 7742.0], [10.5, 7742.0], [10.6, 7876.0], [10.7, 7876.0], [10.8, 8119.0], [10.9, 8119.0], [11.0, 8194.0], [11.1, 8194.0], [11.2, 8574.0], [11.3, 8574.0], [11.4, 8705.0], [11.5, 8705.0], [11.6, 9734.0], [11.7, 9734.0], [11.8, 9967.0], [11.9, 9967.0], [12.0, 10212.0], [12.1, 10212.0], [12.2, 10341.0], [12.3, 10341.0], [12.4, 10567.0], [12.5, 10567.0], [12.6, 10762.0], [12.7, 10762.0], [12.8, 10950.0], [12.9, 10950.0], [13.0, 11074.0], [13.1, 11074.0], [13.2, 11320.0], [13.3, 11320.0], [13.4, 11371.0], [13.5, 11371.0], [13.6, 11491.0], [13.7, 11491.0], [13.8, 11591.0], [13.9, 11591.0], [14.0, 11685.0], [14.1, 11685.0], [14.2, 11709.0], [14.3, 11709.0], [14.4, 12012.0], [14.5, 12012.0], [14.6, 12186.0], [14.7, 12186.0], [14.8, 12487.0], [14.9, 12487.0], [15.0, 12634.0], [15.1, 12634.0], [15.2, 12935.0], [15.3, 12935.0], [15.4, 13037.0], [15.5, 13037.0], [15.6, 13312.0], [15.7, 13312.0], [15.8, 13443.0], [15.9, 13443.0], [16.0, 13554.0], [16.1, 13554.0], [16.2, 13678.0], [16.3, 13678.0], [16.4, 13768.0], [16.5, 13768.0], [16.6, 13785.0], [16.7, 13785.0], [16.8, 14004.0], [16.9, 14004.0], [17.0, 14149.0], [17.1, 14149.0], [17.2, 14290.0], [17.3, 14290.0], [17.4, 14346.0], [17.5, 14346.0], [17.6, 14580.0], [17.7, 14580.0], [17.8, 14759.0], [17.9, 14759.0], [18.0, 14856.0], [18.1, 14856.0], [18.2, 15358.0], [18.3, 15358.0], [18.4, 15556.0], [18.5, 15556.0], [18.6, 15612.0], [18.7, 15612.0], [18.8, 15616.0], [18.9, 15616.0], [19.0, 15977.0], [19.1, 15977.0], [19.2, 16035.0], [19.3, 16035.0], [19.4, 16173.0], [19.5, 16173.0], [19.6, 16285.0], [19.7, 16285.0], [19.8, 16296.0], [19.9, 16296.0], [20.0, 16557.0], [20.1, 16557.0], [20.2, 16703.0], [20.3, 16703.0], [20.4, 16856.0], [20.5, 16856.0], [20.6, 16987.0], [20.7, 16987.0], [20.8, 17032.0], [20.9, 17032.0], [21.0, 17250.0], [21.1, 17250.0], [21.2, 17544.0], [21.3, 17544.0], [21.4, 17622.0], [21.5, 17622.0], [21.6, 17666.0], [21.7, 17666.0], [21.8, 17981.0], [21.9, 17981.0], [22.0, 18092.0], [22.1, 18092.0], [22.2, 18101.0], [22.3, 18101.0], [22.4, 18278.0], [22.5, 18278.0], [22.6, 18514.0], [22.7, 18514.0], [22.8, 18670.0], [22.9, 18670.0], [23.0, 18712.0], [23.1, 18712.0], [23.2, 18781.0], [23.3, 18781.0], [23.4, 18941.0], [23.5, 18941.0], [23.6, 19042.0], [23.7, 19042.0], [23.8, 19137.0], [23.9, 19137.0], [24.0, 19346.0], [24.1, 19346.0], [24.2, 19438.0], [24.3, 19438.0], [24.4, 19619.0], [24.5, 19619.0], [24.6, 19804.0], [24.7, 19804.0], [24.8, 20071.0], [24.9, 20071.0], [25.0, 20661.0], [25.1, 20661.0], [25.2, 20919.0], [25.3, 20919.0], [25.4, 21045.0], [25.5, 21045.0], [25.6, 21279.0], [25.7, 21279.0], [25.8, 21396.0], [25.9, 21396.0], [26.0, 21482.0], [26.1, 21482.0], [26.2, 21606.0], [26.3, 21606.0], [26.4, 21732.0], [26.5, 21732.0], [26.6, 21951.0], [26.7, 21951.0], [26.8, 22132.0], [26.9, 22132.0], [27.0, 22250.0], [27.1, 22250.0], [27.2, 22571.0], [27.3, 22571.0], [27.4, 22718.0], [27.5, 22718.0], [27.6, 22804.0], [27.7, 22804.0], [27.8, 23012.0], [27.9, 23012.0], [28.0, 23267.0], [28.1, 23267.0], [28.2, 23474.0], [28.3, 23474.0], [28.4, 23642.0], [28.5, 23642.0], [28.6, 23914.0], [28.7, 23914.0], [28.8, 24084.0], [28.9, 24084.0], [29.0, 25177.0], [29.1, 25177.0], [29.2, 25421.0], [29.3, 25421.0], [29.4, 25534.0], [29.5, 25534.0], [29.6, 26724.0], [29.7, 26724.0], [29.8, 26802.0], [29.9, 26802.0], [30.0, 27138.0], [30.1, 27138.0], [30.2, 27268.0], [30.3, 27268.0], [30.4, 27395.0], [30.5, 27395.0], [30.6, 27498.0], [30.7, 27498.0], [30.8, 27745.0], [30.9, 27745.0], [31.0, 27973.0], [31.1, 27973.0], [31.2, 28034.0], [31.3, 28034.0], [31.4, 28311.0], [31.5, 28311.0], [31.6, 28534.0], [31.7, 28534.0], [31.8, 28591.0], [31.9, 28591.0], [32.0, 28688.0], [32.1, 28688.0], [32.2, 29978.0], [32.3, 29978.0], [32.4, 30233.0], [32.5, 30233.0], [32.6, 30629.0], [32.7, 30629.0], [32.8, 30754.0], [32.9, 30754.0], [33.0, 31002.0], [33.1, 31002.0], [33.2, 31172.0], [33.3, 31172.0], [33.4, 31398.0], [33.5, 31398.0], [33.6, 31620.0], [33.7, 31620.0], [33.8, 31688.0], [33.9, 31688.0], [34.0, 31915.0], [34.1, 31915.0], [34.2, 32034.0], [34.3, 32034.0], [34.4, 32254.0], [34.5, 32254.0], [34.6, 32312.0], [34.7, 32312.0], [34.8, 32621.0], [34.9, 32621.0], [35.0, 32833.0], [35.1, 32833.0], [35.2, 32899.0], [35.3, 32899.0], [35.4, 33170.0], [35.5, 33170.0], [35.6, 33316.0], [35.7, 33316.0], [35.8, 33489.0], [35.9, 33489.0], [36.0, 33925.0], [36.1, 33925.0], [36.2, 34189.0], [36.3, 34189.0], [36.4, 34250.0], [36.5, 34250.0], [36.6, 34504.0], [36.7, 34504.0], [36.8, 34743.0], [36.9, 34743.0], [37.0, 34837.0], [37.1, 34837.0], [37.2, 34940.0], [37.3, 34940.0], [37.4, 35168.0], [37.5, 35168.0], [37.6, 35328.0], [37.7, 35328.0], [37.8, 35449.0], [37.9, 35449.0], [38.0, 35722.0], [38.1, 35722.0], [38.2, 35989.0], [38.3, 35989.0], [38.4, 35989.0], [38.5, 36065.0], [38.6, 36065.0], [38.7, 36841.0], [38.8, 36841.0], [38.9, 38039.0], [39.0, 38039.0], [39.1, 39072.0], [39.2, 39072.0], [39.3, 39316.0], [39.4, 39316.0], [39.5, 39538.0], [39.6, 39538.0], [39.7, 39701.0], [39.8, 39701.0], [39.9, 39961.0], [40.0, 39961.0], [40.1, 40164.0], [40.2, 40164.0], [40.3, 40237.0], [40.4, 40237.0], [40.5, 40361.0], [40.6, 40361.0], [40.7, 40597.0], [40.8, 40597.0], [40.9, 41836.0], [41.0, 41836.0], [41.1, 41980.0], [41.2, 41980.0], [41.3, 42524.0], [41.4, 42524.0], [41.5, 42627.0], [41.6, 42627.0], [41.7, 42987.0], [41.8, 42987.0], [41.9, 43142.0], [42.0, 43142.0], [42.1, 43348.0], [42.2, 43348.0], [42.3, 43627.0], [42.4, 43627.0], [42.5, 43828.0], [42.6, 43828.0], [42.7, 45009.0], [42.8, 45009.0], [42.9, 45072.0], [43.0, 45072.0], [43.1, 45777.0], [43.2, 45777.0], [43.3, 45894.0], [43.4, 45894.0], [43.5, 46197.0], [43.6, 46197.0], [43.7, 46363.0], [43.8, 46363.0], [43.9, 46577.0], [44.0, 46577.0], [44.1, 46798.0], [44.2, 46798.0], [44.3, 46975.0], [44.4, 46975.0], [44.5, 47156.0], [44.6, 47156.0], [44.7, 47311.0], [44.8, 47311.0], [44.9, 48725.0], [45.0, 48725.0], [45.1, 48882.0], [45.2, 48882.0], [45.3, 49065.0], [45.4, 49065.0], [45.5, 49178.0], [45.6, 49178.0], [45.7, 49418.0], [45.8, 49418.0], [45.9, 49510.0], [46.0, 49510.0], [46.1, 49885.0], [46.2, 49885.0], [46.3, 50079.0], [46.4, 50079.0], [46.5, 50556.0], [46.6, 50556.0], [46.7, 50788.0], [46.8, 50788.0], [46.9, 50866.0], [47.0, 50866.0], [47.1, 51093.0], [47.2, 51093.0], [47.3, 51180.0], [47.4, 51180.0], [47.5, 51386.0], [47.6, 51386.0], [47.7, 51435.0], [47.8, 51435.0], [47.9, 51731.0], [48.0, 51731.0], [48.1, 51856.0], [48.2, 51856.0], [48.3, 52061.0], [48.4, 52061.0], [48.5, 52164.0], [48.6, 52164.0], [48.7, 52505.0], [48.8, 52505.0], [48.9, 53261.0], [49.0, 53261.0], [49.1, 53459.0], [49.2, 53459.0], [49.3, 53555.0], [49.4, 53555.0], [49.5, 53899.0], [49.6, 53899.0], [49.7, 54281.0], [49.8, 54281.0], [49.9, 54685.0], [50.0, 54685.0], [50.1, 54902.0], [50.2, 54902.0], [50.3, 55034.0], [50.4, 55034.0], [50.5, 55315.0], [50.6, 55315.0], [50.7, 55415.0], [50.8, 55415.0], [50.9, 55605.0], [51.0, 55605.0], [51.1, 55682.0], [51.2, 55682.0], [51.3, 55941.0], [51.4, 55941.0], [51.5, 56058.0], [51.6, 56058.0], [51.7, 56296.0], [51.8, 56296.0], [51.9, 56381.0], [52.0, 56381.0], [52.1, 56667.0], [52.2, 56667.0], [52.3, 56832.0], [52.4, 56832.0], [52.5, 56927.0], [52.6, 56927.0], [52.7, 57213.0], [52.8, 57213.0], [52.9, 57284.0], [53.0, 57284.0], [53.1, 58074.0], [53.2, 58074.0], [53.3, 58245.0], [53.4, 58245.0], [53.5, 58816.0], [53.6, 58816.0], [53.7, 59009.0], [53.8, 59009.0], [53.9, 59095.0], [54.0, 59095.0], [54.1, 59271.0], [54.2, 59271.0], [54.3, 59486.0], [54.4, 59486.0], [54.5, 59737.0], [54.6, 59737.0], [54.7, 60156.0], [54.8, 60156.0], [54.9, 60285.0], [55.0, 60285.0], [55.1, 60413.0], [55.2, 60413.0], [55.3, 60638.0], [55.4, 60638.0], [55.5, 60848.0], [55.6, 60848.0], [55.7, 61040.0], [55.8, 61040.0], [55.9, 61151.0], [56.0, 61151.0], [56.1, 61468.0], [56.2, 61468.0], [56.3, 61509.0], [56.4, 61509.0], [56.5, 61746.0], [56.6, 61746.0], [56.7, 61797.0], [56.8, 61797.0], [56.9, 62047.0], [57.0, 62047.0], [57.1, 62173.0], [57.2, 62173.0], [57.3, 62291.0], [57.4, 62291.0], [57.5, 62399.0], [57.6, 62399.0], [57.7, 63068.0], [57.8, 63068.0], [57.9, 63154.0], [58.0, 63154.0], [58.1, 63545.0], [58.2, 63545.0], [58.3, 64749.0], [58.4, 64749.0], [58.5, 64852.0], [58.6, 64852.0], [58.7, 65179.0], [58.8, 65179.0], [58.9, 65391.0], [59.0, 65391.0], [59.1, 65520.0], [59.2, 65520.0], [59.3, 65723.0], [59.4, 65723.0], [59.5, 65831.0], [59.6, 65831.0], [59.7, 66019.0], [59.8, 66019.0], [59.9, 66165.0], [60.0, 66165.0], [60.1, 66486.0], [60.2, 66486.0], [60.3, 66735.0], [60.4, 66735.0], [60.5, 66803.0], [60.6, 66803.0], [60.7, 67023.0], [60.8, 67023.0], [60.9, 67263.0], [61.0, 67263.0], [61.1, 67342.0], [61.2, 67342.0], [61.3, 67596.0], [61.4, 67596.0], [61.5, 67742.0], [61.6, 67742.0], [61.7, 67888.0], [61.8, 67888.0], [61.9, 68044.0], [62.0, 68044.0], [62.1, 68218.0], [62.2, 68218.0], [62.3, 68548.0], [62.4, 68548.0], [62.5, 68651.0], [62.6, 68651.0], [62.7, 69301.0], [62.8, 69301.0], [62.9, 69388.0], [63.0, 69388.0], [63.1, 69531.0], [63.2, 69531.0], [63.3, 69749.0], [63.4, 69749.0], [63.5, 69971.0], [63.6, 69971.0], [63.7, 70341.0], [63.8, 70341.0], [63.9, 70509.0], [64.0, 70509.0], [64.1, 70617.0], [64.2, 70617.0], [64.3, 71110.0], [64.4, 71110.0], [64.5, 71250.0], [64.6, 71250.0], [64.7, 71424.0], [64.8, 71424.0], [64.9, 71545.0], [65.0, 71545.0], [65.1, 71891.0], [65.2, 71891.0], [65.3, 73714.0], [65.4, 73714.0], [65.5, 73929.0], [65.6, 73929.0], [65.7, 74073.0], [65.8, 74073.0], [65.9, 74256.0], [66.0, 74256.0], [66.1, 74396.0], [66.2, 74396.0], [66.3, 74518.0], [66.4, 74518.0], [66.5, 74624.0], [66.6, 74624.0], [66.7, 75906.0], [66.8, 75906.0], [66.9, 76059.0], [67.0, 76059.0], [67.1, 76700.0], [67.2, 76700.0], [67.3, 77092.0], [67.4, 77092.0], [67.5, 77161.0], [67.6, 77161.0], [67.7, 77440.0], [67.8, 77440.0], [67.9, 77498.0], [68.0, 77498.0], [68.1, 77712.0], [68.2, 77712.0], [68.3, 77762.0], [68.4, 77762.0], [68.5, 78011.0], [68.6, 78011.0], [68.7, 78359.0], [68.8, 78359.0], [68.9, 78440.0], [69.0, 78440.0], [69.1, 78759.0], [69.2, 78759.0], [69.3, 78931.0], [69.4, 78931.0], [69.5, 79027.0], [69.6, 79027.0], [69.7, 79164.0], [69.8, 79164.0], [69.9, 79954.0], [70.0, 79954.0], [70.1, 80245.0], [70.2, 80245.0], [70.3, 80298.0], [70.4, 80298.0], [70.5, 80462.0], [70.6, 80462.0], [70.7, 80564.0], [70.8, 80564.0], [70.9, 80930.0], [71.0, 80930.0], [71.1, 81106.0], [71.2, 81106.0], [71.3, 81187.0], [71.4, 81187.0], [71.5, 81454.0], [71.6, 81454.0], [71.7, 81552.0], [71.8, 81552.0], [71.9, 81812.0], [72.0, 81812.0], [72.1, 81903.0], [72.2, 81903.0], [72.3, 82195.0], [72.4, 82195.0], [72.5, 82362.0], [72.6, 82362.0], [72.7, 82493.0], [72.8, 82493.0], [72.9, 82756.0], [73.0, 82756.0], [73.1, 82831.0], [73.2, 82831.0], [73.3, 83015.0], [73.4, 83015.0], [73.5, 83144.0], [73.6, 83144.0], [73.7, 83417.0], [73.8, 83417.0], [73.9, 83611.0], [74.0, 83611.0], [74.1, 83671.0], [74.2, 83671.0], [74.3, 83945.0], [74.4, 83945.0], [74.5, 84129.0], [74.6, 84129.0], [74.7, 84266.0], [74.8, 84266.0], [74.9, 84414.0], [75.0, 84414.0], [75.1, 84622.0], [75.2, 84622.0], [75.3, 84855.0], [75.4, 84855.0], [75.5, 84925.0], [75.6, 84925.0], [75.7, 85188.0], [75.8, 85188.0], [75.9, 85346.0], [76.0, 85346.0], [76.1, 85534.0], [76.2, 85534.0], [76.3, 85630.0], [76.4, 85630.0], [76.5, 85914.0], [76.6, 85914.0], [76.7, 86034.0], [76.8, 86034.0], [76.9, 86132.0], [77.0, 86132.0], [77.1, 86234.0], [77.2, 86234.0], [77.3, 86558.0], [77.4, 86558.0], [77.5, 86676.0], [77.6, 86676.0], [77.7, 86789.0], [77.8, 86789.0], [77.9, 87076.0], [78.0, 87076.0], [78.1, 87150.0], [78.2, 87150.0], [78.3, 87442.0], [78.4, 87442.0], [78.5, 88551.0], [78.6, 88551.0], [78.7, 89133.0], [78.8, 89133.0], [78.9, 89590.0], [79.0, 89590.0], [79.1, 89791.0], [79.2, 89791.0], [79.3, 90056.0], [79.4, 90056.0], [79.5, 90482.0], [79.6, 90482.0], [79.7, 90781.0], [79.8, 90781.0], [79.9, 90849.0], [80.0, 90849.0], [80.1, 91115.0], [80.2, 91115.0], [80.3, 91304.0], [80.4, 91304.0], [80.5, 91478.0], [80.6, 91478.0], [80.7, 92969.0], [80.8, 92969.0], [80.9, 94380.0], [81.0, 94380.0], [81.1, 95684.0], [81.2, 95684.0], [81.3, 95916.0], [81.4, 95916.0], [81.5, 96042.0], [81.6, 96042.0], [81.7, 96209.0], [81.8, 96209.0], [81.9, 96691.0], [82.0, 96691.0], [82.1, 96896.0], [82.2, 96896.0], [82.3, 97067.0], [82.4, 97067.0], [82.5, 97219.0], [82.6, 97219.0], [82.7, 97267.0], [82.8, 97267.0], [82.9, 97486.0], [83.0, 97486.0], [83.1, 97847.0], [83.2, 97847.0], [83.3, 97886.0], [83.4, 97886.0], [83.5, 98104.0], [83.6, 98104.0], [83.7, 98216.0], [83.8, 98216.0], [83.9, 98444.0], [84.0, 98444.0], [84.1, 98474.0], [84.2, 98474.0], [84.3, 98734.0], [84.4, 98734.0], [84.5, 98857.0], [84.6, 98857.0], [84.7, 98921.0], [84.8, 98921.0], [84.9, 99170.0], [85.0, 99170.0], [85.1, 100675.0], [85.2, 100675.0], [85.3, 100823.0], [85.4, 100823.0], [85.5, 100934.0], [85.6, 100934.0], [85.7, 101173.0], [85.8, 101173.0], [85.9, 101400.0], [86.0, 101400.0], [86.1, 101565.0], [86.2, 101565.0], [86.3, 101714.0], [86.4, 101714.0], [86.5, 102845.0], [86.6, 102845.0], [86.7, 103141.0], [86.8, 103141.0], [86.9, 103580.0], [87.0, 103580.0], [87.1, 103787.0], [87.2, 103787.0], [87.3, 103788.0], [87.4, 103788.0], [87.5, 104510.0], [87.6, 104510.0], [87.7, 104842.0], [87.8, 104842.0], [87.9, 104876.0], [88.0, 104876.0], [88.1, 105079.0], [88.2, 105079.0], [88.3, 105162.0], [88.4, 105162.0], [88.5, 105219.0], [88.6, 105219.0], [88.7, 105234.0], [88.8, 105234.0], [88.9, 105266.0], [89.0, 105266.0], [89.1, 105611.0], [89.2, 105611.0], [89.3, 105746.0], [89.4, 105746.0], [89.5, 105929.0], [89.6, 105929.0], [89.7, 106078.0], [89.8, 106078.0], [89.9, 106206.0], [90.0, 106206.0], [90.1, 106331.0], [90.2, 106331.0], [90.3, 106445.0], [90.4, 106445.0], [90.5, 106493.0], [90.6, 106493.0], [90.7, 106654.0], [90.8, 106654.0], [90.9, 107740.0], [91.0, 107740.0], [91.1, 107797.0], [91.2, 107797.0], [91.3, 108178.0], [91.4, 108178.0], [91.5, 108377.0], [91.6, 108377.0], [91.7, 108531.0], [91.8, 108531.0], [91.9, 108650.0], [92.0, 108650.0], [92.1, 108743.0], [92.2, 108743.0], [92.3, 109012.0], [92.4, 109012.0], [92.5, 109099.0], [92.6, 109099.0], [92.7, 109268.0], [92.8, 109268.0], [92.9, 109346.0], [93.0, 109346.0], [93.1, 109525.0], [93.2, 109525.0], [93.3, 109555.0], [93.4, 109555.0], [93.5, 109771.0], [93.6, 109771.0], [93.7, 110084.0], [93.8, 110084.0], [93.9, 110179.0], [94.0, 110179.0], [94.1, 111222.0], [94.2, 111222.0], [94.3, 111369.0], [94.4, 111369.0], [94.5, 111390.0], [94.6, 111390.0], [94.7, 111498.0], [94.8, 111498.0], [94.9, 111811.0], [95.0, 111811.0], [95.1, 112280.0], [95.2, 112280.0], [95.3, 112615.0], [95.4, 112615.0], [95.5, 112822.0], [95.6, 112822.0], [95.7, 112864.0], [95.8, 112864.0], [95.9, 113129.0], [96.0, 113129.0], [96.1, 113260.0], [96.2, 113260.0], [96.3, 113344.0], [96.4, 113344.0], [96.5, 113883.0], [96.6, 113883.0], [96.7, 114002.0], [96.8, 114002.0], [96.9, 114058.0], [97.0, 114058.0], [97.1, 114147.0], [97.2, 114147.0], [97.3, 114439.0], [97.4, 114439.0], [97.5, 114569.0], [97.6, 114569.0], [97.7, 114580.0], [97.8, 114580.0], [97.9, 114884.0], [98.0, 114884.0], [98.1, 115006.0], [98.2, 115006.0], [98.3, 115163.0], [98.4, 115163.0], [98.5, 115236.0], [98.6, 115236.0], [98.7, 116128.0], [98.8, 116128.0], [98.9, 116490.0], [99.0, 116490.0], [99.1, 116686.0], [99.2, 116686.0], [99.3, 116687.0], [99.4, 116687.0], [99.5, 117018.0], [99.6, 117018.0], [99.7, 117122.0], [99.8, 117122.0], [99.9, 117326.0], [100.0, 117326.0]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 3.0, "series": [{"data": [[0.0, 1.0], [66700.0, 1.0], [69900.0, 1.0], [71500.0, 1.0], [81100.0, 2.0], [82700.0, 1.0], [85900.0, 1.0], [89100.0, 1.0], [90700.0, 1.0], [98700.0, 1.0], [103500.0, 1.0], [105100.0, 1.0], [108300.0, 1.0], [113100.0, 1.0], [34500.0, 1.0], [35300.0, 1.0], [39300.0, 1.0], [40100.0, 1.0], [42500.0, 1.0], [43300.0, 1.0], [45700.0, 1.0], [46500.0, 1.0], [47300.0, 1.0], [50500.0, 1.0], [51300.0, 1.0], [52100.0, 1.0], [55300.0, 1.0], [56900.0, 1.0], [60100.0, 1.0], [61700.0, 2.0], [65800.0, 1.0], [70600.0, 1.0], [77000.0, 1.0], [80200.0, 2.0], [81800.0, 1.0], [83400.0, 1.0], [86600.0, 1.0], [91400.0, 1.0], [96200.0, 1.0], [97800.0, 2.0], [400.0, 2.0], [109000.0, 2.0], [112200.0, 1.0], [113800.0, 1.0], [117000.0, 1.0], [700.0, 1.0], [900.0, 2.0], [1100.0, 2.0], [1500.0, 3.0], [1700.0, 1.0], [1900.0, 1.0], [2000.0, 2.0], [2300.0, 1.0], [2400.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [3000.0, 1.0], [3100.0, 2.0], [3300.0, 1.0], [3400.0, 1.0], [3600.0, 2.0], [3700.0, 1.0], [3800.0, 1.0], [4100.0, 2.0], [4200.0, 1.0], [4500.0, 1.0], [4600.0, 1.0], [69700.0, 1.0], [74500.0, 1.0], [77700.0, 2.0], [5000.0, 1.0], [80900.0, 1.0], [5300.0, 1.0], [84100.0, 1.0], [5400.0, 1.0], [5600.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [6200.0, 1.0], [6300.0, 1.0], [101700.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [6400.0, 1.0], [6800.0, 1.0], [108100.0, 1.0], [109700.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [111300.0, 2.0], [114500.0, 2.0], [7400.0, 2.0], [116100.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [7800.0, 1.0], [8100.0, 2.0], [10200.0, 1.0], [11000.0, 1.0], [11400.0, 1.0], [11600.0, 1.0], [12000.0, 1.0], [12600.0, 1.0], [12400.0, 1.0], [13000.0, 1.0], [13600.0, 1.0], [13400.0, 1.0], [14000.0, 1.0], [14200.0, 1.0], [14800.0, 1.0], [15600.0, 2.0], [16200.0, 2.0], [16000.0, 1.0], [16800.0, 1.0], [17200.0, 1.0], [17600.0, 2.0], [18000.0, 1.0], [19600.0, 1.0], [20000.0, 1.0], [21200.0, 1.0], [21600.0, 1.0], [22800.0, 1.0], [23200.0, 1.0], [23600.0, 1.0], [24000.0, 1.0], [26800.0, 1.0], [27200.0, 1.0], [28000.0, 1.0], [31600.0, 2.0], [32000.0, 1.0], [32800.0, 2.0], [36000.0, 1.0], [36800.0, 1.0], [48800.0, 1.0], [52000.0, 1.0], [56000.0, 1.0], [56800.0, 1.0], [59200.0, 1.0], [60800.0, 1.0], [64800.0, 1.0], [67200.0, 1.0], [78400.0, 1.0], [84800.0, 1.0], [96000.0, 1.0], [100800.0, 1.0], [105600.0, 1.0], [115200.0, 1.0], [70300.0, 1.0], [76700.0, 1.0], [78300.0, 1.0], [79900.0, 1.0], [81500.0, 1.0], [83100.0, 1.0], [89500.0, 1.0], [91100.0, 1.0], [94300.0, 1.0], [95900.0, 1.0], [99100.0, 1.0], [108700.0, 1.0], [115100.0, 1.0], [33100.0, 1.0], [33900.0, 1.0], [34700.0, 1.0], [39500.0, 1.0], [40300.0, 1.0], [41900.0, 1.0], [46700.0, 1.0], [49100.0, 1.0], [50700.0, 1.0], [56300.0, 1.0], [61100.0, 1.0], [63500.0, 1.0], [65100.0, 1.0], [67800.0, 1.0], [74200.0, 1.0], [77400.0, 2.0], [79000.0, 1.0], [87000.0, 1.0], [96600.0, 1.0], [98200.0, 1.0], [101400.0, 1.0], [106200.0, 1.0], [112600.0, 1.0], [68500.0, 1.0], [86100.0, 1.0], [98900.0, 1.0], [103700.0, 2.0], [108500.0, 1.0], [110100.0, 1.0], [113300.0, 1.0], [16500.0, 1.0], [16900.0, 1.0], [18100.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [19300.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [21700.0, 1.0], [22100.0, 1.0], [22500.0, 1.0], [27300.0, 1.0], [27700.0, 1.0], [28500.0, 2.0], [31300.0, 1.0], [35400.0, 1.0], [40200.0, 1.0], [41800.0, 1.0], [42600.0, 1.0], [45000.0, 2.0], [45800.0, 1.0], [49000.0, 1.0], [49800.0, 1.0], [51400.0, 1.0], [53800.0, 1.0], [54600.0, 1.0], [55400.0, 1.0], [56200.0, 1.0], [59400.0, 1.0], [60200.0, 1.0], [61000.0, 1.0], [66000.0, 1.0], [74000.0, 1.0], [80400.0, 1.0], [83600.0, 2.0], [90000.0, 1.0], [102800.0, 1.0], [106000.0, 1.0], [109200.0, 1.0], [114000.0, 2.0], [67500.0, 1.0], [73900.0, 1.0], [77100.0, 1.0], [78700.0, 1.0], [81900.0, 1.0], [85100.0, 1.0], [86700.0, 1.0], [101100.0, 1.0], [105900.0, 1.0], [117100.0, 1.0], [33300.0, 1.0], [34100.0, 1.0], [34900.0, 1.0], [35700.0, 1.0], [39700.0, 1.0], [40500.0, 1.0], [42900.0, 1.0], [46100.0, 1.0], [46900.0, 1.0], [51700.0, 1.0], [52500.0, 1.0], [54900.0, 1.0], [59700.0, 1.0], [62100.0, 1.0], [65300.0, 1.0], [68200.0, 1.0], [71400.0, 1.0], [74600.0, 1.0], [84200.0, 1.0], [87400.0, 1.0], [97000.0, 1.0], [105000.0, 1.0], [106600.0, 1.0], [111400.0, 1.0], [65700.0, 1.0], [67300.0, 1.0], [70500.0, 1.0], [73700.0, 1.0], [84900.0, 1.0], [86500.0, 1.0], [89700.0, 1.0], [91300.0, 1.0], [92900.0, 1.0], [100900.0, 1.0], [105700.0, 1.0], [8700.0, 1.0], [8500.0, 1.0], [9700.0, 1.0], [9900.0, 1.0], [10300.0, 1.0], [10700.0, 1.0], [10500.0, 1.0], [10900.0, 1.0], [11300.0, 2.0], [11500.0, 1.0], [11700.0, 1.0], [12100.0, 1.0], [12900.0, 1.0], [13300.0, 1.0], [13500.0, 1.0], [13700.0, 2.0], [14100.0, 1.0], [14300.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [15300.0, 1.0], [15500.0, 1.0], [15900.0, 1.0], [16100.0, 1.0], [17000.0, 1.0], [18200.0, 1.0], [19400.0, 1.0], [18600.0, 1.0], [19000.0, 1.0], [19800.0, 1.0], [21000.0, 1.0], [21400.0, 1.0], [20600.0, 1.0], [22200.0, 1.0], [23000.0, 1.0], [23400.0, 1.0], [25400.0, 1.0], [27400.0, 1.0], [28600.0, 1.0], [30200.0, 1.0], [30600.0, 1.0], [31000.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [34800.0, 1.0], [38000.0, 1.0], [43600.0, 1.0], [50000.0, 1.0], [50800.0, 1.0], [53200.0, 1.0], [55600.0, 2.0], [57200.0, 2.0], [58000.0, 1.0], [58800.0, 1.0], [60400.0, 1.0], [62000.0, 1.0], [66400.0, 1.0], [68000.0, 1.0], [71200.0, 1.0], [76000.0, 1.0], [82400.0, 1.0], [85600.0, 1.0], [90400.0, 1.0], [96800.0, 1.0], [98400.0, 2.0], [104800.0, 2.0], [106400.0, 2.0], [111200.0, 1.0], [112800.0, 2.0], [114400.0, 1.0], [69500.0, 1.0], [71100.0, 1.0], [74300.0, 1.0], [75900.0, 1.0], [79100.0, 1.0], [82300.0, 1.0], [83900.0, 1.0], [85500.0, 1.0], [87100.0, 1.0], [101500.0, 1.0], [103100.0, 1.0], [106300.0, 1.0], [109500.0, 2.0], [35100.0, 1.0], [35900.0, 1.0], [39900.0, 1.0], [43100.0, 1.0], [46300.0, 1.0], [47100.0, 1.0], [48700.0, 1.0], [49500.0, 1.0], [51100.0, 1.0], [53500.0, 1.0], [55900.0, 1.0], [61500.0, 1.0], [62300.0, 1.0], [63100.0, 1.0], [64700.0, 1.0], [65500.0, 1.0], [67000.0, 1.0], [68600.0, 1.0], [71800.0, 1.0], [81400.0, 1.0], [83000.0, 1.0], [84600.0, 1.0], [86200.0, 1.0], [97400.0, 1.0], [100600.0, 1.0], [108600.0, 1.0], [111800.0, 1.0], [115000.0, 1.0], [116600.0, 2.0], [66100.0, 1.0], [67700.0, 1.0], [69300.0, 2.0], [78900.0, 1.0], [80500.0, 1.0], [82100.0, 1.0], [85300.0, 1.0], [88500.0, 1.0], [98100.0, 1.0], [104500.0, 1.0], [107700.0, 2.0], [109300.0, 1.0], [114100.0, 1.0], [117300.0, 1.0], [16700.0, 1.0], [17500.0, 1.0], [17900.0, 1.0], [18700.0, 2.0], [19100.0, 1.0], [21900.0, 1.0], [22700.0, 1.0], [23900.0, 1.0], [25100.0, 1.0], [25500.0, 1.0], [26700.0, 1.0], [27100.0, 1.0], [27900.0, 1.0], [28300.0, 1.0], [29900.0, 1.0], [30700.0, 1.0], [31100.0, 1.0], [31900.0, 1.0], [32300.0, 1.0], [33400.0, 1.0], [34200.0, 1.0], [39000.0, 1.0], [43800.0, 1.0], [49400.0, 1.0], [51000.0, 1.0], [51800.0, 1.0], [53400.0, 1.0], [54200.0, 1.0], [55000.0, 1.0], [56600.0, 1.0], [58200.0, 1.0], [59000.0, 2.0], [60600.0, 1.0], [61400.0, 1.0], [62200.0, 1.0], [63000.0, 1.0], [66800.0, 1.0], [78000.0, 1.0], [82800.0, 1.0], [84400.0, 1.0], [86000.0, 1.0], [90800.0, 1.0], [95600.0, 1.0], [97200.0, 2.0], [98800.0, 1.0], [105200.0, 3.0], [110000.0, 1.0], [113200.0, 1.0], [114800.0, 1.0], [116400.0, 1.0]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 117300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 459.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 459.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 36.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.646083065E12, "maxY": 314.6, "series": [{"data": [[1.6460831E12, 177.23076923076925], [1.646083185E12, 150.5], [1.646083145E12, 262.2631578947368], [1.64608323E12, 38.0], [1.646083095E12, 148.35294117647058], [1.64608318E12, 163.5], [1.64608314E12, 279.68749999999994], [1.646083225E12, 52.0], [1.64608324E12, 12.0], [1.64608311E12, 230.46153846153845], [1.646083195E12, 118.0], [1.6460832E12, 104.5], [1.64608307E12, 17.705882352941178], [1.646083155E12, 229.0], [1.646083105E12, 200.3], [1.64608319E12, 135.0], [1.646083065E12, 6.0], [1.64608315E12, 244.0588235294118], [1.646083235E12, 24.5], [1.64608308E12, 65.63636363636364], [1.646083165E12, 202.0], [1.646083125E12, 314.6], [1.64608321E12, 88.0], [1.64608316E12, 216.0], [1.646083245E12, 3.0], [1.646083115E12, 260.0454545454545], [1.64608312E12, 282.89473684210526], [1.646083205E12, 97.5], [1.646083075E12, 43.13333333333334], [1.64608309E12, 121.86666666666666], [1.646083175E12, 174.5], [1.646083135E12, 295.1333333333334], [1.64608322E12, 63.5], [1.646083085E12, 97.5], [1.64608317E12, 187.0], [1.64608313E12, 310.6875], [1.646083215E12, 74.5]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.646083245E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5678.0, "minX": 1.0, "maxY": 117326.0, "series": [{"data": [[2.0, 117122.0], [3.0, 117018.0], [4.0, 116687.0], [5.0, 116686.0], [6.0, 58494.0], [7.0, 58454.0], [8.0, 58075.0], [9.0, 115163.0], [10.0, 39105.666666666664], [11.0, 58204.0], [12.0, 58052.0], [13.0, 114569.0], [14.0, 58095.5], [15.0, 114147.0], [16.0, 57993.0], [17.0, 58040.5], [18.0, 113883.0], [19.0, 57824.0], [20.0, 113260.0], [21.0, 113129.0], [22.0, 39423.0], [23.0, 112615.0], [24.0, 57661.5], [25.0, 57987.5], [26.0, 111811.0], [27.0, 57431.5], [28.0, 57406.0], [29.0, 57513.5], [30.0, 111222.0], [31.0, 56940.5], [32.0, 57037.5], [33.0, 109771.0], [34.0, 39332.333333333336], [35.0, 109525.0], [37.0, 56892.5], [36.0, 109346.0], [39.0, 109012.0], [38.0, 109099.0], [41.0, 56865.5], [40.0, 108743.0], [43.0, 56845.0], [42.0, 108531.0], [44.0, 56791.5], [45.0, 107740.0], [46.0, 56763.5], [47.0, 106493.0], [48.0, 39509.333333333336], [49.0, 106445.0], [51.0, 39597.0], [50.0, 106331.0], [53.0, 56245.5], [52.0, 106078.0], [54.0, 56193.0], [55.0, 56238.0], [57.0, 56123.0], [56.0, 105266.0], [58.0, 56193.5], [59.0, 105219.0], [60.0, 56274.5], [61.0, 104876.0], [62.0, 56240.5], [63.0, 56126.0], [64.0, 55832.0], [66.0, 55887.0], [67.0, 103141.0], [65.0, 103787.0], [70.0, 55135.0], [71.0, 101400.0], [69.0, 101714.0], [68.0, 102845.0], [75.0, 100675.0], [74.0, 100823.0], [73.0, 100934.0], [72.0, 101173.0], [79.0, 98734.0], [78.0, 98921.0], [77.0, 98857.0], [76.0, 99170.0], [83.0, 54158.0], [82.0, 98216.0], [81.0, 98474.0], [80.0, 98444.0], [84.0, 54094.0], [87.0, 54014.5], [86.0, 97486.0], [85.0, 97886.0], [89.0, 54008.5], [90.0, 53985.0], [91.0, 96691.0], [88.0, 97219.0], [92.0, 53790.0], [93.0, 53766.5], [94.0, 39730.66666666667], [95.0, 95684.0], [97.0, 52490.5], [99.0, 51745.0], [98.0, 91478.0], [96.0, 94380.0], [102.0, 51707.5], [103.0, 90482.0], [101.0, 90849.0], [100.0, 91115.0], [105.0, 38587.66666666667], [107.0, 89133.0], [106.0, 89590.0], [104.0, 90056.0], [108.0, 50931.5], [110.0, 50352.0], [111.0, 38179.66666666667], [109.0, 87442.0], [113.0, 50340.0], [114.0, 50353.5], [115.0, 86234.0], [112.0, 86789.0], [116.0, 50239.0], [118.0, 50247.0], [119.0, 85630.0], [117.0, 86034.0], [120.0, 38383.0], [123.0, 84925.0], [122.0, 85188.0], [121.0, 85346.0], [125.0, 49990.0], [126.0, 49985.0], [127.0, 49939.0], [124.0, 84855.0], [130.0, 49824.0], [131.0, 49892.0], [132.0, 49856.5], [134.0, 49786.0], [135.0, 82831.0], [133.0, 83144.0], [129.0, 83945.0], [128.0, 84129.0], [136.0, 49729.5], [137.0, 49674.5], [138.0, 49674.5], [140.0, 49576.5], [143.0, 49499.0], [142.0, 81552.0], [141.0, 81812.0], [139.0, 82195.0], [144.0, 49426.5], [146.0, 49455.5], [147.0, 49332.5], [149.0, 49288.0], [151.0, 49234.0], [150.0, 80245.0], [148.0, 80462.0], [145.0, 81106.0], [152.0, 48938.0], [153.0, 48904.0], [154.0, 48936.0], [156.0, 48788.5], [158.0, 38931.66666666667], [159.0, 77762.0], [157.0, 78359.0], [155.0, 78759.0], [160.0, 48665.5], [161.0, 48651.0], [167.0, 75906.0], [166.0, 76059.0], [165.0, 76700.0], [164.0, 77092.0], [163.0, 77161.0], [162.0, 77440.0], [171.0, 47587.5], [172.0, 47559.0], [174.0, 47496.5], [175.0, 46686.5], [173.0, 73929.0], [170.0, 74396.0], [169.0, 74518.0], [168.0, 74624.0], [176.0, 46575.5], [177.0, 46578.0], [179.0, 46530.5], [181.0, 46320.5], [182.0, 46295.5], [183.0, 69971.0], [180.0, 70617.0], [178.0, 71250.0], [184.0, 46160.0], [186.0, 38303.333333333336], [188.0, 45831.5], [190.0, 45742.5], [191.0, 68044.0], [189.0, 68548.0], [187.0, 69301.0], [185.0, 69531.0], [192.0, 45681.0], [194.0, 45619.0], [196.0, 45588.5], [197.0, 45553.5], [199.0, 66735.0], [198.0, 66803.0], [195.0, 67342.0], [193.0, 67742.0], [207.0, 45178.0], [206.0, 65391.0], [205.0, 65520.0], [204.0, 65723.0], [203.0, 65831.0], [202.0, 66019.0], [201.0, 66165.0], [200.0, 66486.0], [209.0, 45085.0], [210.0, 44539.5], [215.0, 62173.0], [214.0, 62291.0], [213.0, 62399.0], [212.0, 63068.0], [211.0, 63154.0], [208.0, 64852.0], [220.0, 38331.333333333336], [223.0, 43993.0], [222.0, 61040.0], [221.0, 61151.0], [219.0, 61509.0], [218.0, 61746.0], [217.0, 61797.0], [216.0, 62047.0], [224.0, 43953.0], [225.0, 43904.0], [226.0, 43891.5], [228.0, 43741.0], [230.0, 43622.0], [231.0, 43564.5], [229.0, 59486.0], [227.0, 60156.0], [233.0, 43563.5], [235.0, 43304.0], [236.0, 42937.5], [237.0, 42950.5], [239.0, 56832.0], [238.0, 56927.0], [234.0, 58245.0], [232.0, 59009.0], [247.0, 55415.0], [246.0, 55605.0], [245.0, 55682.0], [244.0, 55941.0], [243.0, 56058.0], [242.0, 56296.0], [241.0, 56381.0], [240.0, 56667.0], [248.0, 42646.5], [250.0, 27452.0], [249.0, 42633.5], [252.0, 34366.0], [253.0, 27359.0], [254.0, 31002.0], [255.0, 37280.0], [258.0, 16187.5], [256.0, 42363.5], [257.0, 53459.0], [259.0, 34160.0], [268.0, 39039.333333333336], [271.0, 26239.75], [270.0, 33170.0], [269.0, 51180.0], [261.0, 16714.5], [260.0, 52505.0], [262.0, 34413.333333333336], [263.0, 42157.5], [264.0, 42084.0], [267.0, 42028.0], [266.0, 24135.666666666668], [273.0, 42138.5], [277.0, 18518.5], [276.0, 50079.0], [278.0, 33702.0], [279.0, 41880.0], [272.0, 50866.0], [281.0, 29095.666666666664], [287.0, 25472.0], [280.0, 49418.0], [282.0, 34743.0], [283.0, 33395.666666666664], [284.0, 41911.0], [275.0, 34089.0], [285.0, 10117.0], [286.0, 41946.5], [301.0, 45009.0], [288.0, 41380.0], [290.0, 41348.5], [289.0, 25902.5], [292.0, 39617.333333333336], [293.0, 46577.0], [294.0, 46363.0], [299.0, 32020.333333333336], [298.0, 5678.0], [302.0, 12487.0], [297.0, 45894.0], [296.0, 29982.5], [300.0, 45072.0], [291.0, 14290.0], [318.0, 40361.0], [307.0, 20375.0], [308.0, 29279.666666666668], [310.0, 42627.0], [305.0, 43627.0], [304.0, 27768.5], [309.0, 42987.0], [316.0, 18749.0], [319.0, 23945.0], [317.0, 40597.0], [315.0, 41836.0], [314.0, 9967.0], [313.0, 41980.0], [312.0, 26545.5], [321.0, 39851.0], [323.0, 39701.0], [322.0, 24040.0], [320.0, 40237.0], [1.0, 117326.0]], "isOverall": false, "label": "weather", "isController": false}, {"data": [[162.48799999999983, 54724.54199999998]], "isOverall": false, "label": "weather-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 323.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33.0, "minX": 1.646083065E12, "maxY": 3913.2, "series": [{"data": [[1.6460831E12, 645.8], [1.646083185E12, 695.8], [1.646083145E12, 3294.8], [1.64608323E12, 746.6], [1.646083095E12, 843.0], [1.64608318E12, 595.8], [1.64608314E12, 3144.2], [1.646083225E12, 648.0], [1.64608324E12, 642.6], [1.64608311E12, 644.4], [1.646083195E12, 844.4], [1.6460832E12, 497.2], [1.64608307E12, 843.0], [1.646083155E12, 644.4], [1.646083105E12, 497.2], [1.64608319E12, 843.0], [1.646083065E12, 49.4], [1.64608315E12, 1314.2], [1.646083235E12, 593.8], [1.64608308E12, 546.4], [1.646083165E12, 744.4], [1.646083125E12, 3564.6], [1.64608321E12, 742.4], [1.64608316E12, 645.8], [1.646083245E12, 249.2], [1.646083115E12, 3913.2], [1.64608312E12, 2825.0], [1.646083205E12, 198.6], [1.646083075E12, 745.8], [1.64608309E12, 745.8], [1.646083175E12, 495.8], [1.646083135E12, 2625.6], [1.64608322E12, 497.0], [1.646083085E12, 693.8], [1.64608317E12, 745.8], [1.64608313E12, 3146.2], [1.646083215E12, 592.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6460831E12, 429.0], [1.646083185E12, 462.0], [1.646083145E12, 462.0], [1.64608323E12, 495.0], [1.646083095E12, 561.0], [1.64608318E12, 396.0], [1.64608314E12, 363.0], [1.646083225E12, 429.0], [1.64608324E12, 429.0], [1.64608311E12, 429.0], [1.646083195E12, 561.0], [1.6460832E12, 330.0], [1.64608307E12, 561.0], [1.646083155E12, 429.0], [1.646083105E12, 330.0], [1.64608319E12, 561.0], [1.646083065E12, 33.0], [1.64608315E12, 528.0], [1.646083235E12, 396.0], [1.64608308E12, 363.0], [1.646083165E12, 495.0], [1.646083125E12, 297.0], [1.64608321E12, 495.0], [1.64608316E12, 429.0], [1.646083245E12, 165.0], [1.646083115E12, 528.0], [1.64608312E12, 495.0], [1.646083205E12, 132.0], [1.646083075E12, 495.0], [1.64608309E12, 495.0], [1.646083175E12, 330.0], [1.646083135E12, 363.0], [1.64608322E12, 330.0], [1.646083085E12, 462.0], [1.64608317E12, 495.0], [1.64608313E12, 363.0], [1.646083215E12, 396.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.646083245E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 498.0, "minX": 1.646083065E12, "maxY": 116967.8, "series": [{"data": [[1.6460831E12, 21714.846153846152], [1.646083185E12, 79816.14285714286], [1.646083145E12, 43705.368421052626], [1.64608323E12, 109070.53333333333], [1.646083095E12, 18226.70588235294], [1.64608318E12, 76706.91666666666], [1.64608314E12, 39346.375], [1.646083225E12, 106073.23076923078], [1.64608324E12, 114814.23076923077], [1.64608311E12, 27996.53846153846], [1.646083195E12, 85828.05882352943], [1.6460832E12, 89779.0], [1.64608307E12, 2186.0000000000005], [1.646083155E12, 59544.07692307693], [1.646083105E12, 24424.9], [1.64608319E12, 82856.23529411767], [1.646083065E12, 498.0], [1.64608315E12, 53978.41176470588], [1.646083235E12, 112300.33333333333], [1.64608308E12, 8116.454545454545], [1.646083165E12, 66072.06666666667], [1.646083125E12, 26386.4], [1.64608321E12, 97133.6], [1.64608316E12, 62106.769230769234], [1.646083245E12, 116967.8], [1.646083115E12, 23451.27272727273], [1.64608312E12, 28288.36842105263], [1.646083205E12, 92532.75], [1.646083075E12, 5322.799999999999], [1.64608309E12, 15045.733333333334], [1.646083175E12, 72758.8], [1.646083135E12, 37541.13333333334], [1.64608322E12, 104166.7], [1.646083085E12, 12042.42857142857], [1.64608317E12, 69072.93333333333], [1.64608313E12, 32509.625000000004], [1.646083215E12, 100200.83333333334]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.646083245E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 498.0, "minX": 1.646083065E12, "maxY": 116967.8, "series": [{"data": [[1.6460831E12, 21714.692307692305], [1.646083185E12, 79815.7857142857], [1.646083145E12, 38624.52631578948], [1.64608323E12, 109070.53333333333], [1.646083095E12, 18226.58823529412], [1.64608318E12, 76706.83333333333], [1.64608314E12, 34184.31250000001], [1.646083225E12, 106073.15384615384], [1.64608324E12, 114814.23076923077], [1.64608311E12, 27996.46153846154], [1.646083195E12, 85827.82352941176], [1.6460832E12, 89779.0], [1.64608307E12, 2185.9411764705883], [1.646083155E12, 59544.0], [1.646083105E12, 24424.8], [1.64608319E12, 82856.23529411767], [1.646083065E12, 498.0], [1.64608315E12, 52719.529411764706], [1.646083235E12, 112300.33333333333], [1.64608308E12, 8116.0], [1.646083165E12, 66071.93333333333], [1.646083125E12, 23524.466666666667], [1.64608321E12, 97133.46666666666], [1.64608316E12, 62106.69230769231], [1.646083245E12, 116967.8], [1.646083115E12, 23115.045454545456], [1.64608312E12, 27468.842105263157], [1.646083205E12, 92532.75], [1.646083075E12, 5322.666666666666], [1.64608309E12, 15045.4], [1.646083175E12, 72758.6], [1.646083135E12, 33941.73333333333], [1.64608322E12, 104166.7], [1.646083085E12, 12042.357142857141], [1.64608317E12, 69072.73333333334], [1.64608313E12, 29178.499999999996], [1.646083215E12, 100200.41666666666]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.646083245E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.5833333333333333, "minX": 1.646083065E12, "maxY": 25.0, "series": [{"data": [[1.6460831E12, 1.153846153846154], [1.646083185E12, 1.2142857142857142], [1.646083145E12, 0.7894736842105262], [1.64608323E12, 1.2666666666666666], [1.646083095E12, 1.588235294117647], [1.64608318E12, 0.6666666666666666], [1.64608314E12, 0.8749999999999999], [1.646083225E12, 1.0000000000000002], [1.64608324E12, 0.7692307692307693], [1.64608311E12, 1.153846153846154], [1.646083195E12, 0.7647058823529411], [1.6460832E12, 0.8], [1.64608307E12, 2.235294117647059], [1.646083155E12, 0.7692307692307693], [1.646083105E12, 0.8999999999999999], [1.64608319E12, 1.1176470588235294], [1.646083065E12, 25.0], [1.64608315E12, 0.9999999999999999], [1.646083235E12, 0.5833333333333333], [1.64608308E12, 1.3636363636363638], [1.646083165E12, 0.9333333333333333], [1.646083125E12, 1.0666666666666667], [1.64608321E12, 2.466666666666667], [1.64608316E12, 0.6153846153846155], [1.646083245E12, 1.2], [1.646083115E12, 0.9090909090909092], [1.64608312E12, 0.7894736842105262], [1.646083205E12, 1.0], [1.646083075E12, 1.0000000000000002], [1.64608309E12, 1.0], [1.646083175E12, 0.9], [1.646083135E12, 0.9333333333333332], [1.64608322E12, 0.9], [1.646083085E12, 1.142857142857143], [1.64608317E12, 0.9333333333333332], [1.64608313E12, 0.6875], [1.646083215E12, 0.75]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.646083245E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 498.0, "minX": 1.646083065E12, "maxY": 117326.0, "series": [{"data": [[1.6460831E12, 22804.0], [1.646083185E12, 81187.0], [1.646083145E12, 54281.0], [1.64608323E12, 110179.0], [1.646083095E12, 19619.0], [1.64608318E12, 78011.0], [1.64608314E12, 50866.0], [1.646083225E12, 107797.0], [1.64608324E12, 116490.0], [1.64608311E12, 29978.0], [1.646083195E12, 87150.0], [1.6460832E12, 91115.0], [1.64608307E12, 3658.0], [1.646083155E12, 60848.0], [1.646083105E12, 26724.0], [1.64608319E12, 84266.0], [1.646083065E12, 498.0], [1.64608315E12, 57284.0], [1.646083235E12, 113344.0], [1.64608308E12, 10341.0], [1.646083165E12, 67342.0], [1.646083125E12, 40237.0], [1.64608321E12, 98474.0], [1.64608316E12, 63545.0], [1.646083245E12, 117326.0], [1.646083115E12, 33170.0], [1.64608312E12, 36065.0], [1.646083205E12, 94380.0], [1.646083075E12, 6640.0], [1.64608309E12, 16557.0], [1.646083175E12, 74396.0], [1.646083135E12, 47311.0], [1.64608322E12, 105219.0], [1.646083085E12, 13554.0], [1.64608317E12, 70617.0], [1.64608313E12, 43828.0], [1.646083215E12, 101714.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6460831E12, 22769.6], [1.646083185E12, 81146.5], [1.646083145E12, 54090.0], [1.64608323E12, 110122.0], [1.646083095E12, 19474.2], [1.64608318E12, 77936.3], [1.64608314E12, 50850.4], [1.646083225E12, 107339.8], [1.64608324E12, 116345.2], [1.64608311E12, 29462.0], [1.646083195E12, 87090.8], [1.6460832E12, 91088.4], [1.64608307E12, 3469.2], [1.646083155E12, 60764.0], [1.646083105E12, 26605.0], [1.64608319E12, 84156.4], [1.646083065E12, 498.0], [1.64608315E12, 57234.3], [1.646083235E12, 113318.8], [1.64608308E12, 10315.2], [1.646083165E12, 67294.6], [1.646083125E12, 40237.0], [1.64608321E12, 98319.2], [1.64608316E12, 63388.6], [1.646083245E12, 117326.0], [1.646083115E12, 32980.3], [1.64608312E12, 36019.4], [1.646083205E12, 94380.0], [1.646083075E12, 6593.2], [1.64608309E12, 16400.4], [1.646083175E12, 74382.0], [1.646083135E12, 47280.0], [1.64608322E12, 105205.0], [1.646083085E12, 13433.0], [1.64608317E12, 70552.2], [1.64608313E12, 43787.8], [1.646083215E12, 101669.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6460831E12, 22804.0], [1.646083185E12, 81187.0], [1.646083145E12, 54281.0], [1.64608323E12, 110179.0], [1.646083095E12, 19619.0], [1.64608318E12, 78011.0], [1.64608314E12, 50866.0], [1.646083225E12, 107797.0], [1.64608324E12, 116490.0], [1.64608311E12, 29978.0], [1.646083195E12, 87150.0], [1.6460832E12, 91115.0], [1.64608307E12, 3658.0], [1.646083155E12, 60848.0], [1.646083105E12, 26724.0], [1.64608319E12, 84266.0], [1.646083065E12, 498.0], [1.64608315E12, 57284.0], [1.646083235E12, 113344.0], [1.64608308E12, 10341.0], [1.646083165E12, 67342.0], [1.646083125E12, 40237.0], [1.64608321E12, 98474.0], [1.64608316E12, 63545.0], [1.646083245E12, 117326.0], [1.646083115E12, 33170.0], [1.64608312E12, 36065.0], [1.646083205E12, 94380.0], [1.646083075E12, 6640.0], [1.64608309E12, 16557.0], [1.646083175E12, 74396.0], [1.646083135E12, 47311.0], [1.64608322E12, 105219.0], [1.646083085E12, 13554.0], [1.64608317E12, 70617.0], [1.64608313E12, 43828.0], [1.646083215E12, 101714.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6460831E12, 22804.0], [1.646083185E12, 81187.0], [1.646083145E12, 54281.0], [1.64608323E12, 110179.0], [1.646083095E12, 19619.0], [1.64608318E12, 78011.0], [1.64608314E12, 50866.0], [1.646083225E12, 107797.0], [1.64608324E12, 116490.0], [1.64608311E12, 29978.0], [1.646083195E12, 87150.0], [1.6460832E12, 91115.0], [1.64608307E12, 3658.0], [1.646083155E12, 60848.0], [1.646083105E12, 26724.0], [1.64608319E12, 84266.0], [1.646083065E12, 498.0], [1.64608315E12, 57284.0], [1.646083235E12, 113344.0], [1.64608308E12, 10341.0], [1.646083165E12, 67342.0], [1.646083125E12, 40237.0], [1.64608321E12, 98474.0], [1.64608316E12, 63545.0], [1.646083245E12, 117326.0], [1.646083115E12, 33170.0], [1.64608312E12, 36065.0], [1.646083205E12, 94380.0], [1.646083075E12, 6640.0], [1.64608309E12, 16557.0], [1.646083175E12, 74396.0], [1.646083135E12, 47311.0], [1.64608322E12, 105219.0], [1.646083085E12, 13554.0], [1.64608317E12, 70617.0], [1.64608313E12, 43828.0], [1.646083215E12, 101714.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6460831E12, 19804.0], [1.646083185E12, 78359.0], [1.646083145E12, 51093.0], [1.64608323E12, 107740.0], [1.646083095E12, 16703.0], [1.64608318E12, 74518.0], [1.64608314E12, 48725.0], [1.646083225E12, 105162.0], [1.64608324E12, 113883.0], [1.64608311E12, 26802.0], [1.646083195E12, 84414.0], [1.6460832E12, 87442.0], [1.64608307E12, 780.0], [1.646083155E12, 58074.0], [1.646083105E12, 23012.0], [1.64608319E12, 81454.0], [1.646083065E12, 498.0], [1.64608315E12, 54685.0], [1.646083235E12, 111222.0], [1.64608308E12, 6865.0], [1.646083165E12, 64749.0], [1.646083125E12, 36841.0], [1.64608321E12, 95684.0], [1.64608316E12, 61040.0], [1.646083245E12, 116686.0], [1.646083115E12, 30233.0], [1.64608312E12, 33316.0], [1.646083205E12, 91304.0], [1.646083075E12, 3797.0], [1.64608309E12, 13678.0], [1.646083175E12, 71110.0], [1.646083135E12, 45009.0], [1.64608322E12, 102845.0], [1.646083085E12, 10762.0], [1.64608317E12, 67596.0], [1.64608313E12, 40361.0], [1.646083215E12, 98444.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6460831E12, 21732.0], [1.646083185E12, 80099.5], [1.646083145E12, 52112.5], [1.64608323E12, 109099.0], [1.646083095E12, 18278.0], [1.64608318E12, 77126.5], [1.64608314E12, 49510.0], [1.646083225E12, 106078.0], [1.64608324E12, 114580.0], [1.64608311E12, 27973.0], [1.646083195E12, 85914.0], [1.6460832E12, 89923.5], [1.64608307E12, 2079.0], [1.646083155E12, 59486.0], [1.646083105E12, 23999.0], [1.64608319E12, 82831.0], [1.646083065E12, 498.0], [1.64608315E12, 55999.5], [1.646083235E12, 112447.5], [1.64608308E12, 7742.0], [1.646083165E12, 66019.0], [1.646083125E12, 39538.0], [1.64608321E12, 97219.0], [1.64608316E12, 62047.0], [1.646083245E12, 117018.0], [1.646083115E12, 31801.5], [1.64608312E12, 34837.0], [1.646083205E12, 92223.5], [1.646083075E12, 5405.0], [1.64608309E12, 14856.0], [1.646083175E12, 72802.5], [1.646083135E12, 46363.0], [1.64608322E12, 104149.0], [1.646083085E12, 11848.5], [1.64608317E12, 69301.0], [1.64608313E12, 42627.0], [1.646083215E12, 100749.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.646083245E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 5678.0, "minX": 1.0, "maxY": 73714.0, "series": [{"data": [[1.0, 73714.0], [4.0, 59170.5], [2.0, 64749.0], [5.0, 46045.5], [3.0, 61309.5], [6.0, 37102.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 9469.5], [2.0, 5678.0], [1.0, 12487.0], [5.0, 13443.0], [6.0, 5862.0], [3.0, 9967.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 73714.0, "series": [{"data": [[1.0, 73714.0], [4.0, 59170.5], [2.0, 64749.0], [5.0, 46045.5], [3.0, 61309.0], [6.0, 37102.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0], [2.0, 0.0], [1.0, 0.0], [5.0, 0.0], [6.0, 0.0], [3.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 6.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.6, "minX": 1.646083065E12, "maxY": 8.8, "series": [{"data": [[1.64608308E12, 8.0], [1.6460831E12, 8.4], [1.646083125E12, 7.8], [1.646083095E12, 8.2], [1.646083115E12, 8.4], [1.64608312E12, 8.8], [1.646083075E12, 8.0], [1.64608309E12, 8.0], [1.64608311E12, 8.6], [1.64608307E12, 7.8], [1.646083085E12, 8.2], [1.646083105E12, 8.2], [1.646083065E12, 1.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.646083125E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.646083065E12, "maxY": 3.4, "series": [{"data": [[1.6460831E12, 2.6], [1.646083185E12, 2.8], [1.646083145E12, 2.8], [1.64608323E12, 3.0], [1.646083095E12, 3.4], [1.64608318E12, 2.4], [1.64608314E12, 2.2], [1.646083225E12, 2.6], [1.64608324E12, 2.6], [1.64608311E12, 2.6], [1.646083195E12, 3.4], [1.6460832E12, 2.0], [1.64608307E12, 3.4], [1.646083155E12, 2.6], [1.646083105E12, 2.0], [1.64608319E12, 3.4], [1.646083065E12, 0.2], [1.64608315E12, 3.2], [1.646083235E12, 2.4], [1.64608308E12, 2.2], [1.646083165E12, 3.0], [1.646083125E12, 1.8], [1.64608321E12, 3.0], [1.64608316E12, 2.6], [1.646083245E12, 1.0], [1.646083115E12, 3.2], [1.64608312E12, 3.0], [1.646083205E12, 0.8], [1.646083075E12, 3.0], [1.64608309E12, 3.0], [1.646083175E12, 2.0], [1.646083135E12, 2.2], [1.64608322E12, 2.0], [1.646083085E12, 2.8], [1.64608317E12, 3.0], [1.64608313E12, 2.2], [1.646083215E12, 2.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.646083125E12, 1.2], [1.646083135E12, 0.8], [1.646083145E12, 1.0], [1.646083115E12, 1.2], [1.64608312E12, 0.8], [1.64608313E12, 1.0], [1.64608314E12, 1.0], [1.64608315E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.646083245E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.646083065E12, "maxY": 3.4, "series": [{"data": [[1.646083125E12, 1.2], [1.646083135E12, 0.8], [1.646083145E12, 1.0], [1.646083115E12, 1.2], [1.64608312E12, 0.8], [1.64608313E12, 1.0], [1.64608314E12, 1.0], [1.64608315E12, 0.2]], "isOverall": false, "label": "weather-failure", "isController": false}, {"data": [[1.6460831E12, 2.6], [1.646083185E12, 2.8], [1.646083145E12, 2.8], [1.64608323E12, 3.0], [1.646083095E12, 3.4], [1.64608318E12, 2.4], [1.64608314E12, 2.2], [1.646083225E12, 2.6], [1.64608324E12, 2.6], [1.64608311E12, 2.6], [1.646083195E12, 3.4], [1.6460832E12, 2.0], [1.64608307E12, 3.4], [1.646083155E12, 2.6], [1.646083105E12, 2.0], [1.64608319E12, 3.4], [1.646083065E12, 0.2], [1.64608315E12, 3.2], [1.646083235E12, 2.4], [1.64608308E12, 2.2], [1.646083165E12, 3.0], [1.646083125E12, 1.8], [1.64608321E12, 3.0], [1.64608316E12, 2.6], [1.646083245E12, 1.0], [1.646083115E12, 3.2], [1.64608312E12, 3.0], [1.646083205E12, 0.8], [1.646083075E12, 3.0], [1.64608309E12, 3.0], [1.646083175E12, 2.0], [1.646083135E12, 2.2], [1.64608322E12, 2.0], [1.646083085E12, 2.8], [1.64608317E12, 3.0], [1.64608313E12, 2.2], [1.646083215E12, 2.4]], "isOverall": false, "label": "weather-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.646083245E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.646083065E12, "maxY": 3.4, "series": [{"data": [[1.6460831E12, 2.6], [1.646083185E12, 2.8], [1.646083145E12, 2.8], [1.64608323E12, 3.0], [1.646083095E12, 3.4], [1.64608318E12, 2.4], [1.64608314E12, 2.2], [1.646083225E12, 2.6], [1.64608324E12, 2.6], [1.64608311E12, 2.6], [1.646083195E12, 3.4], [1.6460832E12, 2.0], [1.64608307E12, 3.4], [1.646083155E12, 2.6], [1.646083105E12, 2.0], [1.64608319E12, 3.4], [1.646083065E12, 0.2], [1.64608315E12, 3.2], [1.646083235E12, 2.4], [1.64608308E12, 2.2], [1.646083165E12, 3.0], [1.646083125E12, 1.8], [1.64608321E12, 3.0], [1.64608316E12, 2.6], [1.646083245E12, 1.0], [1.646083115E12, 3.2], [1.64608312E12, 3.0], [1.646083205E12, 0.8], [1.646083075E12, 3.0], [1.64608309E12, 3.0], [1.646083175E12, 2.0], [1.646083135E12, 2.2], [1.64608322E12, 2.0], [1.646083085E12, 2.8], [1.64608317E12, 3.0], [1.64608313E12, 2.2], [1.646083215E12, 2.4]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.646083125E12, 1.2], [1.646083135E12, 0.8], [1.646083145E12, 1.0], [1.646083115E12, 1.2], [1.64608312E12, 0.8], [1.64608313E12, 1.0], [1.64608314E12, 1.0], [1.64608315E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.646083245E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

