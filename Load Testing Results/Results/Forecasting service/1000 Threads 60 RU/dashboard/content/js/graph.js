/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 118768.0, "series": [{"data": [[0.0, 2.0], [0.1, 103.0], [0.2, 105.0], [0.3, 105.0], [0.4, 582.0], [0.5, 665.0], [0.6, 707.0], [0.7, 1329.0], [0.8, 1657.0], [0.9, 2629.0], [1.0, 2722.0], [1.1, 3041.0], [1.2, 3545.0], [1.3, 3664.0], [1.4, 3664.0], [1.5, 3956.0], [1.6, 4064.0], [1.7, 4106.0], [1.8, 4481.0], [1.9, 4596.0], [2.0, 4723.0], [2.1, 4841.0], [2.2, 5115.0], [2.3, 5223.0], [2.4, 5627.0], [2.5, 5751.0], [2.6, 5871.0], [2.7, 6130.0], [2.8, 6312.0], [2.9, 6316.0], [3.0, 6453.0], [3.1, 6583.0], [3.2, 6753.0], [3.3, 6923.0], [3.4, 7065.0], [3.5, 7192.0], [3.6, 7371.0], [3.7, 7405.0], [3.8, 7499.0], [3.9, 7641.0], [4.0, 7827.0], [4.1, 7904.0], [4.2, 7950.0], [4.3, 8180.0], [4.4, 8426.0], [4.5, 8479.0], [4.6, 8579.0], [4.7, 8770.0], [4.8, 8903.0], [4.9, 9093.0], [5.0, 9229.0], [5.1, 9245.0], [5.2, 9423.0], [5.3, 9724.0], [5.4, 9862.0], [5.5, 10011.0], [5.6, 10053.0], [5.7, 10228.0], [5.8, 10421.0], [5.9, 10596.0], [6.0, 10679.0], [6.1, 10774.0], [6.2, 10861.0], [6.3, 11023.0], [6.4, 11142.0], [6.5, 11234.0], [6.6, 11337.0], [6.7, 11459.0], [6.8, 11956.0], [6.9, 12022.0], [7.0, 12220.0], [7.1, 12344.0], [7.2, 12656.0], [7.3, 12757.0], [7.4, 12940.0], [7.5, 13077.0], [7.6, 13115.0], [7.7, 13215.0], [7.8, 13451.0], [7.9, 13907.0], [8.0, 13964.0], [8.1, 14128.0], [8.2, 14548.0], [8.3, 14693.0], [8.4, 14787.0], [8.5, 14852.0], [8.6, 15051.0], [8.7, 15169.0], [8.8, 15324.0], [8.9, 15475.0], [9.0, 15486.0], [9.1, 15831.0], [9.2, 15959.0], [9.3, 16134.0], [9.4, 16215.0], [9.5, 16258.0], [9.6, 16431.0], [9.7, 16613.0], [9.8, 17697.0], [9.9, 17729.0], [10.0, 17860.0], [10.1, 18547.0], [10.2, 19295.0], [10.3, 19925.0], [10.4, 19985.0], [10.5, 20023.0], [10.6, 20194.0], [10.7, 20379.0], [10.8, 20501.0], [10.9, 20698.0], [11.0, 20797.0], [11.1, 20987.0], [11.2, 21091.0], [11.3, 21249.0], [11.4, 21337.0], [11.5, 21612.0], [11.6, 22078.0], [11.7, 22199.0], [11.8, 22278.0], [11.9, 22574.0], [12.0, 22776.0], [12.1, 23213.0], [12.2, 23689.0], [12.3, 23968.0], [12.4, 24117.0], [12.5, 24273.0], [12.6, 24406.0], [12.7, 24442.0], [12.8, 24582.0], [12.9, 24730.0], [13.0, 24931.0], [13.1, 25099.0], [13.2, 25307.0], [13.3, 25405.0], [13.4, 25583.0], [13.5, 25734.0], [13.6, 25905.0], [13.7, 25905.0], [13.8, 25905.0], [13.9, 25905.0], [14.0, 25906.0], [14.1, 25906.0], [14.2, 25906.0], [14.3, 25906.0], [14.4, 25906.0], [14.5, 25906.0], [14.6, 25906.0], [14.7, 25906.0], [14.8, 25906.0], [14.9, 25907.0], [15.0, 25907.0], [15.1, 25907.0], [15.2, 25907.0], [15.3, 25907.0], [15.4, 25907.0], [15.5, 25907.0], [15.6, 25907.0], [15.7, 25907.0], [15.8, 25907.0], [15.9, 25907.0], [16.0, 25907.0], [16.1, 25907.0], [16.2, 25907.0], [16.3, 25907.0], [16.4, 25907.0], [16.5, 25907.0], [16.6, 25907.0], [16.7, 25907.0], [16.8, 25907.0], [16.9, 25907.0], [17.0, 25908.0], [17.1, 25908.0], [17.2, 25908.0], [17.3, 25908.0], [17.4, 25908.0], [17.5, 25908.0], [17.6, 25908.0], [17.7, 25908.0], [17.8, 25908.0], [17.9, 25908.0], [18.0, 25908.0], [18.1, 25908.0], [18.2, 25908.0], [18.3, 25908.0], [18.4, 25908.0], [18.5, 25908.0], [18.6, 25908.0], [18.7, 25908.0], [18.8, 25908.0], [18.9, 25908.0], [19.0, 25908.0], [19.1, 25908.0], [19.2, 25908.0], [19.3, 25908.0], [19.4, 25908.0], [19.5, 25908.0], [19.6, 25908.0], [19.7, 25908.0], [19.8, 25908.0], [19.9, 25908.0], [20.0, 25908.0], [20.1, 25908.0], [20.2, 25908.0], [20.3, 25908.0], [20.4, 25908.0], [20.5, 25908.0], [20.6, 25908.0], [20.7, 25908.0], [20.8, 25908.0], [20.9, 25908.0], [21.0, 25908.0], [21.1, 25908.0], [21.2, 25908.0], [21.3, 25908.0], [21.4, 25909.0], [21.5, 25909.0], [21.6, 25909.0], [21.7, 25909.0], [21.8, 25909.0], [21.9, 25909.0], [22.0, 25909.0], [22.1, 25909.0], [22.2, 25909.0], [22.3, 25909.0], [22.4, 25909.0], [22.5, 25909.0], [22.6, 25909.0], [22.7, 25909.0], [22.8, 25909.0], [22.9, 25909.0], [23.0, 25909.0], [23.1, 25909.0], [23.2, 25909.0], [23.3, 25909.0], [23.4, 25909.0], [23.5, 25909.0], [23.6, 25909.0], [23.7, 25909.0], [23.8, 25909.0], [23.9, 25909.0], [24.0, 25909.0], [24.1, 25909.0], [24.2, 25909.0], [24.3, 25909.0], [24.4, 25909.0], [24.5, 25909.0], [24.6, 25909.0], [24.7, 25909.0], [24.8, 25909.0], [24.9, 25909.0], [25.0, 25909.0], [25.1, 25909.0], [25.2, 25909.0], [25.3, 25909.0], [25.4, 25909.0], [25.5, 25909.0], [25.6, 25909.0], [25.7, 25909.0], [25.8, 25910.0], [25.9, 25910.0], [26.0, 25910.0], [26.1, 25910.0], [26.2, 25910.0], [26.3, 25910.0], [26.4, 25910.0], [26.5, 25910.0], [26.6, 25910.0], [26.7, 25910.0], [26.8, 25910.0], [26.9, 25910.0], [27.0, 25910.0], [27.1, 25910.0], [27.2, 25910.0], [27.3, 25910.0], [27.4, 25910.0], [27.5, 25910.0], [27.6, 25910.0], [27.7, 25910.0], [27.8, 25910.0], [27.9, 25910.0], [28.0, 25910.0], [28.1, 25910.0], [28.2, 25910.0], [28.3, 25910.0], [28.4, 25910.0], [28.5, 25910.0], [28.6, 25910.0], [28.7, 25910.0], [28.8, 25910.0], [28.9, 25910.0], [29.0, 25910.0], [29.1, 25910.0], [29.2, 25910.0], [29.3, 25910.0], [29.4, 25910.0], [29.5, 25910.0], [29.6, 25910.0], [29.7, 25910.0], [29.8, 25910.0], [29.9, 25910.0], [30.0, 25910.0], [30.1, 25910.0], [30.2, 25910.0], [30.3, 25910.0], [30.4, 25910.0], [30.5, 25910.0], [30.6, 25910.0], [30.7, 25910.0], [30.8, 25910.0], [30.9, 25910.0], [31.0, 25910.0], [31.1, 25910.0], [31.2, 25910.0], [31.3, 25910.0], [31.4, 25910.0], [31.5, 25910.0], [31.6, 25910.0], [31.7, 25910.0], [31.8, 25910.0], [31.9, 25910.0], [32.0, 25910.0], [32.1, 25910.0], [32.2, 25911.0], [32.3, 25911.0], [32.4, 25911.0], [32.5, 25911.0], [32.6, 25911.0], [32.7, 25911.0], [32.8, 25911.0], [32.9, 25911.0], [33.0, 25911.0], [33.1, 25911.0], [33.2, 25911.0], [33.3, 25911.0], [33.4, 25911.0], [33.5, 25911.0], [33.6, 25911.0], [33.7, 25911.0], [33.8, 25911.0], [33.9, 25911.0], [34.0, 25911.0], [34.1, 25911.0], [34.2, 25911.0], [34.3, 25911.0], [34.4, 25911.0], [34.5, 25911.0], [34.6, 25911.0], [34.7, 25911.0], [34.8, 25911.0], [34.9, 25911.0], [35.0, 25911.0], [35.1, 25911.0], [35.2, 25911.0], [35.3, 25911.0], [35.4, 25911.0], [35.5, 25911.0], [35.6, 25911.0], [35.7, 25911.0], [35.8, 25912.0], [35.9, 25912.0], [36.0, 25912.0], [36.1, 25912.0], [36.2, 25912.0], [36.3, 25912.0], [36.4, 25912.0], [36.5, 25912.0], [36.6, 25912.0], [36.7, 25912.0], [36.8, 25912.0], [36.9, 25912.0], [37.0, 25912.0], [37.1, 25912.0], [37.2, 25912.0], [37.3, 25912.0], [37.4, 25912.0], [37.5, 25912.0], [37.6, 25912.0], [37.7, 25912.0], [37.8, 25912.0], [37.9, 25912.0], [38.0, 25912.0], [38.1, 25912.0], [38.2, 25912.0], [38.3, 25912.0], [38.4, 25912.0], [38.5, 25912.0], [38.6, 25912.0], [38.7, 25912.0], [38.8, 25912.0], [38.9, 25912.0], [39.0, 25912.0], [39.1, 25912.0], [39.2, 25912.0], [39.3, 25912.0], [39.4, 25912.0], [39.5, 25913.0], [39.6, 25913.0], [39.7, 25913.0], [39.8, 25913.0], [39.9, 25913.0], [40.0, 25913.0], [40.1, 25913.0], [40.2, 25913.0], [40.3, 25913.0], [40.4, 25913.0], [40.5, 25913.0], [40.6, 25913.0], [40.7, 25913.0], [40.8, 25913.0], [40.9, 25913.0], [41.0, 25913.0], [41.1, 25913.0], [41.2, 25913.0], [41.3, 25913.0], [41.4, 25913.0], [41.5, 25913.0], [41.6, 25913.0], [41.7, 25913.0], [41.8, 25913.0], [41.9, 25913.0], [42.0, 25913.0], [42.1, 25913.0], [42.2, 25914.0], [42.3, 25914.0], [42.4, 25914.0], [42.5, 25914.0], [42.6, 25914.0], [42.7, 25914.0], [42.8, 25914.0], [42.9, 25914.0], [43.0, 25914.0], [43.1, 25915.0], [43.2, 25916.0], [43.3, 25917.0], [43.4, 25917.0], [43.5, 25919.0], [43.6, 25921.0], [43.7, 25925.0], [43.8, 25927.0], [43.9, 26089.0], [44.0, 26335.0], [44.1, 26396.0], [44.2, 26549.0], [44.3, 26771.0], [44.4, 26828.0], [44.5, 26939.0], [44.6, 27135.0], [44.7, 27279.0], [44.8, 27373.0], [44.9, 27424.0], [45.0, 27634.0], [45.1, 27685.0], [45.2, 27740.0], [45.3, 27740.0], [45.4, 27885.0], [45.5, 27903.0], [45.6, 27996.0], [45.7, 28031.0], [45.8, 28068.0], [45.9, 28141.0], [46.0, 28200.0], [46.1, 28264.0], [46.2, 28280.0], [46.3, 28354.0], [46.4, 28548.0], [46.5, 28668.0], [46.6, 28774.0], [46.7, 28811.0], [46.8, 28858.0], [46.9, 28883.0], [47.0, 29006.0], [47.1, 29016.0], [47.2, 29047.0], [47.3, 29132.0], [47.4, 29254.0], [47.5, 29388.0], [47.6, 29427.0], [47.7, 29624.0], [47.8, 29651.0], [47.9, 29730.0], [48.0, 29845.0], [48.1, 29929.0], [48.2, 29990.0], [48.3, 30047.0], [48.4, 30146.0], [48.5, 30146.0], [48.6, 30205.0], [48.7, 30223.0], [48.8, 30382.0], [48.9, 30566.0], [49.0, 30799.0], [49.1, 30802.0], [49.2, 30813.0], [49.3, 30844.0], [49.4, 30911.0], [49.5, 30933.0], [49.6, 31507.0], [49.7, 31742.0], [49.8, 32037.0], [49.9, 32317.0], [50.0, 32468.0], [50.1, 32528.0], [50.2, 32541.0], [50.3, 32607.0], [50.4, 32727.0], [50.5, 33149.0], [50.6, 33341.0], [50.7, 33450.0], [50.8, 33606.0], [50.9, 33722.0], [51.0, 33848.0], [51.1, 33940.0], [51.2, 35152.0], [51.3, 35255.0], [51.4, 35354.0], [51.5, 35470.0], [51.6, 35578.0], [51.7, 35628.0], [51.8, 35730.0], [51.9, 35857.0], [52.0, 36138.0], [52.1, 36251.0], [52.2, 36488.0], [52.3, 36658.0], [52.4, 36835.0], [52.5, 36947.0], [52.6, 37113.0], [52.7, 37230.0], [52.8, 37397.0], [52.9, 37608.0], [53.0, 38751.0], [53.1, 38980.0], [53.2, 39105.0], [53.3, 39128.0], [53.4, 39273.0], [53.5, 39453.0], [53.6, 39621.0], [53.7, 39766.0], [53.8, 39913.0], [53.9, 40015.0], [54.0, 40071.0], [54.1, 40296.0], [54.2, 40833.0], [54.3, 41022.0], [54.4, 41359.0], [54.5, 41504.0], [54.6, 41648.0], [54.7, 41649.0], [54.8, 41855.0], [54.9, 41869.0], [55.0, 41970.0], [55.1, 42131.0], [55.2, 42312.0], [55.3, 42420.0], [55.4, 42619.0], [55.5, 42720.0], [55.6, 42875.0], [55.7, 43062.0], [55.8, 43220.0], [55.9, 44408.0], [56.0, 44724.0], [56.1, 45009.0], [56.2, 45130.0], [56.3, 45331.0], [56.4, 45446.0], [56.5, 45481.0], [56.6, 45639.0], [56.7, 45938.0], [56.8, 45958.0], [56.9, 46146.0], [57.0, 46158.0], [57.1, 46207.0], [57.2, 46208.0], [57.3, 46272.0], [57.4, 46479.0], [57.5, 46661.0], [57.6, 46723.0], [57.7, 47024.0], [57.8, 47048.0], [57.9, 47084.0], [58.0, 47232.0], [58.1, 47249.0], [58.2, 47342.0], [58.3, 47356.0], [58.4, 47377.0], [58.5, 48041.0], [58.6, 48221.0], [58.7, 48662.0], [58.8, 48870.0], [58.9, 49038.0], [59.0, 49254.0], [59.1, 49368.0], [59.2, 49518.0], [59.3, 49743.0], [59.4, 49833.0], [59.5, 50014.0], [59.6, 50201.0], [59.7, 50309.0], [59.8, 50471.0], [59.9, 51241.0], [60.0, 51375.0], [60.1, 51579.0], [60.2, 51697.0], [60.3, 51845.0], [60.4, 52019.0], [60.5, 52131.0], [60.6, 52301.0], [60.7, 52495.0], [60.8, 52647.0], [60.9, 52798.0], [61.0, 52953.0], [61.1, 53550.0], [61.2, 53738.0], [61.3, 53848.0], [61.4, 53987.0], [61.5, 54194.0], [61.6, 56324.0], [61.7, 56506.0], [61.8, 56627.0], [61.9, 56796.0], [62.0, 56940.0], [62.1, 57099.0], [62.2, 57289.0], [62.3, 57378.0], [62.4, 57535.0], [62.5, 57744.0], [62.6, 57864.0], [62.7, 58016.0], [62.8, 58226.0], [62.9, 58339.0], [63.0, 58500.0], [63.1, 58669.0], [63.2, 58795.0], [63.3, 58981.0], [63.4, 59098.0], [63.5, 59301.0], [63.6, 59643.0], [63.7, 59791.0], [63.8, 59955.0], [63.9, 60169.0], [64.0, 60285.0], [64.1, 60481.0], [64.2, 60611.0], [64.3, 60797.0], [64.4, 61130.0], [64.5, 61321.0], [64.6, 61428.0], [64.7, 61581.0], [64.8, 61732.0], [64.9, 61918.0], [65.0, 62028.0], [65.1, 62360.0], [65.2, 62569.0], [65.3, 62786.0], [65.4, 62890.0], [65.5, 63087.0], [65.6, 63194.0], [65.7, 63367.0], [65.8, 63530.0], [65.9, 63729.0], [66.0, 63830.0], [66.1, 63982.0], [66.2, 64123.0], [66.3, 64296.0], [66.4, 64410.0], [66.5, 64612.0], [66.6, 64775.0], [66.7, 64934.0], [66.8, 65682.0], [66.9, 65852.0], [67.0, 65959.0], [67.1, 66162.0], [67.2, 66312.0], [67.3, 66466.0], [67.4, 66653.0], [67.5, 66767.0], [67.6, 67919.0], [67.7, 68069.0], [67.8, 68224.0], [67.9, 68424.0], [68.0, 68559.0], [68.1, 68757.0], [68.2, 68941.0], [68.3, 69061.0], [68.4, 69211.0], [68.5, 69354.0], [68.6, 69551.0], [68.7, 69820.0], [68.8, 69979.0], [68.9, 70137.0], [69.0, 70281.0], [69.1, 71446.0], [69.2, 72627.0], [69.3, 72769.0], [69.4, 72891.0], [69.5, 73094.0], [69.6, 73192.0], [69.7, 73380.0], [69.8, 73502.0], [69.9, 73645.0], [70.0, 74032.0], [70.1, 74145.0], [70.2, 74311.0], [70.3, 74511.0], [70.4, 74609.0], [70.5, 74779.0], [70.6, 74911.0], [70.7, 75002.0], [70.8, 75228.0], [70.9, 75325.0], [71.0, 75490.0], [71.1, 75587.0], [71.2, 75736.0], [71.3, 75850.0], [71.4, 75860.0], [71.5, 75995.0], [71.6, 76075.0], [71.7, 76377.0], [71.8, 76479.0], [71.9, 76616.0], [72.0, 76782.0], [72.1, 76870.0], [72.2, 77015.0], [72.3, 77246.0], [72.4, 77342.0], [72.5, 78005.0], [72.6, 78130.0], [72.7, 78239.0], [72.8, 78327.0], [72.9, 78611.0], [73.0, 78755.0], [73.1, 78956.0], [73.2, 79148.0], [73.3, 79307.0], [73.4, 79407.0], [73.5, 79556.0], [73.6, 79709.0], [73.7, 79996.0], [73.8, 80090.0], [73.9, 80236.0], [74.0, 80452.0], [74.1, 80585.0], [74.2, 80678.0], [74.3, 81035.0], [74.4, 82202.0], [74.5, 82352.0], [74.6, 82457.0], [74.7, 82600.0], [74.8, 82808.0], [74.9, 82914.0], [75.0, 83042.0], [75.1, 83265.0], [75.2, 83455.0], [75.3, 83654.0], [75.4, 83761.0], [75.5, 83903.0], [75.6, 84024.0], [75.7, 84275.0], [75.8, 84466.0], [75.9, 84682.0], [76.0, 84730.0], [76.1, 84919.0], [76.2, 85074.0], [76.3, 85224.0], [76.4, 85318.0], [76.5, 85771.0], [76.6, 85972.0], [76.7, 86153.0], [76.8, 86309.0], [76.9, 86513.0], [77.0, 86655.0], [77.1, 87095.0], [77.2, 87136.0], [77.3, 87394.0], [77.4, 87578.0], [77.5, 87631.0], [77.6, 88062.0], [77.7, 88317.0], [77.8, 88441.0], [77.9, 88713.0], [78.0, 88726.0], [78.1, 88854.0], [78.2, 89357.0], [78.3, 89484.0], [78.4, 89591.0], [78.5, 89776.0], [78.6, 89898.0], [78.7, 90170.0], [78.8, 90221.0], [78.9, 90415.0], [79.0, 90550.0], [79.1, 90738.0], [79.2, 91023.0], [79.3, 91217.0], [79.4, 91366.0], [79.5, 91517.0], [79.6, 91715.0], [79.7, 91972.0], [79.8, 92175.0], [79.9, 92297.0], [80.0, 92438.0], [80.1, 92494.0], [80.2, 92723.0], [80.3, 92849.0], [80.4, 93009.0], [80.5, 93102.0], [80.6, 93242.0], [80.7, 94414.0], [80.8, 94781.0], [80.9, 94992.0], [81.0, 95154.0], [81.1, 95237.0], [81.2, 95480.0], [81.3, 95571.0], [81.4, 95581.0], [81.5, 95612.0], [81.6, 95750.0], [81.7, 95954.0], [81.8, 95972.0], [81.9, 95974.0], [82.0, 96077.0], [82.1, 96103.0], [82.2, 96160.0], [82.3, 96238.0], [82.4, 96252.0], [82.5, 96275.0], [82.6, 96331.0], [82.7, 96404.0], [82.8, 96642.0], [82.9, 96765.0], [83.0, 96795.0], [83.1, 96844.0], [83.2, 96863.0], [83.3, 96883.0], [83.4, 96917.0], [83.5, 96935.0], [83.6, 97006.0], [83.7, 97139.0], [83.8, 97143.0], [83.9, 97150.0], [84.0, 97223.0], [84.1, 97236.0], [84.2, 97239.0], [84.3, 97263.0], [84.4, 97272.0], [84.5, 97275.0], [84.6, 97278.0], [84.7, 97284.0], [84.8, 97418.0], [84.9, 97447.0], [85.0, 97466.0], [85.1, 97472.0], [85.2, 97558.0], [85.3, 97596.0], [85.4, 97617.0], [85.5, 97655.0], [85.6, 97666.0], [85.7, 97690.0], [85.8, 97758.0], [85.9, 97788.0], [86.0, 97823.0], [86.1, 97831.0], [86.2, 97857.0], [86.3, 97885.0], [86.4, 97903.0], [86.5, 97908.0], [86.6, 97910.0], [86.7, 97972.0], [86.8, 98018.0], [86.9, 98052.0], [87.0, 98084.0], [87.1, 98085.0], [87.2, 98136.0], [87.3, 98204.0], [87.4, 98254.0], [87.5, 98255.0], [87.6, 98269.0], [87.7, 98270.0], [87.8, 98323.0], [87.9, 98347.0], [88.0, 98377.0], [88.1, 98407.0], [88.2, 98436.0], [88.3, 98475.0], [88.4, 98492.0], [88.5, 98520.0], [88.6, 98550.0], [88.7, 98561.0], [88.8, 98573.0], [88.9, 98588.0], [89.0, 98641.0], [89.1, 98654.0], [89.2, 98704.0], [89.3, 98722.0], [89.4, 98751.0], [89.5, 98766.0], [89.6, 98782.0], [89.7, 98792.0], [89.8, 98792.0], [89.9, 98820.0], [90.0, 98857.0], [90.1, 98929.0], [90.2, 98931.0], [90.3, 98931.0], [90.4, 98935.0], [90.5, 98980.0], [90.6, 99045.0], [90.7, 99047.0], [90.8, 99108.0], [90.9, 99119.0], [91.0, 99128.0], [91.1, 99180.0], [91.2, 99211.0], [91.3, 99263.0], [91.4, 99272.0], [91.5, 99281.0], [91.6, 99316.0], [91.7, 99368.0], [91.8, 99441.0], [91.9, 99467.0], [92.0, 99714.0], [92.1, 99732.0], [92.2, 99824.0], [92.3, 99887.0], [92.4, 99967.0], [92.5, 100530.0], [92.6, 100669.0], [92.7, 101113.0], [92.8, 101142.0], [92.9, 101208.0], [93.0, 101376.0], [93.1, 101444.0], [93.2, 101472.0], [93.3, 101812.0], [93.4, 101995.0], [93.5, 102020.0], [93.6, 102713.0], [93.7, 104516.0], [93.8, 104779.0], [93.9, 105199.0], [94.0, 106885.0], [94.1, 107028.0], [94.2, 107116.0], [94.3, 107169.0], [94.4, 107191.0], [94.5, 107381.0], [94.6, 107423.0], [94.7, 107510.0], [94.8, 107570.0], [94.9, 107676.0], [95.0, 107683.0], [95.1, 107754.0], [95.2, 107754.0], [95.3, 107989.0], [95.4, 108223.0], [95.5, 108303.0], [95.6, 108419.0], [95.7, 108520.0], [95.8, 108605.0], [95.9, 108762.0], [96.0, 108831.0], [96.1, 109789.0], [96.2, 110128.0], [96.3, 110480.0], [96.4, 113129.0], [96.5, 113208.0], [96.6, 113323.0], [96.7, 113333.0], [96.8, 113466.0], [96.9, 113554.0], [97.0, 113563.0], [97.1, 113622.0], [97.2, 113712.0], [97.3, 113763.0], [97.4, 113805.0], [97.5, 114015.0], [97.6, 114379.0], [97.7, 114409.0], [97.8, 114604.0], [97.9, 114806.0], [98.0, 115066.0], [98.1, 115285.0], [98.2, 115495.0], [98.3, 115772.0], [98.4, 115817.0], [98.5, 115906.0], [98.6, 115975.0], [98.7, 116219.0], [98.8, 116235.0], [98.9, 116533.0], [99.0, 116603.0], [99.1, 116840.0], [99.2, 116963.0], [99.3, 117535.0], [99.4, 117746.0], [99.5, 117872.0], [99.6, 117978.0], [99.7, 118318.0], [99.8, 118371.0], [99.9, 118768.0]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 303.0, "series": [{"data": [[0.0, 1.0], [66700.0, 1.0], [69900.0, 1.0], [73100.0, 1.0], [74700.0, 1.0], [76300.0, 1.0], [79500.0, 1.0], [85900.0, 1.0], [87500.0, 1.0], [90700.0, 1.0], [95500.0, 2.0], [97100.0, 3.0], [98700.0, 7.0], [101900.0, 1.0], [105100.0, 1.0], [108300.0, 1.0], [113100.0, 1.0], [117900.0, 1.0], [100.0, 2.0], [33700.0, 1.0], [36100.0, 1.0], [35300.0, 1.0], [36900.0, 1.0], [47300.0, 3.0], [49700.0, 1.0], [200.0, 1.0], [51300.0, 1.0], [52100.0, 1.0], [52900.0, 1.0], [53700.0, 1.0], [56900.0, 1.0], [57700.0, 1.0], [58500.0, 1.0], [59300.0, 1.0], [60100.0, 1.0], [61700.0, 1.0], [62500.0, 1.0], [63300.0, 1.0], [64100.0, 1.0], [64900.0, 1.0], [65800.0, 1.0], [69000.0, 1.0], [75400.0, 1.0], [77000.0, 1.0], [78600.0, 1.0], [80200.0, 1.0], [83400.0, 1.0], [85000.0, 1.0], [86600.0, 1.0], [89800.0, 1.0], [93000.0, 1.0], [96200.0, 3.0], [97800.0, 4.0], [99400.0, 2.0], [107400.0, 1.0], [113800.0, 1.0], [115400.0, 1.0], [500.0, 1.0], [600.0, 1.0], [700.0, 1.0], [1300.0, 1.0], [1600.0, 1.0], [2600.0, 1.0], [2700.0, 1.0], [3000.0, 1.0], [3500.0, 1.0], [3600.0, 1.0], [3900.0, 1.0], [4000.0, 1.0], [4100.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [74500.0, 1.0], [5100.0, 1.0], [79300.0, 1.0], [5200.0, 1.0], [85700.0, 1.0], [5600.0, 1.0], [87300.0, 1.0], [5700.0, 1.0], [5800.0, 1.0], [90500.0, 1.0], [92100.0, 1.0], [6100.0, 1.0], [96900.0, 2.0], [6300.0, 2.0], [98500.0, 5.0], [6400.0, 1.0], [6500.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [109700.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7300.0, 1.0], [7400.0, 2.0], [117700.0, 1.0], [7600.0, 1.0], [7800.0, 1.0], [7900.0, 2.0], [8100.0, 1.0], [8400.0, 2.0], [9000.0, 1.0], [9200.0, 2.0], [9400.0, 1.0], [9800.0, 1.0], [10000.0, 2.0], [10200.0, 1.0], [10400.0, 1.0], [10600.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11400.0, 1.0], [12000.0, 1.0], [12200.0, 1.0], [12600.0, 1.0], [13000.0, 1.0], [13200.0, 1.0], [13400.0, 1.0], [14600.0, 1.0], [14800.0, 1.0], [15000.0, 1.0], [15400.0, 2.0], [15800.0, 1.0], [16200.0, 2.0], [16400.0, 1.0], [17600.0, 1.0], [19200.0, 1.0], [20000.0, 1.0], [21200.0, 1.0], [22000.0, 1.0], [21600.0, 1.0], [23200.0, 1.0], [24400.0, 2.0], [23600.0, 1.0], [26000.0, 1.0], [27200.0, 1.0], [27600.0, 2.0], [26800.0, 1.0], [28000.0, 2.0], [28800.0, 3.0], [29200.0, 1.0], [29600.0, 2.0], [30000.0, 1.0], [30800.0, 3.0], [32000.0, 1.0], [32400.0, 1.0], [33600.0, 1.0], [35200.0, 1.0], [36800.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [40000.0, 2.0], [40800.0, 1.0], [41600.0, 2.0], [42400.0, 1.0], [43200.0, 1.0], [45600.0, 1.0], [46400.0, 1.0], [47200.0, 2.0], [48000.0, 1.0], [48800.0, 1.0], [50400.0, 1.0], [51200.0, 1.0], [52000.0, 1.0], [65600.0, 1.0], [73600.0, 1.0], [75200.0, 1.0], [76800.0, 1.0], [80000.0, 1.0], [83200.0, 1.0], [88000.0, 1.0], [91200.0, 1.0], [92800.0, 1.0], [94400.0, 1.0], [97600.0, 4.0], [96000.0, 1.0], [99200.0, 4.0], [110400.0, 1.0], [108800.0, 1.0], [113600.0, 1.0], [115200.0, 1.0], [116800.0, 1.0], [68700.0, 1.0], [73500.0, 1.0], [76700.0, 1.0], [78300.0, 1.0], [79900.0, 1.0], [84700.0, 1.0], [86300.0, 1.0], [89500.0, 1.0], [92700.0, 1.0], [95900.0, 3.0], [97500.0, 2.0], [99100.0, 4.0], [107100.0, 3.0], [108700.0, 1.0], [113500.0, 2.0], [118300.0, 2.0], [33100.0, 1.0], [33900.0, 1.0], [35500.0, 1.0], [37100.0, 1.0], [38700.0, 1.0], [41900.0, 1.0], [42700.0, 1.0], [45100.0, 1.0], [45900.0, 2.0], [46700.0, 1.0], [51500.0, 1.0], [52300.0, 1.0], [53900.0, 1.0], [56300.0, 1.0], [58700.0, 1.0], [61100.0, 1.0], [61900.0, 1.0], [62700.0, 1.0], [63500.0, 1.0], [72600.0, 1.0], [75800.0, 2.0], [80600.0, 1.0], [82200.0, 1.0], [87000.0, 1.0], [90200.0, 1.0], [96600.0, 1.0], [98200.0, 5.0], [99800.0, 2.0], [101400.0, 2.0], [115800.0, 1.0], [68500.0, 1.0], [70100.0, 1.0], [73300.0, 1.0], [74900.0, 1.0], [78100.0, 1.0], [79700.0, 1.0], [82900.0, 1.0], [86100.0, 1.0], [89300.0, 1.0], [95700.0, 1.0], [98900.0, 5.0], [100500.0, 1.0], [110100.0, 1.0], [108500.0, 1.0], [113300.0, 2.0], [116500.0, 1.0], [17700.0, 1.0], [18500.0, 1.0], [20100.0, 1.0], [20500.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [22500.0, 1.0], [22100.0, 1.0], [24100.0, 1.0], [24500.0, 1.0], [24900.0, 1.0], [25300.0, 1.0], [25700.0, 1.0], [26500.0, 1.0], [26900.0, 1.0], [27300.0, 1.0], [27700.0, 1.0], [28500.0, 1.0], [28100.0, 1.0], [29300.0, 1.0], [29700.0, 1.0], [30100.0, 2.0], [30500.0, 1.0], [31700.0, 1.0], [30900.0, 2.0], [32500.0, 2.0], [33800.0, 1.0], [35400.0, 1.0], [36200.0, 1.0], [39400.0, 1.0], [40200.0, 1.0], [41800.0, 2.0], [42600.0, 1.0], [41000.0, 1.0], [45000.0, 1.0], [46600.0, 1.0], [48200.0, 1.0], [49000.0, 1.0], [49800.0, 1.0], [53800.0, 1.0], [57000.0, 1.0], [57800.0, 1.0], [58600.0, 1.0], [60200.0, 1.0], [64200.0, 1.0], [69200.0, 1.0], [74000.0, 1.0], [77200.0, 1.0], [80400.0, 1.0], [83600.0, 1.0], [85200.0, 1.0], [88400.0, 1.0], [93200.0, 1.0], [98000.0, 4.0], [96400.0, 1.0], [101200.0, 1.0], [107600.0, 2.0], [114000.0, 1.0], [65900.0, 1.0], [75500.0, 1.0], [78700.0, 1.0], [88300.0, 1.0], [91500.0, 1.0], [93100.0, 1.0], [94700.0, 1.0], [97900.0, 4.0], [96300.0, 1.0], [101100.0, 2.0], [102700.0, 1.0], [107500.0, 2.0], [118700.0, 1.0], [33300.0, 1.0], [35700.0, 1.0], [37300.0, 1.0], [38900.0, 1.0], [39700.0, 1.0], [41300.0, 1.0], [42100.0, 1.0], [45300.0, 1.0], [46100.0, 2.0], [49300.0, 1.0], [54100.0, 1.0], [56500.0, 1.0], [57300.0, 1.0], [58900.0, 1.0], [59700.0, 1.0], [61300.0, 1.0], [63700.0, 1.0], [66600.0, 1.0], [68200.0, 1.0], [69800.0, 1.0], [71400.0, 1.0], [73000.0, 1.0], [74600.0, 1.0], [79400.0, 1.0], [81000.0, 1.0], [82600.0, 1.0], [84200.0, 1.0], [92200.0, 1.0], [95400.0, 1.0], [97000.0, 1.0], [101800.0, 1.0], [98600.0, 2.0], [108200.0, 1.0], [114600.0, 1.0], [116200.0, 2.0], [117800.0, 1.0], [68900.0, 1.0], [75300.0, 1.0], [84900.0, 1.0], [86500.0, 1.0], [89700.0, 1.0], [91300.0, 1.0], [96100.0, 2.0], [97700.0, 2.0], [99300.0, 2.0], [107300.0, 1.0], [113700.0, 2.0], [116900.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [8700.0, 1.0], [8900.0, 1.0], [9700.0, 1.0], [10500.0, 1.0], [10700.0, 1.0], [11100.0, 1.0], [11300.0, 1.0], [11900.0, 1.0], [12300.0, 1.0], [12700.0, 1.0], [12900.0, 1.0], [13100.0, 1.0], [13900.0, 2.0], [14100.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [15100.0, 1.0], [15300.0, 1.0], [15900.0, 1.0], [16100.0, 1.0], [16600.0, 1.0], [17800.0, 1.0], [20600.0, 1.0], [21000.0, 1.0], [22200.0, 1.0], [24200.0, 1.0], [25400.0, 1.0], [25000.0, 1.0], [27400.0, 1.0], [27800.0, 1.0], [28200.0, 3.0], [28600.0, 1.0], [29000.0, 3.0], [29400.0, 1.0], [30200.0, 2.0], [29800.0, 1.0], [32600.0, 1.0], [36400.0, 1.0], [35600.0, 1.0], [37200.0, 1.0], [39600.0, 1.0], [42800.0, 1.0], [44400.0, 1.0], [49200.0, 1.0], [50000.0, 1.0], [51600.0, 1.0], [52400.0, 1.0], [57200.0, 1.0], [58000.0, 1.0], [59600.0, 1.0], [60400.0, 1.0], [62000.0, 1.0], [62800.0, 1.0], [64400.0, 1.0], [66400.0, 1.0], [68000.0, 1.0], [69600.0, 1.0], [72800.0, 1.0], [76000.0, 1.0], [82400.0, 1.0], [84000.0, 1.0], [88800.0, 1.0], [90400.0, 1.0], [95200.0, 1.0], [96800.0, 3.0], [98400.0, 4.0], [114400.0, 1.0], [66300.0, 1.0], [67900.0, 1.0], [69500.0, 1.0], [72700.0, 1.0], [74300.0, 1.0], [75900.0, 1.0], [79100.0, 1.0], [82300.0, 1.0], [83900.0, 1.0], [87100.0, 1.0], [88700.0, 2.0], [91900.0, 1.0], [95100.0, 1.0], [98300.0, 3.0], [96700.0, 2.0], [99900.0, 1.0], [104700.0, 1.0], [107900.0, 1.0], [114300.0, 1.0], [115900.0, 2.0], [117500.0, 1.0], [35100.0, 1.0], [39100.0, 2.0], [39900.0, 1.0], [41500.0, 1.0], [42300.0, 1.0], [44700.0, 1.0], [49500.0, 1.0], [50300.0, 1.0], [52700.0, 1.0], [53500.0, 1.0], [56700.0, 1.0], [57500.0, 1.0], [58300.0, 1.0], [59900.0, 1.0], [60700.0, 1.0], [61500.0, 1.0], [62300.0, 1.0], [63100.0, 1.0], [63900.0, 1.0], [64700.0, 1.0], [70200.0, 1.0], [75000.0, 1.0], [76600.0, 1.0], [78200.0, 1.0], [83000.0, 1.0], [84600.0, 1.0], [89400.0, 1.0], [91000.0, 1.0], [97400.0, 4.0], [99000.0, 2.0], [100600.0, 1.0], [108600.0, 1.0], [107000.0, 1.0], [113400.0, 1.0], [115000.0, 1.0], [116600.0, 1.0], [66100.0, 1.0], [69300.0, 1.0], [74100.0, 1.0], [75700.0, 1.0], [77300.0, 1.0], [78900.0, 1.0], [80500.0, 1.0], [83700.0, 1.0], [85300.0, 1.0], [90100.0, 1.0], [91700.0, 1.0], [94900.0, 1.0], [98100.0, 1.0], [99700.0, 2.0], [101300.0, 1.0], [104500.0, 1.0], [107700.0, 2.0], [115700.0, 1.0], [19900.0, 2.0], [20300.0, 1.0], [20700.0, 1.0], [22700.0, 1.0], [23900.0, 1.0], [24700.0, 1.0], [25500.0, 1.0], [25900.0, 303.0], [26300.0, 2.0], [26700.0, 1.0], [27100.0, 1.0], [28300.0, 1.0], [27900.0, 2.0], [29100.0, 1.0], [28700.0, 1.0], [29900.0, 2.0], [30300.0, 1.0], [30700.0, 1.0], [31500.0, 1.0], [32300.0, 1.0], [32700.0, 1.0], [33400.0, 1.0], [35800.0, 1.0], [36600.0, 1.0], [43000.0, 1.0], [45400.0, 2.0], [46200.0, 3.0], [47000.0, 3.0], [48600.0, 1.0], [50200.0, 1.0], [51800.0, 1.0], [52600.0, 1.0], [56600.0, 1.0], [58200.0, 1.0], [59000.0, 1.0], [60600.0, 1.0], [61400.0, 1.0], [63000.0, 1.0], [63800.0, 1.0], [64600.0, 1.0], [68400.0, 1.0], [76400.0, 1.0], [78000.0, 1.0], [82800.0, 1.0], [84400.0, 1.0], [87600.0, 1.0], [92400.0, 2.0], [97200.0, 8.0], [95600.0, 1.0], [98800.0, 2.0], [102000.0, 1.0], [108400.0, 1.0], [106800.0, 1.0], [113200.0, 1.0], [114800.0, 1.0]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 118700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 603.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 603.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 395.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.64608088E12, "maxY": 712.4444444444448, "series": [{"data": [[1.646080925E12, 552.3636363636363], [1.64608101E12, 167.5], [1.646080885E12, 67.58333333333334], [1.64608097E12, 331.65], [1.646081055E12, 10.5], [1.64608092E12, 480.1363636363636], [1.646081005E12, 184.5], [1.64608088E12, 18.5], [1.646080965E12, 364.0666666666667], [1.64608105E12, 21.5], [1.64608102E12, 130.0], [1.646080935E12, 684.2258064516129], [1.64608098E12, 283.08], [1.646080895E12, 176.44444444444443], [1.64608093E12, 612.3636363636363], [1.646081015E12, 148.5], [1.64608106E12, 3.0], [1.64608089E12, 120.63636363636364], [1.646080975E12, 308.5], [1.646080945E12, 654.5813953488372], [1.64608103E12, 93.5], [1.646080905E12, 311.8125], [1.64608099E12, 240.0], [1.64608094E12, 712.4444444444448], [1.646081025E12, 112.5], [1.6460809E12, 240.66666666666666], [1.646080985E12, 260.5], [1.646080955E12, 496.54878048780495], [1.646081E12, 202.5], [1.646080915E12, 427.08000000000004], [1.64608096E12, 421.0579710144928], [1.646081045E12, 37.5], [1.64608095E12, 574.5270270270271], [1.646081035E12, 73.5], [1.64608091E12, 372.57142857142856], [1.646080995E12, 220.5], [1.64608104E12, 55.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.64608106E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 203.0, "minX": 1.0, "maxY": 118768.0, "series": [{"data": [[2.0, 118371.0], [3.0, 117978.0], [4.0, 117746.0], [5.0, 118318.0], [6.0, 117872.0], [7.0, 117535.0], [8.0, 116840.0], [9.0, 116533.0], [10.0, 116219.0], [11.0, 115975.0], [12.0, 116963.0], [13.0, 116603.0], [14.0, 58450.0], [15.0, 115817.0], [16.0, 115906.0], [17.0, 115495.0], [18.0, 113333.0], [19.0, 113208.0], [20.0, 113712.0], [21.0, 113554.0], [22.0, 113466.0], [23.0, 57326.0], [24.0, 113129.0], [25.0, 107570.0], [26.0, 113805.0], [27.0, 107191.0], [28.0, 107676.0], [29.0, 107423.0], [30.0, 113622.0], [31.0, 107028.0], [33.0, 107510.0], [32.0, 106885.0], [35.0, 107116.0], [34.0, 113763.0], [37.0, 108223.0], [36.0, 114806.0], [39.0, 115285.0], [38.0, 107989.0], [41.0, 55617.0], [40.0, 108762.0], [43.0, 115066.0], [42.0, 108831.0], [45.0, 108303.0], [44.0, 108419.0], [47.0, 52877.0], [46.0, 115772.0], [49.0, 101113.0], [48.0, 107683.0], [51.0, 114379.0], [50.0, 107169.0], [53.0, 101208.0], [52.0, 107754.0], [55.0, 58780.0], [54.0, 101444.0], [57.0, 113563.0], [56.0, 107381.0], [59.0, 114604.0], [58.0, 100530.0], [60.0, 52666.0], [61.0, 102020.0], [62.0, 51307.0], [63.0, 114409.0], [67.0, 101472.0], [66.0, 96331.0], [65.0, 108520.0], [64.0, 107754.0], [69.0, 51534.5], [70.0, 50083.5], [71.0, 96252.0], [68.0, 97223.0], [73.0, 50167.5], [75.0, 96404.0], [74.0, 96160.0], [72.0, 95974.0], [78.0, 52541.0], [79.0, 96765.0], [77.0, 109789.0], [76.0, 96077.0], [80.0, 51186.5], [83.0, 97278.0], [82.0, 110128.0], [81.0, 96795.0], [87.0, 51767.5], [86.0, 98704.0], [85.0, 104516.0], [84.0, 97006.0], [89.0, 51708.5], [91.0, 98722.0], [90.0, 97885.0], [88.0, 97272.0], [94.0, 51684.5], [95.0, 98052.0], [93.0, 99108.0], [92.0, 98084.0], [98.0, 52260.0], [99.0, 97558.0], [97.0, 98255.0], [96.0, 98323.0], [100.0, 51658.0], [102.0, 52119.0], [103.0, 97143.0], [101.0, 97472.0], [105.0, 52100.0], [107.0, 52635.0], [106.0, 97596.0], [104.0, 98641.0], [110.0, 53398.5], [111.0, 97788.0], [109.0, 98573.0], [108.0, 97236.0], [112.0, 58836.0], [114.0, 52945.5], [115.0, 99714.0], [113.0, 97466.0], [116.0, 52628.5], [119.0, 53764.0], [118.0, 98654.0], [117.0, 98085.0], [122.0, 53159.5], [123.0, 99119.0], [121.0, 97823.0], [120.0, 97903.0], [124.0, 52930.0], [127.0, 52557.5], [126.0, 99045.0], [125.0, 101142.0], [130.0, 52799.0], [131.0, 53141.5], [134.0, 52931.5], [135.0, 97831.0], [133.0, 97139.0], [132.0, 98018.0], [129.0, 97972.0], [128.0, 98407.0], [137.0, 53603.0], [139.0, 54786.0], [142.0, 54280.0], [143.0, 99824.0], [141.0, 99441.0], [140.0, 98782.0], [138.0, 104779.0], [136.0, 99368.0], [144.0, 57214.0], [147.0, 54094.5], [151.0, 98935.0], [150.0, 98270.0], [149.0, 98751.0], [148.0, 101995.0], [146.0, 98136.0], [145.0, 101812.0], [152.0, 54426.0], [154.0, 54327.0], [157.0, 54422.5], [159.0, 98475.0], [158.0, 99047.0], [156.0, 98931.0], [155.0, 98254.0], [153.0, 99180.0], [160.0, 54745.5], [163.0, 54399.0], [166.0, 54708.0], [167.0, 98269.0], [165.0, 98561.0], [164.0, 99272.0], [162.0, 98857.0], [161.0, 99316.0], [168.0, 55027.5], [170.0, 54920.5], [173.0, 54356.5], [175.0, 54280.0], [174.0, 97617.0], [172.0, 98929.0], [171.0, 99211.0], [169.0, 98931.0], [178.0, 54090.5], [180.0, 54188.0], [183.0, 96103.0], [182.0, 96238.0], [181.0, 96275.0], [179.0, 96642.0], [177.0, 96883.0], [176.0, 97263.0], [188.0, 53751.0], [191.0, 53606.0], [190.0, 95154.0], [189.0, 95237.0], [187.0, 95581.0], [186.0, 95750.0], [185.0, 95972.0], [184.0, 95954.0], [193.0, 53379.0], [199.0, 92494.0], [198.0, 92723.0], [197.0, 92849.0], [196.0, 93009.0], [195.0, 93102.0], [194.0, 93242.0], [192.0, 94781.0], [200.0, 52597.5], [203.0, 52456.0], [205.0, 52297.0], [207.0, 91217.0], [206.0, 91366.0], [204.0, 91715.0], [202.0, 92175.0], [201.0, 92297.0], [211.0, 51933.0], [215.0, 89776.0], [214.0, 89898.0], [213.0, 90170.0], [212.0, 90221.0], [210.0, 90550.0], [209.0, 90738.0], [208.0, 91023.0], [219.0, 51409.0], [221.0, 51420.5], [223.0, 88317.0], [222.0, 88441.0], [220.0, 88726.0], [218.0, 89357.0], [217.0, 89484.0], [216.0, 89591.0], [228.0, 50842.0], [231.0, 50603.0], [230.0, 86655.0], [229.0, 87095.0], [227.0, 87394.0], [226.0, 87578.0], [225.0, 87631.0], [224.0, 88062.0], [233.0, 50502.5], [236.0, 50184.5], [238.0, 50121.5], [239.0, 84919.0], [237.0, 85224.0], [235.0, 85771.0], [234.0, 85972.0], [232.0, 86309.0], [241.0, 50003.0], [244.0, 49755.0], [247.0, 83654.0], [246.0, 83761.0], [245.0, 83903.0], [243.0, 84275.0], [242.0, 84466.0], [240.0, 84730.0], [249.0, 41633.5], [248.0, 49643.0], [250.0, 31503.5], [253.0, 49471.0], [255.0, 31753.5], [254.0, 82600.0], [252.0, 82914.0], [251.0, 83042.0], [269.0, 79709.0], [258.0, 49316.5], [257.0, 41467.0], [260.0, 48824.0], [261.0, 45958.0], [263.0, 80585.0], [256.0, 82457.0], [262.0, 80678.0], [270.0, 79556.0], [268.0, 79996.0], [259.0, 46723.0], [267.0, 80090.0], [266.0, 46207.0], [265.0, 80236.0], [264.0, 80452.0], [286.0, 77246.0], [275.0, 40306.5], [277.0, 48242.0], [276.0, 46146.0], [279.0, 78327.0], [272.0, 62782.5], [274.0, 79148.0], [273.0, 79307.0], [278.0, 78611.0], [287.0, 77015.0], [285.0, 77342.0], [284.0, 39105.0], [283.0, 78005.0], [282.0, 78130.0], [281.0, 40015.0], [280.0, 78239.0], [302.0, 75490.0], [292.0, 39600.5], [295.0, 61141.5], [289.0, 45446.0], [288.0, 76870.0], [291.0, 76616.0], [290.0, 76782.0], [293.0, 76377.0], [303.0, 75325.0], [301.0, 75587.0], [300.0, 47377.0], [299.0, 75736.0], [298.0, 75860.0], [297.0, 75850.0], [296.0, 75995.0], [318.0, 46940.5], [307.0, 39287.5], [310.0, 47218.0], [309.0, 74609.0], [308.0, 74779.0], [311.0, 47356.0], [304.0, 75228.0], [306.0, 75002.0], [305.0, 47084.0], [312.0, 47167.0], [314.0, 47113.0], [315.0, 73645.0], [313.0, 39125.5], [316.0, 46940.5], [319.0, 73192.0], [317.0, 41022.0], [333.0, 69657.0], [321.0, 46794.5], [323.0, 42011.333333333336], [326.0, 46216.5], [327.0, 30844.0], [320.0, 73094.0], [325.0, 23244.5], [324.0, 72627.0], [329.0, 21249.0], [331.0, 45658.0], [330.0, 51929.5], [334.0, 69551.0], [328.0, 70281.0], [332.0, 69820.0], [350.0, 18265.333333333332], [343.0, 32124.333333333332], [337.0, 69211.0], [336.0, 48747.5], [339.0, 68941.0], [338.0, 69061.0], [345.0, 45173.5], [351.0, 25912.0], [349.0, 25913.0], [348.0, 27685.0], [347.0, 47957.5], [344.0, 68224.0], [342.0, 68559.0], [341.0, 68757.0], [340.0, 31507.0], [366.0, 25910.0], [352.0, 24342.0], [353.0, 25907.0], [355.0, 66767.0], [354.0, 25907.0], [358.0, 66466.0], [357.0, 25909.0], [356.0, 66653.0], [367.0, 25910.0], [365.0, 65852.0], [364.0, 25911.0], [363.0, 25913.0], [362.0, 65959.0], [361.0, 66162.0], [360.0, 47171.5], [382.0, 25321.0], [368.0, 16658.0], [371.0, 23968.0], [370.0, 65682.0], [369.0, 25913.0], [381.0, 64934.0], [380.0, 25913.0], [373.0, 25013.5], [372.0, 27341.0], [376.0, 25090.0], [375.0, 16907.0], [374.0, 25909.0], [377.0, 25175.5], [379.0, 25244.5], [378.0, 25911.0], [383.0, 25910.0], [385.0, 19773.666666666668], [390.0, 44858.5], [389.0, 25909.0], [388.0, 46257.5], [391.0, 64296.0], [384.0, 64775.0], [392.0, 25658.0], [395.0, 44853.0], [397.0, 25824.0], [396.0, 17575.0], [386.0, 25911.0], [399.0, 39390.333333333336], [394.0, 25911.0], [393.0, 25913.0], [414.0, 25908.0], [402.0, 44909.0], [407.0, 26154.5], [401.0, 63830.0], [400.0, 25910.0], [406.0, 25911.0], [405.0, 25910.0], [404.0, 63367.0], [410.0, 44871.5], [409.0, 22682.5], [412.0, 26340.0], [403.0, 63530.0], [415.0, 26423.0], [408.0, 25912.0], [413.0, 63087.0], [411.0, 25908.0], [428.0, 45050.0], [419.0, 26522.0], [418.0, 62890.0], [417.0, 25908.0], [416.0, 25914.0], [421.0, 21290.666666666668], [420.0, 62786.0], [422.0, 25925.0], [423.0, 26667.0], [426.0, 26770.5], [425.0, 32607.0], [424.0, 62569.0], [431.0, 21676.333333333332], [430.0, 25909.0], [429.0, 25907.0], [427.0, 25909.0], [444.0, 38766.666666666664], [433.0, 26989.5], [435.0, 27056.0], [434.0, 25913.0], [437.0, 27131.5], [436.0, 61918.0], [439.0, 25910.0], [432.0, 62028.0], [438.0, 25910.0], [441.0, 45140.0], [443.0, 28668.0], [442.0, 18933.5], [447.0, 45217.0], [440.0, 30802.0], [446.0, 25909.0], [445.0, 25908.0], [449.0, 27522.5], [452.0, 27582.5], [454.0, 44137.333333333336], [455.0, 19284.0], [448.0, 25909.0], [453.0, 203.0], [456.0, 27765.5], [458.0, 27821.5], [457.0, 60797.0], [459.0, 25913.0], [461.0, 45270.0], [460.0, 25912.0], [451.0, 25908.0], [450.0, 61321.0], [463.0, 19562.0], [462.0, 27979.5], [479.0, 25909.0], [465.0, 45343.0], [468.0, 28145.5], [469.0, 25910.0], [471.0, 35628.0], [464.0, 25911.0], [470.0, 25911.0], [475.0, 34958.333333333336], [478.0, 59955.0], [477.0, 25906.0], [476.0, 25911.0], [467.0, 25906.0], [466.0, 25912.0], [474.0, 25910.0], [473.0, 25908.0], [472.0, 60285.0], [495.0, 25906.0], [489.0, 24147.0], [493.0, 45669.0], [494.0, 25906.0], [492.0, 25910.0], [483.0, 25913.0], [482.0, 59791.0], [481.0, 25905.0], [480.0, 25908.0], [491.0, 25915.0], [490.0, 25914.0], [488.0, 25908.0], [487.0, 44515.5], [485.0, 25910.0], [484.0, 25909.0], [511.0, 58500.0], [498.0, 29114.5], [502.0, 24642.333333333332], [501.0, 25911.0], [500.0, 58981.0], [503.0, 25910.0], [497.0, 25910.0], [496.0, 59098.0], [504.0, 32727.0], [505.0, 47262.5], [510.0, 25913.0], [509.0, 25912.0], [508.0, 25909.0], [499.0, 25910.0], [507.0, 25908.0], [506.0, 58669.0], [541.0, 21804.5], [516.0, 29680.0], [514.0, 21064.0], [512.0, 29530.5], [513.0, 25911.0], [527.0, 57744.0], [526.0, 57864.0], [525.0, 25907.0], [515.0, 45840.0], [518.0, 45916.0], [517.0, 25912.0], [519.0, 25910.0], [538.0, 25910.0], [537.0, 43800.5], [540.0, 57289.0], [539.0, 25908.0], [523.0, 40505.0], [521.0, 25911.0], [520.0, 25914.0], [524.0, 29924.0], [543.0, 46125.5], [535.0, 25908.0], [534.0, 25921.0], [533.0, 25913.0], [532.0, 25911.0], [531.0, 57535.0], [530.0, 25910.0], [529.0, 25912.0], [528.0, 25913.0], [542.0, 25909.0], [551.0, 30744.0], [545.0, 30582.5], [544.0, 21885.0], [549.0, 35470.0], [548.0, 25910.0], [547.0, 25908.0], [546.0, 56940.0], [550.0, 41354.0], [556.0, 36970.0], [555.0, 25911.0], [554.0, 56627.0], [553.0, 30146.0], [552.0, 25910.0], [558.0, 25911.0], [557.0, 25908.0], [559.0, 46231.0], [562.0, 31080.5], [566.0, 31198.5], [565.0, 25909.0], [564.0, 25911.0], [563.0, 32528.0], [567.0, 13008.5], [569.0, 27287.666666666668], [568.0, 25910.0], [570.0, 31374.0], [572.0, 31428.0], [571.0, 25910.0], [573.0, 25907.0], [575.0, 34023.0], [561.0, 13115.0], [560.0, 25907.0], [574.0, 25912.0], [605.0, 38980.0], [582.0, 31758.0], [577.0, 31568.0], [576.0, 25912.0], [591.0, 25912.0], [590.0, 25914.0], [589.0, 25910.0], [588.0, 54194.0], [587.0, 25914.0], [586.0, 25909.0], [585.0, 25909.0], [584.0, 25909.0], [580.0, 27764.333333333332], [579.0, 25909.0], [581.0, 25909.0], [578.0, 13006.5], [598.0, 23500.0], [597.0, 25908.0], [596.0, 25907.0], [595.0, 25908.0], [594.0, 30813.0], [593.0, 53987.0], [592.0, 25916.0], [599.0, 53848.0], [601.0, 32331.0], [600.0, 53738.0], [583.0, 25911.0], [602.0, 25910.0], [604.0, 25912.0], [603.0, 25913.0], [607.0, 28883.333333333332], [606.0, 41770.0], [636.0, 24561.5], [612.0, 32681.5], [609.0, 32591.5], [608.0, 25909.0], [611.0, 25912.0], [610.0, 25911.0], [615.0, 39621.0], [614.0, 25909.0], [613.0, 25910.0], [632.0, 25912.0], [618.0, 29291.0], [617.0, 25912.0], [616.0, 39433.0], [619.0, 52798.0], [620.0, 32910.5], [623.0, 32989.0], [622.0, 52647.0], [621.0, 25907.0], [627.0, 33103.0], [626.0, 25906.0], [625.0, 52495.0], [624.0, 29047.0], [629.0, 25908.0], [628.0, 25908.0], [631.0, 25910.0], [630.0, 52301.0], [639.0, 25911.0], [638.0, 25909.0], [637.0, 52019.0], [635.0, 22482.333333333332], [634.0, 39020.0], [665.0, 34263.0], [643.0, 35700.5], [645.0, 33707.0], [644.0, 25909.0], [646.0, 25906.0], [664.0, 25905.0], [647.0, 30911.0], [648.0, 46673.0], [649.0, 25907.0], [651.0, 25917.0], [650.0, 25917.0], [652.0, 46724.0], [654.0, 33940.0], [653.0, 25913.0], [655.0, 25909.0], [641.0, 25908.0], [640.0, 25907.0], [657.0, 30814.666666666668], [659.0, 34110.0], [658.0, 25908.0], [662.0, 37534.25], [663.0, 25909.0], [667.0, 34315.0], [666.0, 25910.0], [669.0, 25910.0], [668.0, 25906.0], [670.0, 31294.0], [671.0, 50471.0], [656.0, 51375.0], [699.0, 49368.0], [676.0, 34565.0], [673.0, 34486.0], [672.0, 25910.0], [675.0, 50309.0], [674.0, 25910.0], [687.0, 25908.0], [686.0, 25909.0], [685.0, 49833.0], [684.0, 25908.0], [683.0, 50014.0], [682.0, 28858.0], [681.0, 25908.0], [680.0, 25912.0], [694.0, 26123.0], [693.0, 49518.0], [692.0, 25908.0], [691.0, 25910.0], [690.0, 25913.0], [689.0, 25910.0], [688.0, 49743.0], [695.0, 25910.0], [697.0, 35158.0], [696.0, 25912.0], [679.0, 38064.0], [677.0, 25912.0], [698.0, 29016.0], [701.0, 26094.8], [702.0, 35315.5], [703.0, 25908.0], [700.0, 49254.0], [710.0, 25910.2], [705.0, 31553.909090909092], [704.0, 45009.0], [719.0, 25909.5], [717.0, 31586.125], [716.0, 25910.333333333332], [718.0, 31269.5], [715.0, 25908.666666666668], [714.0, 34238.666666666664], [708.0, 25911.6], [709.0, 48870.0], [707.0, 34091.6], [706.0, 28705.14285714286], [711.0, 33483.0], [724.0, 25911.0], [723.0, 25910.0], [722.0, 25910.0], [721.0, 48221.0], [720.0, 25914.0], [725.0, 38943.0], [727.0, 25908.0], [726.0, 25912.0], [728.0, 25913.0], [712.0, 32766.333333333332], [713.0, 37287.0], [1.0, 118768.0]], "isOverall": false, "label": "weather", "isController": false}, {"data": [[386.4719999999996, 50531.63900000007]], "isOverall": false, "label": "weather-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 728.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 66.0, "minX": 1.64608088E12, "maxY": 35126.4, "series": [{"data": [[1.646080925E12, 3414.0], [1.64608101E12, 792.4], [1.646080885E12, 595.2], [1.64608097E12, 3813.2], [1.646081055E12, 498.4], [1.64608092E12, 4354.8], [1.646081005E12, 895.2], [1.64608088E12, 98.6], [1.646080965E12, 16074.6], [1.64608105E12, 599.2], [1.64608102E12, 743.0], [1.646080935E12, 8030.4], [1.64608098E12, 4063.0], [1.646080895E12, 892.4], [1.64608093E12, 4795.2], [1.646081015E12, 1095.6], [1.64608106E12, 248.6], [1.64608089E12, 1093.6], [1.646080975E12, 3171.4], [1.646080945E12, 35126.4], [1.64608103E12, 898.2], [1.646080905E12, 3146.2], [1.64608099E12, 1511.6], [1.64608094E12, 29383.0], [1.646081025E12, 989.0], [1.6460809E12, 1834.0], [1.646080985E12, 2873.6], [1.646080955E12, 32180.2], [1.646081E12, 894.4], [1.646080915E12, 3121.6], [1.64608096E12, 25103.4], [1.646081045E12, 994.8], [1.64608095E12, 32223.4], [1.646081035E12, 1090.2], [1.64608091E12, 3863.8], [1.646080995E12, 893.0], [1.64608104E12, 746.6]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.646080925E12, 561.0], [1.64608101E12, 528.0], [1.646080885E12, 396.0], [1.64608097E12, 462.0], [1.646081055E12, 330.0], [1.64608092E12, 495.0], [1.646081005E12, 594.0], [1.64608088E12, 66.0], [1.646080965E12, 495.0], [1.64608105E12, 396.0], [1.64608102E12, 495.0], [1.646080935E12, 561.0], [1.64608098E12, 627.0], [1.646080895E12, 594.0], [1.64608093E12, 462.0], [1.646081015E12, 726.0], [1.64608106E12, 165.0], [1.64608089E12, 726.0], [1.646080975E12, 726.0], [1.646080945E12, 627.0], [1.64608103E12, 594.0], [1.646080905E12, 363.0], [1.64608099E12, 660.0], [1.64608094E12, 528.0], [1.646081025E12, 660.0], [1.6460809E12, 528.0], [1.646080985E12, 528.0], [1.646080955E12, 693.0], [1.646081E12, 594.0], [1.646080915E12, 693.0], [1.64608096E12, 726.0], [1.646081045E12, 660.0], [1.64608095E12, 396.0], [1.646081035E12, 726.0], [1.64608091E12, 495.0], [1.646080995E12, 594.0], [1.64608104E12, 495.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.64608106E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 997.0, "minX": 1.64608088E12, "maxY": 118236.2, "series": [{"data": [[1.646080925E12, 30878.18181818182], [1.64608101E12, 98674.5], [1.646080885E12, 4395.916666666667], [1.64608097E12, 58996.05], [1.646081055E12, 116659.2], [1.64608092E12, 25202.499999999996], [1.646081005E12, 95915.55555555558], [1.64608088E12, 997.0], [1.646080965E12, 39709.00000000001], [1.64608105E12, 112807.66666666666], [1.64608102E12, 98249.20000000001], [1.646080935E12, 35361.3870967742], [1.64608098E12, 69630.60000000002], [1.646080895E12, 11268.888888888889], [1.64608093E12, 31138.545454545456], [1.646081015E12, 99792.04545454546], [1.64608106E12, 118236.2], [1.64608089E12, 7755.863636363636], [1.646080975E12, 70150.53846153847], [1.646080945E12, 31707.6976744186], [1.64608103E12, 98304.77777777778], [1.646080905E12, 15050.562499999998], [1.64608099E12, 83103.38095238096], [1.64608094E12, 30931.777777777774], [1.646081025E12, 98864.25000000001], [1.6460809E12, 13582.0], [1.646080985E12, 74342.45], [1.646080955E12, 34777.865853658535], [1.646081E12, 91935.66666666667], [1.646080915E12, 25026.839999999997], [1.64608096E12, 38304.79710144925], [1.646081045E12, 109689.85], [1.64608095E12, 30883.648648648643], [1.646081035E12, 100055.68181818182], [1.64608091E12, 19428.285714285714], [1.646080995E12, 88691.33333333336], [1.64608104E12, 106185.93333333335]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.64608106E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 997.0, "minX": 1.64608088E12, "maxY": 118236.2, "series": [{"data": [[1.646080925E12, 27536.954545454548], [1.64608101E12, 98674.3125], [1.646080885E12, 4395.666666666667], [1.64608097E12, 49079.500000000015], [1.646081055E12, 116659.2], [1.64608092E12, 21272.454545454548], [1.646081005E12, 95915.55555555558], [1.64608088E12, 997.0], [1.646080965E12, 22239.000000000004], [1.64608105E12, 112807.66666666666], [1.64608102E12, 98249.20000000001], [1.646080935E12, 23643.61290322582], [1.64608098E12, 59107.31999999999], [1.646080895E12, 11268.77777777778], [1.64608093E12, 25111.22727272727], [1.646081015E12, 99791.95454545454], [1.64608106E12, 118236.2], [1.64608089E12, 7755.818181818181], [1.646080975E12, 63118.153846153844], [1.646080945E12, 11339.11627906977], [1.64608103E12, 98304.66666666667], [1.646080905E12, 13988.4375], [1.64608099E12, 80862.80952380956], [1.64608094E12, 10548.861111111111], [1.646081025E12, 98864.04999999999], [1.6460809E12, 13549.555555555555], [1.646080985E12, 65035.55], [1.646080955E12, 15124.085365853658], [1.646081E12, 91935.66666666667], [1.646080915E12, 23271.52], [1.64608096E12, 20056.53623188406], [1.646081045E12, 109689.8], [1.64608095E12, 9012.12162162162], [1.646081035E12, 100055.45454545454], [1.64608091E12, 17274.095238095237], [1.646080995E12, 88691.2777777778], [1.64608104E12, 106185.93333333335]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.64608106E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.8181818181818181, "minX": 1.64608088E12, "maxY": 19824.418918918913, "series": [{"data": [[1.646080925E12, 5.545454545454546], [1.64608101E12, 222.68750000000003], [1.646080885E12, 5.583333333333334], [1.64608097E12, 1542.65], [1.646081055E12, 19508.2], [1.64608092E12, 9.954545454545453], [1.646081005E12, 0.8888888888888888], [1.64608088E12, 27.0], [1.646080965E12, 15004.044444444438], [1.64608105E12, 18441.416666666668], [1.64608102E12, 756.1333333333333], [1.646080935E12, 7523.4838709677415], [1.64608098E12, 4171.08], [1.646080895E12, 1.3888888888888893], [1.64608093E12, 37.54545454545455], [1.646081015E12, 1404.4545454545455], [1.64608106E12, 19508.8], [1.64608089E12, 0.8181818181818181], [1.646080975E12, 2755.9230769230767], [1.646080945E12, 19015.44186046512], [1.64608103E12, 887.1666666666667], [1.646080905E12, 1.0625000000000002], [1.64608099E12, 929.952380952381], [1.64608094E12, 18386.77777777777], [1.646081025E12, 1293.95], [1.6460809E12, 1.166666666666667], [1.646080985E12, 3902.9000000000005], [1.646080955E12, 17869.60975609756], [1.646081E12, 1.1111111111111112], [1.646080915E12, 0.9199999999999999], [1.64608096E12, 15764.797101449276], [1.646081045E12, 14708.45], [1.64608095E12, 19824.418918918913], [1.646081035E12, 4268.409090909091], [1.64608091E12, 1.3809523809523814], [1.646080995E12, 0.8333333333333333], [1.64608104E12, 11613.933333333332]], "isOverall": false, "label": "weather", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.64608106E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 665.0, "minX": 1.64608088E12, "maxY": 118768.0, "series": [{"data": [[1.646080925E12, 37230.0], [1.64608101E12, 99316.0], [1.646080885E12, 5751.0], [1.64608097E12, 72769.0], [1.646081055E12, 117872.0], [1.64608092E12, 33341.0], [1.646081005E12, 97263.0], [1.64608088E12, 1329.0], [1.646080965E12, 68559.0], [1.64608105E12, 115906.0], [1.64608102E12, 101142.0], [1.646080935E12, 45331.0], [1.64608098E12, 79407.0], [1.646080895E12, 13077.0], [1.64608093E12, 41359.0], [1.646081015E12, 105199.0], [1.64608106E12, 118768.0], [1.64608089E12, 9423.0], [1.646080975E12, 75995.0], [1.646080945E12, 52953.0], [1.64608103E12, 104516.0], [1.646080905E12, 21337.0], [1.64608099E12, 86655.0], [1.64608094E12, 49368.0], [1.646081025E12, 110480.0], [1.6460809E12, 16613.0], [1.646080985E12, 83042.0], [1.646080955E12, 60797.0], [1.646081E12, 93242.0], [1.646080915E12, 29254.0], [1.64608096E12, 64612.0], [1.646081045E12, 115772.0], [1.64608095E12, 57289.0], [1.646081035E12, 114409.0], [1.64608091E12, 25734.0], [1.646080995E12, 90221.0], [1.64608104E12, 114604.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.646080925E12, 37136.4], [1.64608101E12, 99291.5], [1.646080885E12, 5713.8], [1.64608097E12, 72698.0], [1.646081055E12, 117838.3], [1.64608092E12, 33225.8], [1.646081005E12, 96951.6], [1.64608088E12, 1329.0], [1.646080965E12, 68478.0], [1.64608105E12, 115782.7], [1.64608102E12, 100077.6], [1.646080935E12, 45170.2], [1.64608098E12, 79307.0], [1.646080895E12, 12953.7], [1.64608093E12, 41096.0], [1.646081015E12, 103943.8], [1.64608106E12, 118768.0], [1.64608089E12, 9188.2], [1.646080975E12, 75857.0], [1.646080945E12, 52798.0], [1.64608103E12, 99648.8], [1.646080905E12, 21319.4], [1.64608099E12, 86492.6], [1.64608094E12, 49288.2], [1.646081025E12, 99871.5], [1.6460809E12, 16485.6], [1.646080985E12, 82952.4], [1.646080955E12, 60585.0], [1.646081E12, 93116.0], [1.646080915E12, 29106.8], [1.64608096E12, 64375.8], [1.646081045E12, 115263.1], [1.64608095E12, 57232.0], [1.646081035E12, 110026.3], [1.64608091E12, 25643.4], [1.646080995E12, 90175.1], [1.64608104E12, 114469.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.646080925E12, 37230.0], [1.64608101E12, 99316.0], [1.646080885E12, 5751.0], [1.64608097E12, 72769.0], [1.646081055E12, 117872.0], [1.64608092E12, 33341.0], [1.646081005E12, 97263.0], [1.64608088E12, 1329.0], [1.646080965E12, 68559.0], [1.64608105E12, 115906.0], [1.64608102E12, 101142.0], [1.646080935E12, 45331.0], [1.64608098E12, 79407.0], [1.646080895E12, 13077.0], [1.64608093E12, 41359.0], [1.646081015E12, 105199.0], [1.64608106E12, 118768.0], [1.64608089E12, 9423.0], [1.646080975E12, 75995.0], [1.646080945E12, 52953.0], [1.64608103E12, 104516.0], [1.646080905E12, 21337.0], [1.64608099E12, 86655.0], [1.64608094E12, 49368.0], [1.646081025E12, 110480.0], [1.6460809E12, 16613.0], [1.646080985E12, 83042.0], [1.646080955E12, 60797.0], [1.646081E12, 93242.0], [1.646080915E12, 29254.0], [1.64608096E12, 64612.0], [1.646081045E12, 115772.0], [1.64608095E12, 57289.0], [1.646081035E12, 114409.0], [1.64608091E12, 25734.0], [1.646080995E12, 90221.0], [1.64608104E12, 114604.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.646080925E12, 37230.0], [1.64608101E12, 99316.0], [1.646080885E12, 5751.0], [1.64608097E12, 72769.0], [1.646081055E12, 117872.0], [1.64608092E12, 33341.0], [1.646081005E12, 97263.0], [1.64608088E12, 1329.0], [1.646080965E12, 68559.0], [1.64608105E12, 115906.0], [1.64608102E12, 101142.0], [1.646080935E12, 45331.0], [1.64608098E12, 79407.0], [1.646080895E12, 13077.0], [1.64608093E12, 41359.0], [1.646081015E12, 105136.0], [1.64608106E12, 118768.0], [1.64608089E12, 9393.9], [1.646080975E12, 75974.75], [1.646080945E12, 52953.0], [1.64608103E12, 104516.0], [1.646080905E12, 21337.0], [1.64608099E12, 86647.9], [1.64608094E12, 49368.0], [1.646081025E12, 109950.34999999999], [1.6460809E12, 16613.0], [1.646080985E12, 83042.0], [1.646080955E12, 60778.4], [1.646081E12, 93242.0], [1.646080915E12, 29241.8], [1.64608096E12, 64581.7], [1.646081045E12, 115747.65], [1.64608095E12, 57289.0], [1.646081035E12, 113766.84999999999], [1.64608091E12, 25734.0], [1.646080995E12, 90221.0], [1.64608104E12, 114604.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.646080925E12, 33450.0], [1.64608101E12, 97418.0], [1.646080885E12, 2629.0], [1.64608097E12, 68757.0], [1.646081055E12, 115817.0], [1.64608092E12, 29427.0], [1.646081005E12, 94414.0], [1.64608088E12, 665.0], [1.646080965E12, 64775.0], [1.64608105E12, 107191.0], [1.64608102E12, 96935.0], [1.646080935E12, 41504.0], [1.64608098E12, 76075.0], [1.646080895E12, 9724.0], [1.64608093E12, 37397.0], [1.646081015E12, 98136.0], [1.64608106E12, 117746.0], [1.64608089E12, 6130.0], [1.646080975E12, 72891.0], [1.646080945E12, 49518.0], [1.64608103E12, 96863.0], [1.646080905E12, 17729.0], [1.64608099E12, 83265.0], [1.64608094E12, 45481.0], [1.646081025E12, 97143.0], [1.6460809E12, 13451.0], [1.646080985E12, 79556.0], [1.646080955E12, 57378.0], [1.646081E12, 90415.0], [1.646080915E12, 25909.0], [1.64608096E12, 61130.0], [1.646081045E12, 102713.0], [1.64608095E12, 53550.0], [1.646081035E12, 95571.0], [1.64608091E12, 22078.0], [1.646080995E12, 87095.0], [1.64608104E12, 98550.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.646080925E12, 35857.0], [1.64608101E12, 98893.0], [1.646080885E12, 4538.5], [1.64608097E12, 69738.5], [1.646081055E12, 116568.0], [1.64608092E12, 30799.0], [1.646081005E12, 95963.0], [1.64608088E12, 997.0], [1.646080965E12, 66466.0], [1.64608105E12, 113399.5], [1.64608102E12, 97972.0], [1.646080935E12, 42720.0], [1.64608098E12, 78005.0], [1.646080895E12, 11082.5], [1.64608093E12, 39537.0], [1.646081015E12, 98991.0], [1.64608106E12, 118318.0], [1.64608089E12, 7734.0], [1.646080975E12, 74694.0], [1.646080945E12, 51579.0], [1.64608103E12, 97980.0], [1.646080905E12, 20501.0], [1.64608099E12, 84824.5], [1.64608094E12, 47287.0], [1.646081025E12, 98216.0], [1.6460809E12, 15246.5], [1.646080985E12, 80856.5], [1.646080955E12, 58981.0], [1.646081E12, 92073.5], [1.646080915E12, 27740.0], [1.64608096E12, 62988.5], [1.646081045E12, 108361.0], [1.64608095E12, 56415.0], [1.646081035E12, 97078.0], [1.64608091E12, 24442.0], [1.646080995E12, 88719.5], [1.64608104E12, 107169.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.64608106E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2722.0, "minX": 1.0, "maxY": 115495.0, "series": [{"data": [[2.0, 115495.0], [8.0, 29730.0], [9.0, 63729.0], [3.0, 85972.0], [12.0, 47342.0], [13.0, 64052.5], [14.0, 53633.5], [15.0, 52722.5], [1.0, 95986.0], [4.0, 92236.0], [16.0, 58795.0], [17.0, 49788.0], [18.0, 62677.5], [19.0, 59955.0], [5.0, 89837.0], [22.0, 52019.0], [6.0, 66559.5], [7.0, 39453.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 26335.0], [8.0, 12656.0], [9.0, 25911.0], [3.0, 17778.5], [12.0, 25910.0], [13.0, 25910.5], [14.0, 25910.0], [15.0, 25911.0], [1.0, 2722.0], [4.0, 18100.0], [16.0, 25910.0], [17.0, 25910.0], [18.0, 25909.0], [19.0, 25909.5], [5.0, 20880.0], [22.0, 25909.0], [6.0, 26970.0], [7.0, 21905.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 115495.0, "series": [{"data": [[2.0, 115495.0], [8.0, 29730.0], [9.0, 63729.0], [3.0, 85972.0], [12.0, 47342.0], [13.0, 64052.5], [14.0, 53633.5], [15.0, 52722.0], [1.0, 95986.0], [4.0, 92236.0], [16.0, 58795.0], [17.0, 49788.0], [18.0, 62677.0], [19.0, 59955.0], [5.0, 89837.0], [22.0, 52019.0], [6.0, 66559.5], [7.0, 39453.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 0.0], [8.0, 0.0], [9.0, 0.0], [3.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [1.0, 0.0], [4.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [5.0, 0.0], [22.0, 0.0], [6.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 22.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.2, "minX": 1.64608088E12, "maxY": 18.4, "series": [{"data": [[1.646080925E12, 17.2], [1.646080905E12, 16.0], [1.646080885E12, 15.2], [1.64608094E12, 12.8], [1.64608092E12, 16.8], [1.6460809E12, 16.0], [1.64608088E12, 6.2], [1.646080935E12, 18.4], [1.646080915E12, 16.4], [1.646080895E12, 15.6], [1.64608093E12, 17.4], [1.64608091E12, 16.2], [1.64608089E12, 15.8]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.64608094E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.64608088E12, "maxY": 12.6, "series": [{"data": [[1.646080925E12, 3.4], [1.64608101E12, 3.2], [1.646080885E12, 2.4], [1.64608097E12, 2.8], [1.646081055E12, 2.0], [1.64608092E12, 3.0], [1.646081005E12, 3.6], [1.64608088E12, 0.4], [1.646080965E12, 3.0], [1.64608105E12, 2.4], [1.64608102E12, 3.0], [1.646080935E12, 3.4], [1.64608098E12, 3.8], [1.646080895E12, 3.6], [1.64608093E12, 2.8], [1.646081015E12, 4.4], [1.64608106E12, 1.0], [1.64608089E12, 4.4], [1.646080975E12, 4.4], [1.646080945E12, 3.8], [1.64608103E12, 3.6], [1.646080905E12, 2.2], [1.64608099E12, 4.0], [1.64608094E12, 3.2], [1.646081025E12, 4.0], [1.6460809E12, 3.2], [1.646080985E12, 3.2], [1.646080955E12, 4.2], [1.646081E12, 3.6], [1.646080915E12, 4.2], [1.64608096E12, 4.4], [1.646081045E12, 4.0], [1.64608095E12, 2.4], [1.646081035E12, 4.4], [1.64608091E12, 3.0], [1.646080995E12, 3.6], [1.64608104E12, 3.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.646080945E12, 12.6], [1.646080955E12, 11.2], [1.646080935E12, 1.8], [1.64608096E12, 8.2], [1.64608094E12, 10.2], [1.64608095E12, 11.2], [1.646080965E12, 5.2]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.HttpHostConnectException", "isController": false}, {"data": [[1.646080945E12, 0.8], [1.646080925E12, 1.0], [1.646080905E12, 1.0], [1.64608099E12, 0.2], [1.64608097E12, 1.2], [1.64608094E12, 1.0], [1.64608092E12, 1.4], [1.6460809E12, 0.4], [1.646080985E12, 0.8], [1.646080965E12, 0.8], [1.646080955E12, 1.0], [1.646080935E12, 1.0], [1.64608098E12, 1.2], [1.646080915E12, 0.8], [1.64608096E12, 1.2], [1.64608095E12, 1.2], [1.64608093E12, 1.6], [1.64608091E12, 1.2], [1.646080975E12, 0.8]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 5000, "maxX": 1.64608106E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.64608088E12, "maxY": 13.4, "series": [{"data": [[1.646080945E12, 13.4], [1.646080925E12, 1.0], [1.646080905E12, 1.0], [1.64608099E12, 0.2], [1.64608097E12, 1.2], [1.64608094E12, 11.2], [1.64608092E12, 1.4], [1.6460809E12, 0.4], [1.646080985E12, 0.8], [1.646080965E12, 6.0], [1.646080955E12, 12.2], [1.646080935E12, 2.8], [1.64608098E12, 1.2], [1.646080915E12, 0.8], [1.64608096E12, 9.4], [1.64608095E12, 12.4], [1.64608093E12, 1.6], [1.64608091E12, 1.2], [1.646080975E12, 0.8]], "isOverall": false, "label": "weather-failure", "isController": false}, {"data": [[1.646080925E12, 3.4], [1.64608101E12, 3.2], [1.646080885E12, 2.4], [1.64608097E12, 2.8], [1.646081055E12, 2.0], [1.64608092E12, 3.0], [1.646081005E12, 3.6], [1.64608088E12, 0.4], [1.646080965E12, 3.0], [1.64608105E12, 2.4], [1.64608102E12, 3.0], [1.646080935E12, 3.4], [1.64608098E12, 3.8], [1.646080895E12, 3.6], [1.64608093E12, 2.8], [1.646081015E12, 4.4], [1.64608106E12, 1.0], [1.64608089E12, 4.4], [1.646080975E12, 4.4], [1.646080945E12, 3.8], [1.64608103E12, 3.6], [1.646080905E12, 2.2], [1.64608099E12, 4.0], [1.64608094E12, 3.2], [1.646081025E12, 4.0], [1.6460809E12, 3.2], [1.646080985E12, 3.2], [1.646080955E12, 4.2], [1.646081E12, 3.6], [1.646080915E12, 4.2], [1.64608096E12, 4.4], [1.646081045E12, 4.0], [1.64608095E12, 2.4], [1.646081035E12, 4.4], [1.64608091E12, 3.0], [1.646080995E12, 3.6], [1.64608104E12, 3.0]], "isOverall": false, "label": "weather-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.64608106E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.64608088E12, "maxY": 13.4, "series": [{"data": [[1.646080925E12, 3.4], [1.64608101E12, 3.2], [1.646080885E12, 2.4], [1.64608097E12, 2.8], [1.646081055E12, 2.0], [1.64608092E12, 3.0], [1.646081005E12, 3.6], [1.64608088E12, 0.4], [1.646080965E12, 3.0], [1.64608105E12, 2.4], [1.64608102E12, 3.0], [1.646080935E12, 3.4], [1.64608098E12, 3.8], [1.646080895E12, 3.6], [1.64608093E12, 2.8], [1.646081015E12, 4.4], [1.64608106E12, 1.0], [1.64608089E12, 4.4], [1.646080975E12, 4.4], [1.646080945E12, 3.8], [1.64608103E12, 3.6], [1.646080905E12, 2.2], [1.64608099E12, 4.0], [1.64608094E12, 3.2], [1.646081025E12, 4.0], [1.6460809E12, 3.2], [1.646080985E12, 3.2], [1.646080955E12, 4.2], [1.646081E12, 3.6], [1.646080915E12, 4.2], [1.64608096E12, 4.4], [1.646081045E12, 4.0], [1.64608095E12, 2.4], [1.646081035E12, 4.4], [1.64608091E12, 3.0], [1.646080995E12, 3.6], [1.64608104E12, 3.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.646080945E12, 13.4], [1.646080925E12, 1.0], [1.646080905E12, 1.0], [1.64608099E12, 0.2], [1.64608097E12, 1.2], [1.64608094E12, 11.2], [1.64608092E12, 1.4], [1.6460809E12, 0.4], [1.646080985E12, 0.8], [1.646080965E12, 6.0], [1.646080955E12, 12.2], [1.646080935E12, 2.8], [1.64608098E12, 1.2], [1.646080915E12, 0.8], [1.64608096E12, 9.4], [1.64608095E12, 12.4], [1.64608093E12, 1.6], [1.64608091E12, 1.2], [1.646080975E12, 0.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 5000, "maxX": 1.64608106E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

